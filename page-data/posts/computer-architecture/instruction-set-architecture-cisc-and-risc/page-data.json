{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/computer-architecture/instruction-set-architecture-cisc-and-risc","result":{"data":{"markdownRemark":{"id":"363002f4-4616-50d2-9478-fe527bb8c0cf","html":"<ul>\n<li><a href=\"#%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A7%91%ED%95%A9%EA%B5%AC%EC%A1%B0,-CISC%EC%99%80-RISC\">명령어 집합구조, CISC와 RISC</a>\n<ul>\n<li><a href=\"#%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A7%91%ED%95%A9\">명령어 집합</a></li>\n<li><a href=\"#cisc\">CISC</a></li>\n<li><a href=\"#risc\">RISC</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"명령어-집합구조-cisc와-risc\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A7%91%ED%95%A9%EA%B5%AC%EC%A1%B0-cisc%EC%99%80-risc\" aria-label=\"명령어 집합구조 cisc와 risc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명령어 집합구조, CISC와 RISC</h2>\n<p>명령어 파이프라이닝에 유리한 명령어의 구조에 대해서 배워보자</p>\n<h3 id=\"명령어-집합\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A7%91%ED%95%A9\" aria-label=\"명령어 집합 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명령어 집합</h3>\n<p>CPU는 명령어를 실행 → 모든 CPU가 똑같은 구조의 명령어를 실행하진 ❌ → 명령어의 세세한 생김새, 연산, 주소 지정 방식 등은 CPU마다 다름</p>\n<p><strong><em>명령어 집합(구조)</em></strong></p>\n<ul>\n<li>\n<p>CPU가 이해할 수 있는 명령어들의 모음</p>\n</li>\n<li>\n<p>각 CPU의 언어라고 봐도 무방</p>\n</li>\n<li>\n<p>인텔 CPU 컴퓨터에서 만든 실행 파일(명령어 들의 모음)을 그대로 아이폰에 옮겨 특별한 설정 없이 바로 실행하면 실행 ❌</p>\n<p>c.f. ) 인텔의 CPU는 일반적으로 “X86(X86-64)” 명령어 집합을, 애플의 CPU는 일반적으로 “ARM” 명령어 집합을 따름</p>\n<p><img src=\"https://github.com/boost-library/yong-study/assets/74396128/5b2915a5-311d-4352-847d-913bbdc7f468\" alt=\"image\">\n명령어 집합이 다르기 때문에 같은 소스를 컴파일하더라도 어셈블리어, 기계어의 종류가 다름</p>\n</li>\n<li>\n<p>명령어가 달라지면 명령어 해석 방식, 레지스터의 종류와 개수, 파이프라이닝의 용이성 등이 달라지며 CPU의 구조 나아가서 컴퓨터의 구조까지 달라진다</p>\n<ul>\n<li>명령어의 구조_ISA(Instruction Set Architecture)\n<ul>\n<li>CPU의 언어이자 하드웨어가 소프트웨어를 어떻게 이해할지에 대한 약속</li>\n<li>하드웨어별 용이한 명령어가 있다</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>→ 명령어 집합의 두 축: <Mark>CISC &#x26; RISC</Mark></p>\n<h3 id=\"cisc\" style=\"position:relative;\"><a href=\"#cisc\" aria-label=\"cisc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>cisc</h3>\n<p>CISC(Complex Instruction Set Computer)</p>\n<ul>\n<li>복잡한 명령어 집합을 활용하는 컴퓨터(CPU)\n<ul>\n<li>x86, x86-64는 CISC 기반 명령어 집합 구조</li>\n</ul>\n</li>\n<li>복잡하고 다양한 명령어 활용\n<ul>\n<li>명령어의 형태와 크기가 다양한 <Mark>가변 길이 명령어</Mark>를 사용</li>\n</ul>\n</li>\n<li>다양하고 강력한 명령어를 활용\n<ul>\n<li>상대적으로 적은 수의 명령어로도 프로그램을 실행</li>\n<li>소스코드를 컴파일하면 강력하고 적은 수의 가변 길이의 명령어가 나옴</li>\n</ul>\n</li>\n</ul>\n<p>메모리를 최대한 아끼며 개발해야 했던 시절에 인기가 높았으나 <Mark>명령어 파이프라이닝이 불리하다</Mark>는 치명적인 단점이 존재</p>\n<ul>\n<li>명령어가 워낙 복잡하고 다양한 기능을 제공하는 탓에 <Mark>명령어의 크기와 실행되기까지의 시간</Mark>이 일정하지 않음</li>\n<li>복잡한 명령어 때문에 <Mark>명령어 하나를 실행하는 데에 여러 클럭 주기</Mark> 필요</li>\n<li>복잡한 명령어의 사용 빈도가 낮음, 자주 쓰이는 명령어의 빈도수가 높다</li>\n</ul>\n<h3 id=\"risc\" style=\"position:relative;\"><a href=\"#risc\" aria-label=\"risc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>risc</h3>\n<p>RISC(Reduced Instruction Set Computer)</p>\n<ul>\n<li>명령어의 종류가 적고, 짧고 규격화된 명령어 사용</li>\n<li>단순하고 적은 수의 고정 길이 명령어 집합을 활용(<Mark>주로 1클럭 내에</Mark>) → 파이프라이닝에 유리</li>\n<li>메모리 접근 최소화(load, store), 레지스터 십분 활용 → CISC에 비해서 범용 레지스터의 종류가 더 많은 경우가 많음</li>\n<li>다만, 명령어의 종류가 CISC보다 적기에 컴파일 했을 때 <Mark>더 많은 명령어로</Mark> 프로그램을 동작 시킴(ex_ARM)</li>\n</ul>\n<h4 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h4>\n<p><img src=\"https://github.com/boost-library/yong-study/assets/74396128/f15253b0-64e9-4923-85c8-b3fc803cfd4a\" alt=\"image\"></p>\n<p>c.f. ) 현대 CISC의 활용: 마이크로 명령어, 가급적 명령어의 실행을 1 클럭 내로 잘게 쪼개서 실행하므로, 내부적으로는 RISC처럼 실행</p>","fields":{"slug":"/posts/2023-09-01---명령어 집합구조, CISC와 RISC//posts/computer-architecture/instruction-set-architecture-cisc-and-risc","tagSlugs":["/tag/computerarchitecture/","/tag/cs/"]},"frontmatter":{"date":"2023-09-01T20:35:32.169Z","description":"명령어 집합구조, CISC와 RISC에 대해서 배웁니다.","tags":["ComputerArchitecture","CS"],"title":"명령어 집합구조, CISC와 RISC","socialImage":null}}},"pageContext":{"slug":"/posts/2023-09-01---명령어 집합구조, CISC와 RISC//posts/computer-architecture/instruction-set-architecture-cisc-and-risc"}},"staticQueryHashes":["2236276093","251939775","401334301"]}