{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/0과1로 문자,숫자를 표현하는 방법","result":{"data":{"markdownRemark":{"id":"741b3afb-9509-54fe-9ee5-03ff874d7854","html":"<ul>\n<li><a href=\"#0%EA%B3%BC-1%EB%A1%9C-%EC%88%AB%EC%9E%90%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">0과 1로 숫자를 표현하는 방법</a>\n<ul>\n<li><a href=\"#%EC%A0%95%EB%B3%B4-%EB%8B%A8%EC%9C%84\">정보 단위</a></li>\n<li><a href=\"#%EC%9D%B4%EC%A7%84%EB%B2%95\">이진법: 0과 1로 숫자 표현하기</a></li>\n<li><a href=\"#%EC%8B%AD%EC%9C%A1%EC%A7%84%EB%B2%95\">십육진법</a></li>\n<li><a href=\"#%EC%8B%AD%EC%9C%A1%EC%A7%84%EB%B2%95%EA%B3%BC-%EC%9D%B4%EC%A7%84%EB%B2%95%EC%9D%98-%EA%B4%80%EA%B3%84\">십육진법과 이진법의 관계</a></li>\n</ul>\n</li>\n<li><a href=\"#0%EA%B3%BC-1%EB%A1%9C-%EB%AC%B8%EC%9E%90%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">0과 1로 문자를 표현하는 방법</a>\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%9E%90-%EC%A7%91%ED%95%A9%EA%B3%BC-%EC%9D%B8%EC%BD%94%EB%94%A9\">문자 집합과 인코딩</a></li>\n<li><a href=\"#%EC%9C%A0%EB%8B%88%EC%BD%94%EB%93%9C-%EB%AC%B8%EC%9E%90-%EC%A7%91%ED%95%A9%EA%B3%BC-utf-8\">유니코드 문자 집합과 utf-8</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"0과-1로-숫자를-표현하는-방법\" style=\"position:relative;\"><a href=\"#0%EA%B3%BC-1%EB%A1%9C-%EC%88%AB%EC%9E%90%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"0과 1로 숫자를 표현하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0과 1로 숫자를 표현하는 방법</h2>\n<h4 id=\"정보-단위\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%B3%B4-%EB%8B%A8%EC%9C%84\" aria-label=\"정보 단위 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정보 단위</h4>\n<p>비트(bit): 0과 1을 표현하는 가장 작은 정보 단위</p>\n<ul>\n<li>\n<p>n비트로 2^n가지의 정보 표현 가능</p>\n</li>\n<li>\n<p>프로그램은 수 많은 비트로 이루어져 있음</p>\n</li>\n<li>\n<p>비트보다 더 큰 단위를 주로 사용</p>\n<ul>\n<li>\n<p>바이트, 킬로바이트, 메가바이트, 기가바이트. 테라바이트 …\n<img src=\"https://github.com/boost-library/yong-study/assets/74396128/d95e95af-ae06-45ed-9a78-eff7181c92d0\" alt=\"image\">\nc.f.) 이전 단위를 1024개씩 묶은 단위는 kiB, MiB, GiB, …</p>\n<p>최근에는 정보 단위가 커지면서 1000개씩 묶은 단위와 1024개씩 묶은 단위를 구분해서 사용</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"워드word\" style=\"position:relative;\"><a href=\"#%EC%9B%8C%EB%93%9Cword\" aria-label=\"워드word permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>워드(word)</h5>\n<ul>\n<li>CPU가 한 번에 처리할 수 있는 정보의 크기 단위(ex_CPU가 한번에 32bit처리 → 1word = 32bit)</li>\n<li>하프 워드(half word): 워드의 절반 크기</li>\n<li>풀 워드(full word): 워드 크기</li>\n<li>더블 워드(double word): 워드의 두 배 크기</li>\n</ul>\n<h4 id=\"이진법\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A7%84%EB%B2%95\" aria-label=\"이진법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이진법</h4>\n<ol>\n<li>이진법(binary)</li>\n</ol>\n<ul>\n<li>0과 1로 수를 표현하는 방법</li>\n<li>숫자가 1을 넘어가는 시점에 자리올림</li>\n<li>우리가 일상적으로 사용하는 진법은 숫자가 9를 넘어갈 떄 자리올림하는 십진법</li>\n</ul>\n<ol start=\"2\">\n<li>이진수 8 표기</li>\n</ol>\n<ul>\n<li>1000 <mark>(2)</li>\n<li><Mark>0b</Mark>1000</li>\n</ul>\n<ol start=\"3\">\n<li>0과 1로 음수 표현하기: 2의 보수(현대 컴퓨터에서 가장 많이 사용되는 방법)</li>\n</ol>\n<ul>\n<li>\n<p>어떤 수를 그보다 큰 2^n에서 뺸 값 - 11(2)을 음수로 표현한 값 구하는 <Mark>어려운</Mark> 방법</p>\n</li>\n<li>\n<p>11(2)보다 큰 2^n = 100(2) - 100(2)</p>\n</li>\n<li>\n<p>11(2) = 01(2) - 11(2)을 음수로 표현한 값 구하는 <Mark>쉬운</Mark> 방법</p>\n</li>\n<li>\n<p>모든 0과 1을 뒤집고 1 더한 값 - 11(2) → 01(2)</p>\n<blockquote>\n<p>“ -1011(2)를 표현하기 위한 0101(2)과 십진수 5를 표현하기 위한 0101(2)은 유사 같다. 어떻게 구분해야 할까?”</p>\n</blockquote>\n<blockquote>\n<p>→ CPU 내부에 <Mark>플러그(flug)</Mark> 레지스터로 구분</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"십육진법\" style=\"position:relative;\"><a href=\"#%EC%8B%AD%EC%9C%A1%EC%A7%84%EB%B2%95\" aria-label=\"십육진법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>십육진법</h4>\n<ol>\n<li>십육진법(hexadecimal)</li>\n</ol>\n<ul>\n<li>이진법으로는 숫자가 너무 길어지는 단점이 존재</li>\n<li>컴퓨터의 데이터를 표현할 떄 16진법도 많이 사용\n<ul>\n<li>15를 넘어가는 시점에 자리올림</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>십육진수 15표기</li>\n</ol>\n<ul>\n<li>15(16) - 수학적 표기 방식</li>\n<li>0x15 - 코드상 표기 방식\n<img width=\"677\" alt=\"image\" src=\"https://github.com/boost-library/yong-study/assets/74396128/bd16e350-dfe2-4098-84bd-a0c07aa90f82\"></li>\n</ul>\n<h4 id=\"십육진법과-이진법의-관계\" style=\"position:relative;\"><a href=\"#%EC%8B%AD%EC%9C%A1%EC%A7%84%EB%B2%95%EA%B3%BC-%EC%9D%B4%EC%A7%84%EB%B2%95%EC%9D%98-%EA%B4%80%EA%B3%84\" aria-label=\"십육진법과 이진법의 관계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>십육진법과 이진법의 관계</h4>\n<p>16진수와 2진수간 변환이 쉬우므로 많이 사용된다.</p>\n<p>2진수 → 16진수\n<img width=\"677\" alt=\"image\" src=\"https://github.com/boost-library/yong-study/assets/74396128/c1c4260f-90d5-40d6-b181-93b2a1a21b9d\">\n16진수 → 2진수\n<img src=\"https://github.com/boost-library/yong-study/assets/74396128/1326355a-985c-4181-b03e-bbb5817d388a\" alt=\"image\"></p>\n<h2 id=\"0과-1로-문자를-표현하는-방법\" style=\"position:relative;\"><a href=\"#0%EA%B3%BC-1%EB%A1%9C-%EB%AC%B8%EC%9E%90%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"0과 1로 문자를 표현하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0과 1로 문자를 표현하는 방법</h2>\n<h4 id=\"문자-집합과-인코딩\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90-%EC%A7%91%ED%95%A9%EA%B3%BC-%EC%9D%B8%EC%BD%94%EB%94%A9\" aria-label=\"문자 집합과 인코딩 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자 집합과 인코딩</h4>\n<ol>\n<li>인코딩(encoding)</li>\n</ol>\n<ul>\n<li>코드화하는 과정</li>\n<li>문자를 0과 1로 이루어진 문자 코드로 변환하는 과정</li>\n</ul>\n<ol start=\"2\">\n<li>디코딩(decoding)</li>\n</ol>\n<ul>\n<li>코드를 해석하는 과정</li>\n<li>0과 1로 표현된 문자 코드로 문자로 변환하는 과정</li>\n</ul>\n<ol start=\"3\">\n<li>문자 집합(character set)</li>\n</ol>\n<ul>\n<li>컴퓨터가 이해할 수 있는 문자의 모음</li>\n<li>아스키 코드\n<ul>\n<li>초창기 문자 집합 중 하나</li>\n<li>알파벳, 아라비아 숫자, 일부 특수 문자 및 제어 문자</li>\n<li>7비트로 하나의 문자 표현(2^7= 128개의 문자 표현)\n<ul>\n<li>8비트 중 1비트는 오류 검출을 위해 사용되는 패리티 비트(parity bit)</li>\n<li>A는 65로 인코딩, a는 97로 인코딩</li>\n<li>c.f.) 65, 97 → 코드 포인트(code point)라고 하기도 == 문자에 부여된 값</li>\n</ul>\n</li>\n<li>간단한 인코딩</li>\n<li>But 한글을 포함한 다른 언어 문자, 다양한 특수 문자 표현 불가\n<ul>\n<li>아스키 코드는 7비트로 하나의 문자를 표현하기에 128개보다 많은 문자를 표현할 수 없음</li>\n<li>8비트 확장 아스키(expected ASCII)의 등장, 여전히 부족\n⇒ <Mark>언어별 인코딩 방식의 등장</Mark></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol start=\"4\">\n<li>한글 인코딩: 완성형 vs 조합형 인코딩</li>\n</ol>\n<ul>\n<li>한글을 위한 인코딩이 필요\n<ul>\n<li>알파벳을 이어 쓰면 단어가 되는 영어</li>\n<li>초성, 중성, 종성의 조합으로 이루어진 한글</li>\n<li>완성형 인코딩 방식과 조합형 인코딩 방식이 존재\n<img width=\"648\" alt=\"image\" src=\"https://github.com/boost-library/yong-study/assets/74396128/925b4227-9e47-4039-9bab-880daccc8aa3\"></li>\n</ul>\n</li>\n<li>EUC-KR\n<ul>\n<li>KS X 1001 KS X 1003 문자집합 기반의 한글 인코딩 방식</li>\n<li>완성형 인코딩</li>\n<li>글자 하나 하나에 2바이트 크기의 코드 부여 - 2바이트 == 16비트 == 4자리 16진수로 표현\n<img width=\"619\" alt=\"image\" src=\"https://github.com/boost-library/yong-study/assets/74396128/699029a1-2580-4a9e-ac0d-dfddd1ad634b\"></li>\n<li>2300여개의 한글 표현 가능</li>\n<li>여전히 모든 한글을 표현하기에는 부족한 수</li>\n<li>쀏, 뙠, 훽같은 한글은 표현 불가능</li>\n</ul>\n</li>\n</ul>\n<p>다국어를 지원하는 프로그램을 개발하는 경우 언어별 인코딩 방식을 모두 이해해야하는 번거로움</p>\n<p>→ <Mark>유니코드 문자 집합과 utf-8의 등장</p>\n<h4 id=\"유니코드-문자-집합과-utf-8\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EB%8B%88%EC%BD%94%EB%93%9C-%EB%AC%B8%EC%9E%90-%EC%A7%91%ED%95%A9%EA%B3%BC-utf-8\" aria-label=\"유니코드 문자 집합과 utf 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유니코드 문자 집합과 utf-8</h4>\n<ol>\n<li>유니코드</li>\n</ol>\n<ul>\n<li>통일된 문자 집합</li>\n<li>한글, 영어, 화살표와 같은 특수 문자, 심지어 이모티콘까지</li>\n<li>현대 문자 표현에 있어 매우 중요한 위치</li>\n</ul>\n<ol start=\"2\">\n<li>유니코드의 인코딩 방식</li>\n</ol>\n<ul>\n<li>\n<p>utf-8, utf-16, utf-32\n<img width=\"261\" alt=\"image\" src=\"https://github.com/boost-library/yong-study/assets/74396128/6e98311c-aba3-4bca-afbc-2dd25c587a93\">\n고유한 16진수 값: U+219B(=유니코드 코드 포인트)</p>\n<p>코드 포인트 그대로 문자 인코딩 값으로 삼지 않고 다양한 인코딩 방식으로(utf-8, 16, …) 0과 1로 만든다.</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>utf-8 인코딩</li>\n</ol>\n<ul>\n<li>UTF(Unicode Transformation Format) == 유니코드 인코딩 방법</li>\n<li>가변 길이 인코딩: 인코딩 결과가 1바이트~4바이트</li>\n<li>인코딩 결과가 몇 바이트가 될지는 유니코드에 부여된 값(<Mark>유니코드 코드 포인트</Mark>)에 따라 다름\n<img width=\"705\" alt=\"image\" src=\"https://github.com/boost-library/yong-study/assets/74396128/3d746a61-4e43-4b3f-b7d7-963007aa7479\">\n<img width=\"702\" alt=\"image\" src=\"https://github.com/boost-library/yong-study/assets/74396128/125a4af8-837d-45cd-a3f0-e512f7c46441\"></li>\n</ul>\n<p>⇒ utf-8은 유니코드 문자를 인코딩하는 방법, utf-8로 인코딩한 값은 <Mark>가변길이 인코딩</Mark>이기 떄문에 1바이트~4바이트가 될 수 있다. 어떤 식으로 인코딩이 진행되는지는 <Mark>유니코드 문자에 부여된 코드 포인트의 범위</Mark>에 따라서 코드 포인트를 형식에 맞게 넣어주면 인코딩 된 결과.</p>","fields":{"slug":"/posts/2023-08-24---0과1로 문자,숫자를 표현하는 방법//posts/0과1로 문자,숫자를 표현하는 방법","tagSlugs":["/tag/cs/"]},"frontmatter":{"date":"2023-08-24T20:40:32.169Z","description":"컴퓨터 구조의 0과1로 문자,숫자를 표현하는 방법에 대해서 배웁니다.","tags":["CS"],"title":"0과1로 문자,숫자를 표현하는 방법","socialImage":null}}},"pageContext":{"slug":"/posts/2023-08-24---0과1로 문자,숫자를 표현하는 방법//posts/0과1로 문자,숫자를 표현하는 방법"}},"staticQueryHashes":["251939775","2764776372","401334301"]}