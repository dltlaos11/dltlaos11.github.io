<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog by Yong Jun]]></title><description><![CDATA[Blog by Yong Jun]]></description><link>http://github.com/dylang/node-rss</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 24 Aug 2023 14:19:43 GMT</lastBuildDate><item><title><![CDATA[명령어의 구조와 주소 지정 방식]]></title><description><![CDATA[컴퓨터 구조의 명령어의 구조와 주소 지정 방식에 대해서 배웁니다.]]></description><link>https://dltlaos11.github.io//posts/명령어의 구조와 주소 지정 방식</link><guid isPermaLink="false">https://dltlaos11.github.io//posts/명령어의 구조와 주소 지정 방식</guid><pubDate>Thu, 24 Aug 2023 23:40:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%97%B0%EC%82%B0-%EC%BD%94%EB%93%9C&quot;&gt;연산 코드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%98%A4%ED%8D%BC%EB%9E%9C%EB%93%9C&quot;&gt;오퍼랜드&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A3%BC%EC%86%8C-%EC%A7%80%EC%A0%95-%EB%B0%A9%EC%8B%9D&quot;&gt;명령어 주소 지정 방식&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img width=&quot;655&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/97930271-9ee6-4c31-a3b8-678ce9a78ade&quot;&gt;
&lt;p&gt;명령어는 연산 코드와 오퍼랜드로 구성된다.&lt;/p&gt;
&lt;h2 id=&quot;연산-코드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%B0%EC%82%B0-%EC%BD%94%EB%93%9C&quot; aria-label=&quot;연산 코드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;연산 코드&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;연산 코드: 수행할 연산&lt;/p&gt;
&lt;p&gt;대표적인 연산 코드의 종류&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;데이터 전송
CPU마다 연산코드의 종류가 다르므로 유형을 파악
&lt;ul&gt;
&lt;li&gt;MOVE: 데이터 옮겨라(레지스터에서 다른 레지스터의 데이터 이동)&lt;/li&gt;
&lt;li&gt;STORE: 메모리에 저장&lt;/li&gt;
&lt;li&gt;LOAD(FETCH): 메모리에서 CPU로 데이터를 가져와라&lt;/li&gt;
&lt;li&gt;PUSH: 스택에 데이터를 저장하라&lt;/li&gt;
&lt;li&gt;POP: 스택의 최상단 데이터를 가져와라&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;산술/논리 연산
&lt;img width=&quot;630&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/8ed6ff54-8c07-4522-b337-171ad8358c75&quot;&gt;&lt;/li&gt;
&lt;li&gt;제어 흐름 변경
&lt;img width=&quot;626&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/a6f47f37-faa7-4364-a373-c067a3e5e9b9&quot;&gt;&lt;/li&gt;
&lt;li&gt;입출력 제어
&lt;img width=&quot;629&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/37450662-4e37-4e11-bd4f-67a253bb066a&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;c.f.) 연산 코드의 종류 &amp;#x26; 생김새는 &lt;Mark&gt;CPU&lt;/Mark&gt; 마다 다르다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;오퍼랜드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%A4%ED%8D%BC%EB%9E%9C%EB%93%9C&quot; aria-label=&quot;오퍼랜드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;오퍼랜드&lt;/h2&gt;
&lt;p&gt;오퍼랜드: 연산에 사용될 데이터 혹은 &lt;Mark&gt;연산에 사용될 데이터가 저장된 위치&lt;/Mark&gt;(주로 저장되는 정보), 오퍼랜드 필드를 &lt;Mark&gt;주소 필드(메모리 주소, 레지스터)&lt;/Mark&gt;라고 하기도 한다.&lt;/p&gt;
&lt;p&gt;어셈블리어나 기계어는 저급언어들은 &lt;Mark&gt;명령어&lt;/Mark&gt;로 이루어져 있다.&lt;/p&gt;
&lt;img width=&quot;656&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/9777e2f1-87ed-4dff-9d51-aa5a1a43bf6c&quot;&gt;
&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/c52148c4-bb51-4f96-b5b6-6e86652de234&quot;&gt;
&lt;p&gt;붉은색 글자가 연산코드이고, 우측에 있는 글자가 오퍼랜드이다. 오퍼랜드가 없는 경우, 1개 이상인 경우도 존재&lt;/p&gt;
&lt;h4 id=&quot;명령어-주소-지정-방식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A3%BC%EC%86%8C-%EC%A7%80%EC%A0%95-%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;명령어 주소 지정 방식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;명령어 주소 지정 방식&lt;/h4&gt;
&lt;h5 id=&quot;왜-굳이-오퍼랜드에-저장된-위치를-사용할까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%99%9C-%EA%B5%B3%EC%9D%B4-%EC%98%A4%ED%8D%BC%EB%9E%9C%EB%93%9C%EC%97%90-%EC%A0%80%EC%9E%A5%EB%90%9C-%EC%9C%84%EC%B9%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C&quot; aria-label=&quot;왜 굳이 오퍼랜드에 저장된 위치를 사용할까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왜 굳이 오퍼랜드에 저장된 위치를 사용할까?&lt;/h5&gt;
&lt;p&gt;=&gt; 명령어 내에서 표현할 수 있는 데이터의 크기가 제한되기 때문
&lt;img width=&quot;657&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/96d41a2c-ea11-4de1-b76a-01fb548863b3&quot;&gt;
&lt;img width=&quot;657&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/96439245-45ab-4236-a676-ce62d4af6513&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;유효 주소(effective address)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;연산에 사용할 데이터가 저장된 위치&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;명령어 주소 지정 방식(addressing modes)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;연산에 사용할 데이터가 저장된 위치를 찾는 방법&lt;/li&gt;
&lt;li&gt;유효 주소를 찾는 방법&lt;/li&gt;
&lt;li&gt;다양한 명령어 주소 지정 방식들 존재
&lt;ul&gt;
&lt;li&gt;즉지 주소 지정 방식(immediate addressing mode)
&lt;ul&gt;
&lt;li&gt;연산에 사용할 데이터를 오퍼랜드 필드에 직접 명시&lt;/li&gt;
&lt;li&gt;가장 간단한 형태의 주소 지정 방식&lt;/li&gt;
&lt;li&gt;연산에 사용할 데이터의 크기가 작아질 수 있지만, 빠름
&lt;img width=&quot;599&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/a5770823-f552-4040-9e56-d615eb2fb5b6&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;직접 주소 지정 방식(direct addressing mode)
&lt;ul&gt;
&lt;li&gt;오퍼랜드 필드에 유효 주소 직접적으로 명시&lt;/li&gt;
&lt;li&gt;유효 주소를 표현할 수 있는 크기가 연산 코드만큼 줄어듦
&lt;img width=&quot;601&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/0e023bcd-a385-483a-bc9f-3b37c74bb605&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;간접 주소 지정 방식(indirect addressing mode)
&lt;ul&gt;
&lt;li&gt;오퍼랜드 필드에 유효 주소의 주소를 명시&lt;/li&gt;
&lt;li&gt;앞선 주소 지정 방식들에 비해 속도가 느림
&lt;img width=&quot;602&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/64f0631e-b2e0-4574-8dd0-7a38fd7635ed&quot;&gt;
&lt;Mark&gt;c.f.) CPU가 메모리를 찾아가는 과정은 속도가 느리다, 메모리 접근을 최소화 해야함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;레지스터 주소 지정 방식(register addressing mode)
&lt;ul&gt;
&lt;li&gt;연산에 사용할 데이터가 저장된 레지스터 명시&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;CPU가 메모리에 접근하는 속도보다 레지스터에 접근하는 것이 빠름🔥 - 레지스터는 CPU안에 존재
&lt;img width=&quot;601&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/61bb3663-00a5-439d-b020-150dda7629ce&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;레지스터 간접 주소 지정 방식(register indirect addressing mode)
&lt;ul&gt;
&lt;li&gt;연산에 사용할 데이터를 메모리에 저장&lt;/li&gt;
&lt;li&gt;그 주소를 저장한 레지스터를 오퍼랜드 필드에 명시
&lt;img width=&quot;597&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/12bdfefa-dfbb-403f-a610-c494d1e1f434&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[JS 인터프리터 언어, 컴파일 언어🤔]]></title><description><![CDATA[자바스크립트 코드 실행 동작 원리: 엔진, 가상머신, 인터프리터, AST 기초 등에 대해서 배웁니다.]]></description><link>https://dltlaos11.github.io//posts/JS 인터프리터 언어, 컴파일 언어</link><guid isPermaLink="false">https://dltlaos11.github.io//posts/JS 인터프리터 언어, 컴파일 언어</guid><pubDate>Thu, 24 Aug 2023 21:40:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B3%A0%EA%B8%89%EC%96%B8%EC%96%B4%EC%99%80-%EC%A0%80%EA%B8%89%EC%96%B8%EC%96%B4&quot;&gt;고급언어와 저급언어&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B3%A0%EA%B8%89%EC%96%B8%EC%96%B4&quot;&gt;고급언어&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B0%94%EC%9D%B4%ED%8A%B8%EC%BD%94%EB%93%9C&quot;&gt;바이트코드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A0%80%EA%B8%89%EC%96%B8%EC%96%B4&quot;&gt;저급언어&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B5%AC%EB%8F%99-%EC%9B%90%EB%A6%AC&quot;&gt;자바스크립트 구동 원리&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%97%94%EC%A7%84&quot;&gt;자바스크립트 엔진&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EC%9D%98-%EB%93%B1%EC%9E%A5&quot;&gt;자바스크립트 컴파일의 등장&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%BB%B4%ED%8C%8C%EC%9D%BC-%EC%96%B8%EC%96%B4%EC%9D%98-%EC%84%B1%EB%8A%A5%EC%9D%B4-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0-%EC%96%B8%EC%96%B4%EC%9D%98-%EC%84%B1%EB%8A%A5%EB%B3%B4%EB%8B%A4-%EC%A2%8B%EC%9D%84%EA%B9%8C&quot;&gt;그렇다면 컴파일 언어의 성능이 인터프리터 언어의 성능보다 좋을까?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EC%BB%B4%ED%8C%8C%EC%9D%BC&quot;&gt;자바스크립트의 컴파일&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9E%98%EC%84%9C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0-%EC%96%B8%EC%96%B4%EC%9D%BC%EA%B9%8C&quot;&gt;그래서 자바스크립트는 인터프리터 언어일까?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;고급언어와-저급언어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B3%A0%EA%B8%89%EC%96%B8%EC%96%B4%EC%99%80-%EC%A0%80%EA%B8%89%EC%96%B8%EC%96%B4&quot; aria-label=&quot;고급언어와 저급언어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;고급언어와 저급언어&lt;/h2&gt;
&lt;h4 id=&quot;고급언어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B3%A0%EA%B8%89%EC%96%B8%EC%96%B4&quot; aria-label=&quot;고급언어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;고급언어&lt;/h4&gt;
&lt;img width=&quot;702&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/chan-study/assets/74396128/cccc8092-8864-4af2-9ed3-c793c9298db3&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;고급언어: 개발자가 이해하기 쉽게 만든언어
&lt;img width=&quot;680&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/chan-study/assets/74396128/0a92504f-f9ef-4a1d-8947-5d9ae5a4f462&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴파일
&lt;img width=&quot;455&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/chan-study/assets/74396128/0b7ef389-5f0c-422d-8f4d-215ef6c7b04a&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 전처리기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;C언어로 예를 들자면, #으로 시작되는 소스코드를 처리하는 단계.&lt;/p&gt;
&lt;p&gt;stdio.h와 같은 &lt;strong&gt;헤더 파일&lt;/strong&gt;을 불러와 코드 상으로 필요한 내용으로 채워주고 define으로 먼저 정의된 상수를 symbol table에 저장하는 등 &lt;strong&gt;매크로를 확장&lt;/strong&gt;한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 컴파일&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;High Level Language인 소스코드를 기계언어에 가까운 Low Level Launguage인 &lt;strong&gt;어셈블리 언어로 변환&lt;/strong&gt;한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 어셈블러&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;결국 컴퓨팅하는 주체는 CPU이므로 소스코드를 아무리 잘 작성했더라도 CPU 입장에서도 그게 잘 작성된 코드인지 들어봐야한다. 어셈블리어는 인간이 이해할 수 있는 기계 언어에 가장 가까운 언어로, 컴퓨터가 연산하는 블랙박스 안을 들여다볼 수 있는 창구의 역할을 한다. 따라서 컴퓨터의 동작 방식을 이해하고 더 가까이서 문제를 해결하기 위해 어셈블리어로 중간 변환 과정을 거친다.&lt;/p&gt;
&lt;p&gt;실제로 어셈블리 언어에는 집합, 배열, 객체와 같은 개념이 없고 모두 정수(int)로 변환된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 링커&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;만약 프로그램이 여러개의 파일로 이루어져있다면 하나의 오브젝트 파일로 이어주고 라이브러리들을 연결하는 링크 단계가 필요하다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;컴파일 언어
&lt;img width=&quot;651&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/chan-study/assets/74396128/a57f0f32-469d-47c5-aef1-707dc5e4a0c6&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;컴파일 언어로 작성된 소스 코드는 컴파일러에 의해 저급 언어(어셈블리어)로 변환되고(&lt;Mark&gt;컴파일&lt;/Mark&gt;), 컴파일 결과로 저급 언어인 목적(원시) 코드가 생성&lt;/li&gt;
&lt;li&gt;컴파일러가 소스코드 &lt;Mark&gt;전체를 훑어보면서&lt;/Mark&gt;(한줄씩❌) 오류는 없는지, 사용되지 않는 변수, 최적화 여부 등을 따져본 뒤 목적 코드로 컴파일&lt;/li&gt;
&lt;li&gt;소스 코드 컴파일 중 오류가 발생하면 소스 코드 전체가 실행되지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인터프리트 언어&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인터프리터에 의해 &lt;Mark&gt;한 줄씩&lt;/Mark&gt; 실행&lt;/li&gt;
&lt;li&gt;소스 코드 전체가 저급 언어로 변환되기까지 기다릴 필요 ❌&lt;/li&gt;
&lt;li&gt;소스 코드 인터프리트 중 오류가 발생하면 오류 발생 전까지의 코드는 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;바이트코드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%94%EC%9D%B4%ED%8A%B8%EC%BD%94%EB%93%9C&quot; aria-label=&quot;바이트코드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;바이트코드&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;바이트코드(Bytecode)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사람이 작성한 고급언어(Javascript등)를 가상머신이 이해할 수 있도록 변환한 코드.&lt;/li&gt;
&lt;li&gt;가상머신은 바이트코드를 다양한 종류의 CPU에 맞게 기계어로 컴파일 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Add r0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; LdaSmi &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;저급언어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%80%EA%B8%89%EC%96%B8%EC%96%B4&quot; aria-label=&quot;저급언어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;저급언어&lt;/h4&gt;
&lt;p&gt;저급언어: 컴퓨터가 이해하고 실행하는 언어&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기계어: 0과 1로 이루어진 명령어로 구성된 저급언어
&lt;img width=&quot;590&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/chan-study/assets/74396128/46b53e0d-8f56-47de-a08b-f23ea260a863&quot;&gt;&lt;/li&gt;
&lt;li&gt;어셈블리어: 0과 1로 이루어진 기계어를 읽기 편한 형태로 번역한 저급 언어(기계어보다 한단계 위의 저급언어)
&lt;img width=&quot;678&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/chan-study/assets/74396128/ae576538-3f7f-462a-8bef-3ef083ba1172&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ 자바는 컴파일 언어와 인터프리터 언어의 경계가 모호. 양분되는 개념이라 생각하지 말고 컴파일 방식과 인터프리터 방식이 있는데 고급언어가 저급언로 변환되는 대표적인 방식 중 하나라는 개념으로 이해하는 것이 좋다.&lt;/p&gt;
&lt;h2 id=&quot;자바스크립트-구동-원리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B5%AC%EB%8F%99-%EC%9B%90%EB%A6%AC&quot; aria-label=&quot;자바스크립트 구동 원리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자바스크립트 구동 원리&lt;/h2&gt;
&lt;p&gt;자바스크립트 뿐만 아니라 모든 고급언어들은 컴퓨터에서 구동되기 위해서 기본적으로 컴퓨터가 이해가능한 기계어로 변환되어질 필요가 있다.
&lt;img width=&quot;683&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/674408b1-3b84-4776-ac17-e10effadcb04&quot;&gt;
자바스크립트는 컴퓨터에게 전달되기전에 바이트 코드로 변환되고, 이를 받아 가상머신에 의해 기계어로 변환된다. 이러한 일련의 변환 과정은 아래와 같이 진행된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1) 바이트 코드로의 변환&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;Mark&gt;자바스크립트 엔진&lt;/Mark&gt;에 의해 바이트코드로 변환된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2) 기계어로 변환&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CPU 종류에 따라(x86-64(&lt;Mark&gt;cpu종류&lt;/Mark&gt;) gcc 12.2(&lt;Mark&gt;컴파일러종류&lt;/Mark&gt;)) 기계어를 다르게 해석하기에 &lt;Mark&gt;가상 머신&lt;/Mark&gt;은 최적화된 기계어를 제작해낸다. 이 가상머신 덕분에 개발자는 따로 CPU별로 최적화된 기계어를 만들어낼 필요는 없다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3) CPU 코드 실행&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;기계어를 실행하여 데이터 저장 및 연산 작업을 진행한다.&lt;/p&gt;
&lt;h2 id=&quot;자바스크립트-엔진&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%97%94%EC%A7%84&quot; aria-label=&quot;자바스크립트 엔진 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자바스크립트 엔진&lt;/h2&gt;
&lt;p&gt;JS가 자바스크립트 엔진에 의해 어떻게 바이트 코드로 변환되는지 알아보자&lt;/p&gt;
&lt;p&gt;이는 엔진 내 인터프리터가 진행한다. 인터프리터에게 전달되기 전에 &lt;Mark&gt;Tokenizer&lt;/Mark&gt;, &lt;Mark&gt;Parser&lt;/Mark&gt;를 거쳐 &lt;Mark&gt;AST&lt;/Mark&gt;가 되는 일련의 과정이 필요하다.
&lt;img width=&quot;680&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/ba953273-db5c-4e00-af5c-5db7ac722cbe&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Tokenizing&lt;/code&gt; : 주어진 소스코드를 의미있는 단위로 나누는 과정이다. 이렇게 나누어진 것을 Token이라고도 한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Parser&lt;/code&gt; : &lt;code class=&quot;language-text&quot;&gt;Tokenizer&lt;/code&gt; 로부터 생성된 토큰들의 배열을 바탕으로 이를 자바스크립트 문법에 알맞은 방식으로 &lt;code class=&quot;language-text&quot;&gt;AST(Abstract Syntax Tree)&lt;/code&gt; 로 변화 시킨다.&lt;/li&gt;
&lt;li&gt;이렇게 생성된 &lt;code class=&quot;language-text&quot;&gt;AST&lt;/code&gt; 는 인터프리터를 거쳐 기계가 알아볼 수 있는 바이트 코드롤 변환되게 되는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;자바스크립트-컴파일의-등장&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EC%9D%98-%EB%93%B1%EC%9E%A5&quot; aria-label=&quot;자바스크립트 컴파일의 등장 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자바스크립트 컴파일의 등장&lt;/h2&gt;
&lt;p&gt;이러한 자바스크립트는 인터프리터 언어로서 기능을 해왔지만, 점차 웹에서도 다양한 요구사항들이 추가되면서 더 많은 기능들을 갖추어야 했고 이는 자바스크립트가 점차 성능상 무거워지는 계기가 되었다. 한편, 2009년 당시 구글은 웹에서 이용가능한 지도인 구글맵스를 개발하려고 있었는데 지도 어플리케이션은 사용자 상호작용이 많이 필요한 만큼 성능상 개선이 필요했고 이를 개선하고자 내놓은 것이 바로 &lt;Mark&gt;Chrome V8&lt;/Mark&gt; 엔진이다. 이를 통해 자바스크립트 언어에서도 컴파일을 진행하게 된 계기가 되었다.&lt;/p&gt;
&lt;h2 id=&quot;그렇다면-컴파일-언어의-성능이-인터프리터-언어의-성능보다-좋을까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%BB%B4%ED%8C%8C%EC%9D%BC-%EC%96%B8%EC%96%B4%EC%9D%98-%EC%84%B1%EB%8A%A5%EC%9D%B4-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0-%EC%96%B8%EC%96%B4%EC%9D%98-%EC%84%B1%EB%8A%A5%EB%B3%B4%EB%8B%A4-%EC%A2%8B%EC%9D%84%EA%B9%8C&quot; aria-label=&quot;그렇다면 컴파일 언어의 성능이 인터프리터 언어의 성능보다 좋을까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그렇다면 컴파일 언어의 성능이 인터프리터 언어의 성능보다 좋을까&lt;/h2&gt;
&lt;p&gt;컴파일 언어와 인터프리터 언의 가장 큰 차이점은 바로 실행전 미리 기계어로 바꾸어 놓는다는 점이다. 인터프리터처럼 고급언어를 기계어로 번역하는 것이 아니라 미리 변경해놓기에 빠르다.&lt;/p&gt;
&lt;h2 id=&quot;자바스크립트의-컴파일&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EC%BB%B4%ED%8C%8C%EC%9D%BC&quot; aria-label=&quot;자바스크립트의 컴파일 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자바스크립트의 컴파일&lt;/h2&gt;
&lt;p&gt;V8 엔진에 의해서 어떻게 자바스크립트도 컴파일과정을 알아보자
&lt;img width=&quot;676&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/16db5fa2-023b-485f-a299-fbd57d910b91&quot;&gt;
&lt;img width=&quot;680&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/051cc73b-d208-4856-ad52-13e65a50a7f7&quot;&gt;&lt;/p&gt;
&lt;p&gt;위 그림에서 자바스크립트가 Parser, AST, Interpreter를 거쳐 ByteCode(중간언어)로 변모하는 것은 V8 엔진이 등장하기 전까지의 JS의 모습이다. 이에 추가적으로 &lt;code class=&quot;language-text&quot;&gt;Profiler&lt;/code&gt; 라는게 등장한다. 이 &lt;code class=&quot;language-text&quot;&gt;Profiler&lt;/code&gt; 는 인터프리터를 관찰하며 실행되는 코드를 계속해서 모니터링 한다. 모니터링하는 과정에 코드내에 반복 실행되는 것이 있다면 이를 &lt;code class=&quot;language-text&quot;&gt;JIT(Just-In-Time)&lt;/code&gt; 컴파일러에게 넘겨 실시간으로 컴파일 하도록 한다. 이를 통해 최적화된 바이트 코드를 생성해낸다.&lt;/p&gt;
&lt;p&gt;이처럼 필요할때 마다 런타임 내에서 빠르게 컴파일 하는 컴파일러를 &lt;code class=&quot;language-text&quot;&gt;JIT(Just-In-Time)&lt;/code&gt; 컴파일러라고 부른다. 또한 필요할 경우 &lt;code class=&quot;language-text&quot;&gt;Deoptimize&lt;/code&gt; 과정을 진행하는데 프로파일러의 판단(이 코드 컴파일하는게 낫겠네!)이 틀렸을 수도 있기 때문에 컴파일하는 비용을 다시 줄이기 위함이다.&lt;/p&gt;
&lt;h2 id=&quot;그래서-자바스크립트는-인터프리터-언어일까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9E%98%EC%84%9C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0-%EC%96%B8%EC%96%B4%EC%9D%BC%EA%B9%8C&quot; aria-label=&quot;그래서 자바스크립트는 인터프리터 언어일까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그래서 자바스크립트는 인터프리터 언어일까&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;때에 따라 다르다. 현 시점에서의 자바스크립트는 실질적으로 컴파일이 되지만 편의 및 문맥상 인터프리터 언어로 분류된다. 모던 자바스크립트 컴파일러는 거의 런타임 내에서 빠르게 컴파일(&lt;code class=&quot;language-text&quot;&gt;JITC&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Just-In-Time Compilation&lt;/code&gt;)을 수행한다.&lt;/li&gt;
&lt;li&gt;기본적으로는 &lt;code class=&quot;language-text&quot;&gt;Interpreter&lt;/code&gt; 언어로서의 성질을 가지지만, 성능상의 최적화를 위해 &lt;code class=&quot;language-text&quot;&gt;Compiler&lt;/code&gt; 언어의 특성도 같이 가진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;참고자료&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C&quot; aria-label=&quot;참고자료 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;참고자료&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://velog.io/@seungchan__y/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-Compiler-Interpreter-%EC%96%B8%EC%96%B4%EB%8B%A4#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B5%AC%EB%8F%99%EC%9B%90%EB%A6%AC&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;자바스크립트는 Compiler / Interpreter 언어다?&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://devlog-of-yein.tistory.com/m/6&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;컴파일이란 무엇이며, 자바스크립트는 인터프리터 언어인가?&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[0과1로 문자,숫자를 표현하는 방법]]></title><description><![CDATA[컴퓨터 구조의 0과1로 문자,숫자를 표현하는 방법에 대해서 배웁니다.]]></description><link>https://dltlaos11.github.io//posts/0과1로 문자,숫자를 표현하는 방법</link><guid isPermaLink="false">https://dltlaos11.github.io//posts/0과1로 문자,숫자를 표현하는 방법</guid><pubDate>Thu, 24 Aug 2023 20:40:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#0%EA%B3%BC-1%EB%A1%9C-%EC%88%AB%EC%9E%90%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot;&gt;0과 1로 숫자를 표현하는 방법&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A0%95%EB%B3%B4-%EB%8B%A8%EC%9C%84&quot;&gt;정보 단위&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9D%B4%EC%A7%84%EB%B2%95&quot;&gt;이진법: 0과 1로 숫자 표현하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8B%AD%EC%9C%A1%EC%A7%84%EB%B2%95&quot;&gt;십육진법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8B%AD%EC%9C%A1%EC%A7%84%EB%B2%95%EA%B3%BC-%EC%9D%B4%EC%A7%84%EB%B2%95%EC%9D%98-%EA%B4%80%EA%B3%84&quot;&gt;십육진법과 이진법의 관계&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#0%EA%B3%BC-1%EB%A1%9C-%EB%AC%B8%EC%9E%90%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot;&gt;0과 1로 문자를 표현하는 방법&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AC%B8%EC%9E%90-%EC%A7%91%ED%95%A9%EA%B3%BC-%EC%9D%B8%EC%BD%94%EB%94%A9&quot;&gt;문자 집합과 인코딩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9C%A0%EB%8B%88%EC%BD%94%EB%93%9C-%EB%AC%B8%EC%9E%90-%EC%A7%91%ED%95%A9%EA%B3%BC-utf-8&quot;&gt;유니코드 문자 집합과 utf-8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;0과-1로-숫자를-표현하는-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#0%EA%B3%BC-1%EB%A1%9C-%EC%88%AB%EC%9E%90%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;0과 1로 숫자를 표현하는 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;0과 1로 숫자를 표현하는 방법&lt;/h2&gt;
&lt;h4 id=&quot;정보-단위&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EB%B3%B4-%EB%8B%A8%EC%9C%84&quot; aria-label=&quot;정보 단위 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정보 단위&lt;/h4&gt;
&lt;p&gt;비트(bit): 0과 1을 표현하는 가장 작은 정보 단위&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;n비트로 2^n가지의 정보 표현 가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프로그램은 수 많은 비트로 이루어져 있음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비트보다 더 큰 단위를 주로 사용&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;바이트, 킬로바이트, 메가바이트, 기가바이트. 테라바이트 …
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/d95e95af-ae06-45ed-9a78-eff7181c92d0&quot; alt=&quot;image&quot;&gt;
c.f.) 이전 단위를 1024개씩 묶은 단위는 kiB, MiB, GiB, …&lt;/p&gt;
&lt;p&gt;최근에는 정보 단위가 커지면서 1000개씩 묶은 단위와 1024개씩 묶은 단위를 구분해서 사용&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;워드word&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9B%8C%EB%93%9Cword&quot; aria-label=&quot;워드word permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;워드(word)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;CPU가 한 번에 처리할 수 있는 정보의 크기 단위(ex_CPU가 한번에 32bit처리 → 1word = 32bit)&lt;/li&gt;
&lt;li&gt;하프 워드(half word): 워드의 절반 크기&lt;/li&gt;
&lt;li&gt;풀 워드(full word): 워드 크기&lt;/li&gt;
&lt;li&gt;더블 워드(double word): 워드의 두 배 크기&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;이진법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EC%A7%84%EB%B2%95&quot; aria-label=&quot;이진법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이진법&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;이진법(binary)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;0과 1로 수를 표현하는 방법&lt;/li&gt;
&lt;li&gt;숫자가 1을 넘어가는 시점에 자리올림&lt;/li&gt;
&lt;li&gt;우리가 일상적으로 사용하는 진법은 숫자가 9를 넘어갈 떄 자리올림하는 십진법&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;이진수 8 표기&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;1000 &lt;mark&gt;(2)&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;0b&lt;/Mark&gt;1000&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;0과 1로 음수 표현하기: 2의 보수(현대 컴퓨터에서 가장 많이 사용되는 방법)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;어떤 수를 그보다 큰 2^n에서 뺸 값 - 11(2)을 음수로 표현한 값 구하는 &lt;Mark&gt;어려운&lt;/Mark&gt; 방법&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;11(2)보다 큰 2^n = 100(2) - 100(2)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;11(2) = 01(2) - 11(2)을 음수로 표현한 값 구하는 &lt;Mark&gt;쉬운&lt;/Mark&gt; 방법&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;모든 0과 1을 뒤집고 1 더한 값 - 11(2) → 01(2)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“ -1011(2)를 표현하기 위한 0101(2)과 십진수 5를 표현하기 위한 0101(2)은 유사 같다. 어떻게 구분해야 할까?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;→ CPU 내부에 &lt;Mark&gt;플러그(flug)&lt;/Mark&gt; 레지스터로 구분&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;십육진법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%AD%EC%9C%A1%EC%A7%84%EB%B2%95&quot; aria-label=&quot;십육진법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;십육진법&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;십육진법(hexadecimal)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;이진법으로는 숫자가 너무 길어지는 단점이 존재&lt;/li&gt;
&lt;li&gt;컴퓨터의 데이터를 표현할 떄 16진법도 많이 사용
&lt;ul&gt;
&lt;li&gt;15를 넘어가는 시점에 자리올림&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;십육진수 15표기&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;15(16) - 수학적 표기 방식&lt;/li&gt;
&lt;li&gt;0x15 - 코드상 표기 방식
&lt;img width=&quot;677&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/bd16e350-dfe2-4098-84bd-a0c07aa90f82&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;십육진법과-이진법의-관계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%AD%EC%9C%A1%EC%A7%84%EB%B2%95%EA%B3%BC-%EC%9D%B4%EC%A7%84%EB%B2%95%EC%9D%98-%EA%B4%80%EA%B3%84&quot; aria-label=&quot;십육진법과 이진법의 관계 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;십육진법과 이진법의 관계&lt;/h4&gt;
&lt;p&gt;16진수와 2진수간 변환이 쉬우므로 많이 사용된다.&lt;/p&gt;
&lt;p&gt;2진수 → 16진수
&lt;img width=&quot;677&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/c1c4260f-90d5-40d6-b181-93b2a1a21b9d&quot;&gt;
16진수 → 2진수
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/1326355a-985c-4181-b03e-bbb5817d388a&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;0과-1로-문자를-표현하는-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#0%EA%B3%BC-1%EB%A1%9C-%EB%AC%B8%EC%9E%90%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;0과 1로 문자를 표현하는 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;0과 1로 문자를 표현하는 방법&lt;/h2&gt;
&lt;h4 id=&quot;문자-집합과-인코딩&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%9E%90-%EC%A7%91%ED%95%A9%EA%B3%BC-%EC%9D%B8%EC%BD%94%EB%94%A9&quot; aria-label=&quot;문자 집합과 인코딩 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문자 집합과 인코딩&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;인코딩(encoding)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;코드화하는 과정&lt;/li&gt;
&lt;li&gt;문자를 0과 1로 이루어진 문자 코드로 변환하는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;디코딩(decoding)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;코드를 해석하는 과정&lt;/li&gt;
&lt;li&gt;0과 1로 표현된 문자 코드로 문자로 변환하는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;문자 집합(character set)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터가 이해할 수 있는 문자의 모음&lt;/li&gt;
&lt;li&gt;아스키 코드
&lt;ul&gt;
&lt;li&gt;초창기 문자 집합 중 하나&lt;/li&gt;
&lt;li&gt;알파벳, 아라비아 숫자, 일부 특수 문자 및 제어 문자&lt;/li&gt;
&lt;li&gt;7비트로 하나의 문자 표현(2^7= 128개의 문자 표현)
&lt;ul&gt;
&lt;li&gt;8비트 중 1비트는 오류 검출을 위해 사용되는 패리티 비트(parity bit)&lt;/li&gt;
&lt;li&gt;A는 65로 인코딩, a는 97로 인코딩&lt;/li&gt;
&lt;li&gt;c.f.) 65, 97 → 코드 포인트(code point)라고 하기도 == 문자에 부여된 값&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;간단한 인코딩&lt;/li&gt;
&lt;li&gt;But 한글을 포함한 다른 언어 문자, 다양한 특수 문자 표현 불가
&lt;ul&gt;
&lt;li&gt;아스키 코드는 7비트로 하나의 문자를 표현하기에 128개보다 많은 문자를 표현할 수 없음&lt;/li&gt;
&lt;li&gt;8비트 확장 아스키(expected ASCII)의 등장, 여전히 부족
⇒ &lt;Mark&gt;언어별 인코딩 방식의 등장&lt;/Mark&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;한글 인코딩: 완성형 vs 조합형 인코딩&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;한글을 위한 인코딩이 필요
&lt;ul&gt;
&lt;li&gt;알파벳을 이어 쓰면 단어가 되는 영어&lt;/li&gt;
&lt;li&gt;초성, 중성, 종성의 조합으로 이루어진 한글&lt;/li&gt;
&lt;li&gt;완성형 인코딩 방식과 조합형 인코딩 방식이 존재
&lt;img width=&quot;648&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/925b4227-9e47-4039-9bab-880daccc8aa3&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;EUC-KR
&lt;ul&gt;
&lt;li&gt;KS X 1001 KS X 1003 문자집합 기반의 한글 인코딩 방식&lt;/li&gt;
&lt;li&gt;완성형 인코딩&lt;/li&gt;
&lt;li&gt;글자 하나 하나에 2바이트 크기의 코드 부여 - 2바이트 == 16비트 == 4자리 16진수로 표현
&lt;img width=&quot;619&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/699029a1-2580-4a9e-ac0d-dfddd1ad634b&quot;&gt;&lt;/li&gt;
&lt;li&gt;2300여개의 한글 표현 가능&lt;/li&gt;
&lt;li&gt;여전히 모든 한글을 표현하기에는 부족한 수&lt;/li&gt;
&lt;li&gt;쀏, 뙠, 훽같은 한글은 표현 불가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다국어를 지원하는 프로그램을 개발하는 경우 언어별 인코딩 방식을 모두 이해해야하는 번거로움&lt;/p&gt;
&lt;p&gt;→ &lt;Mark&gt;유니코드 문자 집합과 utf-8의 등장&lt;/p&gt;
&lt;h4 id=&quot;유니코드-문자-집합과-utf-8&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9C%A0%EB%8B%88%EC%BD%94%EB%93%9C-%EB%AC%B8%EC%9E%90-%EC%A7%91%ED%95%A9%EA%B3%BC-utf-8&quot; aria-label=&quot;유니코드 문자 집합과 utf 8 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;유니코드 문자 집합과 utf-8&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;유니코드&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;통일된 문자 집합&lt;/li&gt;
&lt;li&gt;한글, 영어, 화살표와 같은 특수 문자, 심지어 이모티콘까지&lt;/li&gt;
&lt;li&gt;현대 문자 표현에 있어 매우 중요한 위치&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;유니코드의 인코딩 방식&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;utf-8, utf-16, utf-32
&lt;img width=&quot;261&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/6e98311c-aba3-4bca-afbc-2dd25c587a93&quot;&gt;
고유한 16진수 값: U+219B(=유니코드 코드 포인트)&lt;/p&gt;
&lt;p&gt;코드 포인트 그대로 문자 인코딩 값으로 삼지 않고 다양한 인코딩 방식으로(utf-8, 16, …) 0과 1로 만든다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;utf-8 인코딩&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;UTF(Unicode Transformation Format) == 유니코드 인코딩 방법&lt;/li&gt;
&lt;li&gt;가변 길이 인코딩: 인코딩 결과가 1바이트~4바이트&lt;/li&gt;
&lt;li&gt;인코딩 결과가 몇 바이트가 될지는 유니코드에 부여된 값(&lt;Mark&gt;유니코드 코드 포인트&lt;/Mark&gt;)에 따라 다름
&lt;img width=&quot;705&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/3d746a61-4e43-4b3f-b7d7-963007aa7479&quot;&gt;
&lt;img width=&quot;702&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/125a4af8-837d-45cd-a3f0-e512f7c46441&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ utf-8은 유니코드 문자를 인코딩하는 방법, utf-8로 인코딩한 값은 &lt;Mark&gt;가변길이 인코딩&lt;/Mark&gt;이기 떄문에 1바이트~4바이트가 될 수 있다. 어떤 식으로 인코딩이 진행되는지는 &lt;Mark&gt;유니코드 문자에 부여된 코드 포인트의 범위&lt;/Mark&gt;에 따라서 코드 포인트를 형식에 맞게 넣어주면 인코딩 된 결과.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[알고리즘 기초 코드 작성 요령]]></title><description><![CDATA[알고리즘의 기초 코드 작성 요령에 대해서 배웁니다.]]></description><link>https://dltlaos11.github.io//posts/기초 코드 작성 요령</link><guid isPermaLink="false">https://dltlaos11.github.io//posts/기초 코드 작성 요령</guid><pubDate>Thu, 24 Aug 2023 17:40:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84&quot;&gt;시간복잡도&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B9%85%EC%98%A4%ED%91%9C%EA%B8%B0%EB%B2%95&quot;&gt;빅오표기법(Big-O)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B3%B5%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84&quot;&gt;공간복잡도&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A0%95%EC%88%98-%EC%9E%90%EB%A3%8C%ED%98%95&quot;&gt;정수자료형&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8B%A4%EC%88%98-%EC%9E%90%EB%A3%8C%ED%98%95&quot;&gt;실수자료형&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B8%B0%EC%B4%88-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%EC%9A%94%EB%A0%B9&quot;&gt;기초 코드 작성요령&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;시간복잡도&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84&quot; aria-label=&quot;시간복잡도 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시간복잡도&lt;/h2&gt;
&lt;h5 id=&quot;입력의-크기와-문제를-해결하는데-걸리는-시간의-상관관계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%85%EB%A0%A5%EC%9D%98-%ED%81%AC%EA%B8%B0%EC%99%80-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94%EB%8D%B0-%EA%B1%B8%EB%A6%AC%EB%8A%94-%EC%8B%9C%EA%B0%84%EC%9D%98-%EC%83%81%EA%B4%80%EA%B4%80%EA%B3%84&quot; aria-label=&quot;입력의 크기와 문제를 해결하는데 걸리는 시간의 상관관계 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;입력의 크기와 문제를 해결하는데 걸리는 시간의 상관관계&lt;/h5&gt;
&lt;p&gt;다음 코드에서 함수가 몇 번의 연산을 하는지 시간복잡도를 구해보자&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;func1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; cnt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;초깃값 설정 cnt&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; n번&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;대소비교&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;작을경우&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; cnt&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt; n번&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;나머지 연산&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;같다면&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cnt &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; cnt&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cnt 반환&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; n에 비례&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또 다른 예제를 보자&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;대회장에 N명의 사람들이 일렬로 서있다. 거기서 당신은 이름이 ‘가나다’인 사람을 찾기 위해 사람들에게 이름을 물어볼 것이다. 이 떄 사람들은 이름 순으로 서있다. 이름을 물어보고 대답을 듣는데까지 1초가 걸린다면 얼마만큼의 시간이 필요할까?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;details&gt;
&lt;summary&gt;정답
&lt;/summary&gt;
업다운게임을 하듯이 중간 사람에게 계속 물어보면된다. 반씩 줄여나가면서 ‘가나다’의 사람의 위치를 유추. 최선의 경우 1초, 최악의 경우 lg N초, 평균적으로 lg N초가 필요하다. 걸리는 시간은 lg N에 비례한다.
&lt;ul&gt;
&lt;li&gt;lg 2= 1, lg 4= 2 ,lg 8 =3&lt;/li&gt;
&lt;li&gt;반씩 줄여나가면서 찾는 경우 평균적 log N에 비례&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;h4 id=&quot;빅오표기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B9%85%EC%98%A4%ED%91%9C%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;빅오표기법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;빅오표기법&lt;/h4&gt;
&lt;h5 id=&quot;주어진-식을-값이-가장-큰-대포항만-남겨서-나타내는-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%96%B4%EC%A7%84-%EC%8B%9D%EC%9D%84-%EA%B0%92%EC%9D%B4-%EA%B0%80%EC%9E%A5-%ED%81%B0-%EB%8C%80%ED%8F%AC%ED%95%AD%EB%A7%8C-%EB%82%A8%EA%B2%A8%EC%84%9C-%EB%82%98%ED%83%80%EB%82%B4%EB%8A%94-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;주어진 식을 값이 가장 큰 대포항만 남겨서 나타내는 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;주어진 식을 값이 가장 큰 대포항만 남겨서 나타내는 방법&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;O(N^): 6N^ + 20N+10lgN&lt;/li&gt;
&lt;li&gt;상수 O(1): 1, 5, ..&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;대표적인 시간복잡도의 그래프
&lt;img width=&quot;704&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/2fef7205-1fc8-41ca-91d7-a2784bb1d63d&quot;&gt;
O(1)&amp;#x3C;O(lgN)-로그시간&amp;#x3C;O(N)-선형시간&amp;#x3C;O(NlgN)&amp;#x3C;&lt;Mark&gt;O(N^) &amp;#x3C; O(N!) N이 25이하로 작은게 아니면 시간제한 통과하기 힘듦&lt;/p&gt;
&lt;p&gt;N의 크기에 따른 허용 시간복잡도
&lt;img width=&quot;703&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/6cf7d5e4-1641-43e1-b70d-3544d32959ee&quot;&gt;
→ 주어진 문제를 보고 풀이를 떠올린 후에 무턱대고 바로 그걸 짜는게 아니라, 내 풀이가 이 문제를 제한 시간 내로 통과할 수 있는지, 즉 내 알고리즘의 시간복잡도가 올바른지 먼저 생각해봐야 한다.&lt;/p&gt;
&lt;h6 id=&quot;1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1&quot; aria-label=&quot;1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1&lt;/h6&gt;
&lt;img width=&quot;704&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/fe26d75d-690a-44a2-8c01-9aecca41151d&quot;&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;func1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; cnt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; cnt&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; cnt&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6 id=&quot;2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2&quot; aria-label=&quot;2 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2&lt;/h6&gt;
&lt;img width=&quot;705&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/b3e1bd26-eaf7-44d8-b186-18cd66826abb&quot;&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;func2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6 id=&quot;3&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3&quot; aria-label=&quot;3 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3&lt;/h6&gt;
&lt;img width=&quot;706&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/c1b9b2e9-da23-4e91-a637-c9103d3b44c9&quot;&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;func3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;√&lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6 id=&quot;4&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4&quot; aria-label=&quot;4 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4&lt;/h6&gt;
&lt;img width=&quot;706&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/ca6b3771-491a-42f0-8437-0583de92b133&quot;&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;func4&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt;이 &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;^&lt;/span&gt;k이상 &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;^&lt;/span&gt;k&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;미만이라고 할떄 &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;문 안에서 i는 최대 k번만 &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;배로 커짐
val은 &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;^&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; so&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lgN&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;공간복잡도&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B3%B5%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84&quot; aria-label=&quot;공간복잡도 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;공간복잡도&lt;/h2&gt;
&lt;h5 id=&quot;입력의-크기와-문제를-해결하는데-필요한-공간의-상관관계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%85%EB%A0%A5%EC%9D%98-%ED%81%AC%EA%B8%B0%EC%99%80-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B3%B5%EA%B0%84%EC%9D%98-%EC%83%81%EA%B4%80%EA%B4%80%EA%B3%84&quot; aria-label=&quot;입력의 크기와 문제를 해결하는데 필요한 공간의 상관관계 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;입력의 크기와 문제를 해결하는데 필요한 공간의 상관관계&lt;/h5&gt;
&lt;p&gt;메모리 제한이 512MB일떄 int변수(4byte)를 대략 1.2억개 정도 선언할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;512MB = 1.2억개의 int&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ 떠올린 크기가 5억인 배열을 필요로 한다면 해당 풀이는 메모리제한을 만족하지 못하므로 틀림&lt;/p&gt;
&lt;h2 id=&quot;정수-자료형&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EC%88%98-%EC%9E%90%EB%A3%8C%ED%98%95&quot; aria-label=&quot;정수 자료형 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정수 자료형&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;char: -2^7 ~ 2^7-1 (-128 ~ 127)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unsigend char: 2^8-1 (0~255)
&lt;img width=&quot;703&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/21f83750-da80-4657-b16a-e89a345ef63f&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;short: 2(2^15-1=32767)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;int: 4(2^31-1 = 2.1*10^9)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;long: 8(2^63-1 = 9.2*10^18)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;iteger-overflow&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#iteger-overflow&quot; aria-label=&quot;iteger overflow permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Iteger Overflow&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;127(01111111)+1(00000001) = -128(10000000)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;해결법 ⇒ 강제형변환&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;char ⇒ int&lt;/li&gt;
&lt;li&gt;int ⇒ long&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;실수-자료형&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%EC%88%98-%EC%9E%90%EB%A3%8C%ED%98%95&quot; aria-label=&quot;실수 자료형 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실수 자료형&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;float: 4byte(32)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;double: 8byte(64)
&lt;img width=&quot;705&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/9eb4d652-0ddc-4f70-81bc-f472d5eb4c8b&quot;&gt;
&lt;img width=&quot;705&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/e5be8aaf-331d-479c-9482-b985b388c81a&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;실수를 나타날떄 칸은 sign(음수인지, 양수인지), exponent(지수), fraction field(유효숫자)로 나누어짐&lt;/p&gt;
&lt;p&gt;=&gt; IEEE-754 format&lt;/p&gt;
&lt;p&gt;&lt;em&gt;실수 자료형 정리&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;실수의 저장/연산 과정에서 반드시 오차가 발생할 수 밖에 없음&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hi&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bye&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; bye&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;→ 유효숫자가 들어가는 fraction field가 유한하기 떄문에 2진수 기준으로 무한소수인걸 저장하려고 할 떄 에는 어쩔 수 없이 float은 앞 23 bit, double은 앞 52bit까지만 잘라서 저장할 수 밖에 없다. 0.1은 이진수로 나타내면 무한소수여서 애초에 오차가 있는 채로 저장, 그걸 3번 더하다보니 오차가 더 커져서 bye가 출력.&lt;/p&gt;
&lt;p&gt;fraction filed를 가진 각 자료형의 표현 범위&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;float: 유효숫자 6자리(상대오차 10^-6)&lt;/li&gt;
&lt;li&gt;double: 유효숫자 15자리(상대오차 10^-15)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;상대 오차의 허용 범위에서 두 자료형끼리 차이가 크므로 float &amp;#x3C; double 지향&lt;br&gt;
실수 자료형 필요한 문제면 힌트를 준다. 절대/상대 10^-6까지 허용&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;double에 long long 범위의 정수를 함부로 담으면 안됨&lt;/li&gt;
&lt;li&gt;실수를 비교할 떄는 등호를 사용하면 안됨&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;1e-12 = 10^-12&lt;/li&gt;
&lt;li&gt;10^9 = 1e9&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;기초-코드-작성요령&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EC%B4%88-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%EC%9A%94%EB%A0%B9&quot; aria-label=&quot;기초 코드 작성요령 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기초 코드 작성요령&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vector: 일종의 가변배열로 크기를 마음대로 늘였다 줄였다 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BOJ 10871&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; input &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/dev/stdin&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; answer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    answer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;answer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-&gt; 결국 남이 읽기 좋은 코드보다는 빠른 풀이를 위한 코드를 작성해야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;출력 맨 마지막 공백 혹은 줄바꿈이 추가로 있어도 상관이 없다.&lt;/li&gt;
&lt;li&gt;디버거는 굳이 사용하지 않아도 된다. log 사용 권장&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[컴퓨터 구조의 큰 그림]]></title><description><![CDATA[컴퓨터 구조의 큰 그림에 대해서 배웁니다.]]></description><link>https://dltlaos11.github.io//posts/컴퓨터 구조의 큰 그림</link><guid isPermaLink="false">https://dltlaos11.github.io//posts/컴퓨터 구조의 큰 그림</guid><pubDate>Wed, 23 Aug 2023 17:40:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot;&gt;컴퓨터 구조를 알아야 하는 이유&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0&quot;&gt;컴퓨터 구조&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0%EA%B0%80-%EC%9D%B4%ED%95%B4%ED%95%98%EB%8A%94-%EC%A0%95%EB%B3%B4&quot;&gt;컴퓨터가 이해하는 정보&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0%EC%9D%98-%EB%84%A4-%EA%B0%80%EC%A7%80-%ED%95%B5%EC%8B%AC-%EB%B6%80%ED%92%88&quot;&gt;컴퓨터의 네 가지 핵심 부품&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A9%94%EC%9D%B8%EB%B3%B4%EB%93%9C&quot;&gt;ETC_메인보드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;컴퓨터-구조를-알아야-하는-이유&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;컴퓨터 구조를 알아야 하는 이유 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴퓨터 구조를 알아야 하는 이유&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;문제 해결 능력 → 분석
&lt;ul&gt;
&lt;li&gt;컴퓨터 구조를 분석하여 이해하며 문제를 해결할 수 있는 개발자&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;성능, 용량, 비용 고려한 개발 가능
&lt;ul&gt;
&lt;li&gt;클라우드 서비스도 직접 CPU, 메모리, 저장 용량을 고려해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/d9e26639-a87c-480f-ac69-09159220029b&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;결론&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터 구조는 결국 성능, 용량, 비용에 대한 이야기&lt;/li&gt;
&lt;li&gt;프로그래밍 언어의 문법만으로는 해결하기 어려운 문제들을 해결할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;컴퓨터-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;컴퓨터 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴퓨터 구조&lt;/h1&gt;
&lt;h2 id=&quot;컴퓨터가-이해하는-정보&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0%EA%B0%80-%EC%9D%B4%ED%95%B4%ED%95%98%EB%8A%94-%EC%A0%95%EB%B3%B4&quot; aria-label=&quot;컴퓨터가 이해하는 정보 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴퓨터가 이해하는 정보&lt;/h2&gt;
&lt;h4 id=&quot;데이터&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0&quot; aria-label=&quot;데이터 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;숫자, 문자, 이미지, 동영상과 같은 정적인 정보&lt;/li&gt;
&lt;li&gt;컴퓨터와 주고받는/내부에 저장된 정보를 데이터라 통칭하기도&lt;/li&gt;
&lt;li&gt;0과 1로 숫자를 표현하는 방법&lt;/li&gt;
&lt;li&gt;0과 1로 문자를 표현하는 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;명령어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4&quot; aria-label=&quot;명령어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;명령어&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;컴퓨터는 결국 명령어를 처리하는 기계&lt;/li&gt;
&lt;li&gt;명령어
&lt;ul&gt;
&lt;li&gt;컴퓨터를 실질적으로 움직이는 정보&lt;/li&gt;
&lt;li&gt;데이터는 명령어를 위한 일종의 재료&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;명령어의 생김새와 동작 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;컴퓨터의-네-가지-핵심-부품&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0%EC%9D%98-%EB%84%A4-%EA%B0%80%EC%A7%80-%ED%95%B5%EC%8B%AC-%EB%B6%80%ED%92%88&quot; aria-label=&quot;컴퓨터의 네 가지 핵심 부품 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴퓨터의 네 가지 핵심 부품&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/9ce1051b-2518-43db-a546-51e30d9a4699&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;cpu&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cpu&quot; aria-label=&quot;cpu permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CPU&lt;/h4&gt;
&lt;h5 id=&quot;구성요소&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C&quot; aria-label=&quot;구성요소 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;구성요소&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;산술논리연산장치(ALU): 계산기&lt;/li&gt;
&lt;li&gt;제어장치: &lt;code class=&quot;language-text&quot;&gt;제어 신호&lt;/code&gt;를 &lt;code class=&quot;language-text&quot;&gt;내보내고&lt;/code&gt;, 명령어를 &lt;code class=&quot;language-text&quot;&gt;해석&lt;/code&gt;하는 장치
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;제어신호&lt;/code&gt;: 컴퓨터 부품들을 관리하고 작동시키기 위한 전기 신호(&lt;code class=&quot;language-text&quot;&gt;메모리 읽기(메모리-&gt;CPU), 쓰기 신호(CPU → 메모리)&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/76cc95ce-09b4-4ca9-b2f4-c0929e98daf4&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h5 id=&quot;cpu메모리에-저장된-명령어를-실행하는-일련의-과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cpu%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%97%90-%EC%A0%80%EC%9E%A5%EB%90%9C-%EB%AA%85%EB%A0%B9%EC%96%B4%EB%A5%BC-%EC%8B%A4%ED%96%89%ED%95%98%EB%8A%94-%EC%9D%BC%EB%A0%A8%EC%9D%98-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;cpu메모리에 저장된 명령어를 실행하는 일련의 과정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CPU&amp;#x26;메모리에 저장된 명령어를 실행하는 일련의 과정:&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;제어장치(메모리 읽기 제어 신호 내보내기)&lt;/li&gt;
&lt;li&gt;메모리(1번지 명령어를 CPU의 레지스터에 저장, 제어장치가 레지스터의 명령어를 해석)&lt;/li&gt;
&lt;li&gt;한번더 메모리 읽기 신호 내보냄&lt;/li&gt;
&lt;li&gt;제어 장치가 해석하고 ALU한테 120, 100(레지스터에 저장)을 전달해주고 ALU가 명령어를 수행한(더하기) 뒤에 레지스터에 더한 값을 저장하고(&lt;Mark&gt;레지스터&lt;/Mark&gt;) 제어장치가 메모리 읽기 신호 내보낸 뒤(&lt;Mark&gt;명령어도 레지스터에 저장&lt;/Mark&gt;) &lt;Mark&gt;메모리 쓰기 신호&lt;/Mark&gt;와 함께 레지스터에 저장된 값(220)을 메모리에 저장&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU는 메모리에 저장된 값을 읽어 들이고, 해석하고, 실행하는 장치&lt;/li&gt;
&lt;li&gt;CPU 내부에는 ALU, 레지스터, 제어장치가 있다.
&lt;ul&gt;
&lt;li&gt;ALU는 계산하는 장치&lt;/li&gt;
&lt;li&gt;레지스터는 임시 저장 장치&lt;/li&gt;
&lt;li&gt;제어장치는 제어 신호를 발생시키고 명령어를 해석하는 장치&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;!-- &lt;figure&gt;
	&lt;blockquote&gt;
        dsdas
		&lt;footer&gt;
			&lt;cite&gt;— Josef Mueller-Brockmann&lt;/cite&gt;
		&lt;/footer&gt;
	&lt;/blockquote&gt;
&lt;/figure&gt; --&gt;
&lt;h4 id=&quot;메모리메인메모리-주기억장치&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC%EB%A9%94%EC%9D%B8%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%A3%BC%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98&quot; aria-label=&quot;메모리메인메모리 주기억장치 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리(메인메모리, 주기억장치)&lt;/h4&gt;
&lt;h5 id=&quot;구성요소-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C-1&quot; aria-label=&quot;구성요소 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;구성요소&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;RAM&lt;/li&gt;
&lt;li&gt;ROM
&lt;blockquote&gt;
&lt;p&gt;summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램이 실행되기 위해서는 메모리에 저장되어 있어야, 메모리는 실행되는 프로그램의 명령어와 데이터를 저장&lt;/li&gt;
&lt;li&gt;주소를 통해 내가 원하는 명령어 혹은 데이터가 어디에 위치해 있는지 알 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;보조기억장치ssd-벡업용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%B4%EC%A1%B0%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98ssd-%EB%B2%A1%EC%97%85%EC%9A%A9&quot; aria-label=&quot;보조기억장치ssd 벡업용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;보조기억장치(ssd, 벡업용)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;메모리는 &lt;code class=&quot;language-text&quot;&gt;실행할&lt;/code&gt; 정보를 저장하고 보조기억장치는 &lt;code class=&quot;language-text&quot;&gt;보관할 정보&lt;/code&gt;를 저장&lt;/li&gt;
&lt;li&gt;메모리를 보조하는 특별한 입출력장치&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;메모리메인메모리-주기억장치-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC%EB%A9%94%EC%9D%B8%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%A3%BC%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98-1&quot; aria-label=&quot;메모리메인메모리 주기억장치 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리(메인메모리, 주기억장치)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;보조기억장치, 입출력장치 block device라고 하기도&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;메인보드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EC%9D%B8%EB%B3%B4%EB%93%9C&quot; aria-label=&quot;메인보드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메인보드&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;메인보드에 연결된 컴퓨터의 4가지 핵심 부품끼리 &lt;code class=&quot;language-text&quot;&gt;시스템 버스&lt;/code&gt;를 통해서 정보를 주고받음&lt;/li&gt;
&lt;li&gt;버스는 컴퓨터의 부품끼리 정보를 주고받는 일종의 통로&lt;/li&gt;
&lt;li&gt;다양한 종류의 버스가 있다&lt;/li&gt;
&lt;li&gt;컴퓨터의 핵심 부품을 연결하는 버스는 시스템 버스&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;시스템-버스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EB%B2%84%EC%8A%A4&quot; aria-label=&quot;시스템 버스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시스템 버스&lt;/h3&gt;
&lt;h4 id=&quot;내부-구성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;내부 구성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;내부 구성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;주소 버스: 주소를 주고받는 통로&lt;/li&gt;
&lt;li&gt;데이터 버스: 명령어와 데이터를 주고받는 통로&lt;/li&gt;
&lt;li&gt;제어 버스: 제어신호를 주고받는 통로&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;메모리-값-읽어들이기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B0%92-%EC%9D%BD%EC%96%B4%EB%93%A4%EC%9D%B4%EA%B8%B0&quot; aria-label=&quot;메모리 값 읽어들이기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리 값 읽어들이기&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/dfd8354a-913c-4aab-b0c5-b155351f192d&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;Mark&gt;제어 버스&lt;/Mark&gt;를 통해서 메모리 읽기 신호(&lt;Mark&gt;제어 신호&lt;/Mark&gt;)를 내보내고&lt;/li&gt;
&lt;li&gt;어떤 몇 번지 주소를 읽고싶은지에 해당하는 주소 번지(&lt;Mark&gt;읽고자 하는 주소&lt;/Mark&gt;)를 &lt;Mark&gt;주소 버스&lt;/Mark&gt;를 통해서 메모리로 전달&lt;/li&gt;
&lt;li&gt;1번지에 해당햐는 데이터를 &lt;Mark&gt;데이터 버스&lt;/Mark&gt;를 통해서 CPU로 전달&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;메모리-값-쓰기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B0%92-%EC%93%B0%EA%B8%B0&quot; aria-label=&quot;메모리 값 쓰기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리 값 쓰기&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/91676f45-bb0b-4d4d-a8e3-fe5a19f36658&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;어디에 저장할 건지(&lt;Mark&gt;저장할 주소&lt;/Mark&gt;) → &lt;Mark&gt;주소 버스&lt;/Mark&gt;&lt;/li&gt;
&lt;li&gt;무엇을 할건지(&lt;Mark&gt;제어 신호&lt;/Mark&gt;) → &lt;Mark&gt;제어 버스&lt;/Mark&gt;&lt;/li&gt;
&lt;li&gt;무엇을 저장할 건지(&lt;Mark&gt;저장할 데이터&lt;/Mark&gt;) → &lt;Mark&gt;데이터 버스&lt;/Mark&gt;를 통해서 메모리에 저장&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;… OS에서 페이징, 프로세스의 모든 데이터와 명령어가 저장될 필요는 없음&lt;/p&gt;</content:encoded></item></channel></rss>