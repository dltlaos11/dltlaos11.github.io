{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/os/process-synchronization-deadlock","result":{"data":{"markdownRemark":{"id":"3e52e58a-63b3-5753-9751-a4f0729971f0","html":"<ul>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%8F%99%EA%B8%B0%ED%99%94\">프로세스 동기화</a>\n<ul>\n<li><a href=\"#%EB%8F%99%EA%B8%B0%ED%99%94%EC%9D%98-%EC%9D%98%EB%AF%B8\">동기화의 의미</a></li>\n<li><a href=\"#%EA%B3%B5%EC%9C%A0-%EC%9E%90%EC%9B%90%EA%B3%BC-%EC%9E%84%EA%B3%84-%EA%B5%AC%EC%97%AD\">공유 자원과 임계 구역</a></li>\n</ul>\n</li>\n<li><a href=\"#%EB%8F%99%EA%B8%B0%ED%99%94-%EA%B8%B0%EB%B2%95\">동기화 기법</a>\n<ul>\n<li><a href=\"#%EB%AE%A4%ED%85%8D%EC%8A%A4-%EB%9D%BD\">뮤텍스 락</a></li>\n<li><a href=\"#%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4\">세마포어</a></li>\n<li><a href=\"#%EB%AA%A8%EB%8B%88%ED%84%B0\">모니터</a></li>\n</ul>\n</li>\n<li><a href=\"#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C\">교착 상태</a>\n<ul>\n<li><a href=\"#%EC%9E%90%EC%9B%90-%ED%95%A0%EB%8B%B9-%EA%B7%B8%EB%9E%98%ED%94%84\">자원 할당 그래프</a></li>\n</ul>\n</li>\n<li><a href=\"#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\">교착 상태 해결 방법</a>\n<ul>\n<li><a href=\"#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C-%EC%98%88%EB%B0%A9\">교착 상태 예방</a></li>\n<li><a href=\"#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C-%ED%9A%8C%ED%94%BC\">교착 상태 회피</a></li>\n<li><a href=\"#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C-%EA%B2%80%EC%B6%9C-%ED%9B%84-%ED%9A%8C%EB%B3%B5\">교착 상태 검출 후 회복</a></li>\n<li><a href=\"#%EA%B5%90%EC%B0%A8%EC%83%81%ED%83%9C-%EB%AC%B4%EC%8B%9C\">교차상태 무시</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"프로세스-동기화\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%8F%99%EA%B8%B0%ED%99%94\" aria-label=\"프로세스 동기화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스 동기화</h2>\n<p>동시다발적으로 실행되는 프로세스들은 서로 협력하며 영향을 주고 받는다, 이 과정에서 <Mark>동기화</Mark>(=자원의 일관성)를 보장해야 한다</p>\n<h3 id=\"동기화의-의미\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EA%B8%B0%ED%99%94%EC%9D%98-%EC%9D%98%EB%AF%B8\" aria-label=\"동기화의 의미 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동기화의 의미</h3>\n<p>공동의 목적을 위해 동시에 수행되는 프로세스</p>\n<ul>\n<li>e.g. 워드 프로세서 프로그램\n<ul>\n<li>맞춤법 검사 프로세스</li>\n<li>입력 내용을 화면에 출력하는 프로세스</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<p>→ 아무렇게나 실행하면 ❌ → 올바른 수행을 위해 프로세스들은 <Mark>동기화</Mark>되어야 → 자원의 일관성</p>\n<p>프로세스들의 <Mark>수행 시기를 맞추는 것</p>\n<p><Mark>실행 순서 제어</Mark>: 프로세스를 올바른 순서대로 실행하기</p>\n<ul>\n<li>실행 순서 제어를 위한 동기화: reader writer problem\n<ul>\n<li>Writer: Book.txt파일에 값을 저장하는 프로세스</li>\n<li>Reader: Book.txt파일에 저장된 값을 읽어들이는 프로세스</li>\n<li>Reader와 Writer 프로세스는 무작정 아무렇게나 실행 되면 ❌, <Mark>실행의 순서</Mark> 떄문</li>\n</ul>\n</li>\n<li>Reader 프로세스는 ‘Book.txt 안에 값이 존재한다’는 <Mark>특정 조건이 만족되어야만</Mark> 실행 가능</li>\n</ul>\n<p><Mark>상호 배제</Mark>: 동시에 접근해서는 안되는 자원에 하나의 프로세스만 접근하게 하기</p>\n<ul>\n<li>상호 배제를 위한 동기화: Bank account problem</li>\n<li><Mark>한 번에 하나의 프로세스만 접근해야 하는 자원</Mark>에 동시 접근을 피하기 위한 동기화\n<ul>\n<li>현재 계좌에 잔액: 10만원</li>\n<li>프로세스 A는 현재 잔액에 2만원을 추가하는 프로세스</li>\n<li>프로세스 B는 현재 잔액에 5만원을 추가하는 프로세스\n<ul>\n<li>동시에 실행된다면 아래와 같은 문제 발생\n<img src=\"https://github.com/boost-library/yong-study/assets/74396128/a3a2394b-8e6d-4e28-9c63-afa6021a6ea3\" alt=\"image\"></li>\n<li>동기화 된 프로세스의 실행 예제\n<img src=\"https://github.com/boost-library/yong-study/assets/74396128/de95d343-0d22-46e3-a8dd-e090f2d2fa87\" alt=\"image\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><Mark>Producer &#x26; Consumer problem</p>\n<ul>\n<li>물건을 계속해서 생산하는 생성자(producer, 프로세스 혹은 스레드)</li>\n<li>물건을 계속해서 생산하는 소비자(consumer, 프로세스 혹은 스레드)</li>\n<li>‘총합’ 변수 공유\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">총합<span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n생산자<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    버퍼에 데이터 삽입\n    <span class=\"token char\">'총합'</span> 변수 <span class=\"token number\">1</span> 증가\n<span class=\"token punctuation\">}</span>\n\n소비자<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    버퍼에 데이터 삽입\n    <span class=\"token char\">'총합'</span> 변수 <span class=\"token number\">1</span> 감소\n<span class=\"token punctuation\">}</span>\n동기화가 되지 않아 소비자<span class=\"token punctuation\">,</span> 생산자를 <span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">000</span>번 실행하면 총합은 달라짐\n동시에 접근해서는 안되는 자원에 동시에 접근해서 발생한 문제</code></pre></div>\n</li>\n</ul>\n<p>c.f. ) 실행의 문맥을 갖는 모든 대상은 동기화 대상이기에 <Mark>스레드</Mark> 또한 동기화 대상</p>\n<h3 id=\"공유-자원과-임계-구역\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%EC%9C%A0-%EC%9E%90%EC%9B%90%EA%B3%BC-%EC%9E%84%EA%B3%84-%EA%B5%AC%EC%97%AD\" aria-label=\"공유 자원과 임계 구역 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공유 자원과 임계 구역</h3>\n<p><Mark>공유 자원</Mark>: 여러 프로세스 혹은 스레드가 공유하는 자원</p>\n<ul>\n<li>전역 변수, 파일, 입출력장치, 보조기억장치, …</li>\n</ul>\n<p><Mark>임계 구역</Mark>: 동시에 실행하면 문제가 발생하는 자원에 접근하는 <Mark>코드 영역</p>\n<ul>\n<li>앞선 예시의 ‘총합’ 변수 …</li>\n<li>임계 구역에 진입하고자 하면 진입한 프로세스 이외에는 대기해야\n<img src=\"https://github.com/boost-library/yong-study/assets/74396128/90d59066-667f-4d46-bfe1-d360ad472959\" alt=\"image\"></li>\n<li>임계 구역에 동시에 접근하면 자원의 일관성이 깨질 수 있다. 이를 <Mark>경쟁 조건</Mark>(race condition)이라 한다.</li>\n</ul>\n<p>운영체제가 임계구역 문제를 해결하는 세 가지 원칙🔥</p>\n<p>(상호 배제를 위한 동기화를 위한 세 가지 원칙)</p>\n<ol>\n<li>\n<p><Mark>상호 배제</Mark>mutual exclusion</p>\n<p>한 프로세스가 임계구역에 진입했다면 다른 프로세스는 들어올 수 ❌</p>\n</li>\n<li>\n<p><Mark>진행</Mark>progress</p>\n<p>임계 구역에 어떤 프로세스도 진입하지 않았다면 <Mark>진입하고자 하는 프로세스는 들어갈 수 있어야 한다</p>\n</li>\n<li>\n<p><Mark>유한 대기</Mark>bounded waiting</p>\n<p>한 프로세스가 임계 구역에 진입하고 싶다면 언젠가는 임계 구역에 들어올 수 있어야 한다(임계구역에 들어오기 위해 무한정 대기해서는 안 된다.)</p>\n</li>\n</ol>\n<h2 id=\"동기화-기법\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EA%B8%B0%ED%99%94-%EA%B8%B0%EB%B2%95\" aria-label=\"동기화 기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동기화 기법</h2>\n<p>동기화 기법 중 뮤텍스 락, 세마포어, 모니터에 대해서 알아보자</p>\n<h3 id=\"뮤텍스-락\" style=\"position:relative;\"><a href=\"#%EB%AE%A4%ED%85%8D%EC%8A%A4-%EB%9D%BD\" aria-label=\"뮤텍스 락 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>뮤텍스 락</h3>\n<p>상호 배제를 위한 동기화 도구(자물쇠 역할), 뮤텍스 락</p>\n<p>뮤텍스 락의 단순한 형태</p>\n<ul>\n<li>\n<p>전역 변수 하나, 함수 두개</p>\n</li>\n<li>\n<p>자물쇠 역할: 프로세스들이 공유하는 전역 변수 lock</p>\n</li>\n<li>\n<p>임계 구역을 잠그는 역할: acquire 함수</p>\n</li>\n<li>\n<p>임계 구역의 잠금을 해제하는 역할: release 함수</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>lock <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 만약 임계 구역이 잠겨 있다면</span>\n            <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 임계 구역이 잠겨 있는지를 반복적으로 확인</span>\n    lock <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 만약 임계 구역이 잠겨 있지 않다면 임계 구역 잠금</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    lock <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 임계 구역 작업이 끝났으니 잠금 해제</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 자물쇠 잠겨 있는지 확인, 잠겨 있지 않다면 잠그고 들어가기</span>\n<span class=\"token comment\">// 임계구역  // 임계 구역에서의 작업 진행</span>\n<span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 자물쇠 반환</span></code></pre></div>\n<ul>\n<li>acuire 함수\n<ul>\n<li>프로세스가 임계 구역에 진입하기 전에 호출</li>\n<li>임계 구역이 잠겨 있다면\n<ul>\n<li>임계 구역이 열릴 때까지(lock이 false가 될 때까지) 임계 구역을 반복적으로 확인</li>\n</ul>\n</li>\n<li>임계 구역이 열려있다면\n<ul>\n<li>임계 구역을 잠그기(lock를 true로 바꾸기)</li>\n</ul>\n</li>\n<li>바쁜 대기(busy waiting)\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>lock <span class=\"token operator\">==</span> true<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 만약 임계 구역이 잠겨 있다면</span>\n    <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 임계 구역이 잠겨 있는지를 반복적으로 확인</span></code></pre></div>\n<ul>\n<li>반복적으로 무한히 대기하면서 임계 구역이 잠겨 있는지를 반복적으로 확인</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>release 함수\n<ul>\n<li>임계 구역에서의 작업이 끝나고 호출</li>\n<li>현재 잠긴 임계 구역을 열기(lock을 false로 바꾸기)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"세마포어\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4\" aria-label=\"세마포어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세마포어</h3>\n<p>일반화된 방식의 동기화 도구</p>\n<p><Mark>공유 자원이 여러 개 있는 경우에도</Mark> 적용 가능</p>\n<p>세마포어의 종류(이진 세마포어, 카운팅 세마포어) 중 카운팅 세마포어</p>\n<p>임계구역 앞에서 멈춤 신호를 받으면 잠시 기다리기</p>\n<p>임계구역 앞에서 가도 좋다는 신호를 받으면 임계 구여 진입</p>\n<p>세마포어의 단순한 형태</p>\n<ul>\n<li>\n<p>전역 변수 하나, 함수 두개</p>\n</li>\n<li>\n<p>임계 구역에 진입할 수 있는 프로세스의 개수(사용 가능한 공유 자원의 개수)를 나타내는 <Mark>전역 변수 S</p>\n</li>\n<li>\n<p>임계구역에 들어가도 좋은지, 기다려야 할지를 알려주는 <Mark>wait함수</p>\n</li>\n<li>\n<p>임계구역 앞에서 기다리는 프로세스에 ‘이제 가도 좋다’고 신호를 주는 <Mark>signal 함수</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// 임계구역</span>\n    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>S <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 만일 임계 구역에 진입할 수 잇는 프로세스 개수가 0 이하라면</span>\n                    <span class=\"token punctuation\">;</span> <span class=\"token comment\">// 사용할 수 있는 자원이 있는지 반복적으로 확인하고</span>\n        S<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 임계 구역에 진입할 수 있는 프로세스 개수가 하나 이상이면 S를 1감소시키고 임계 구역 진입</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Busy waiting\n<ul>\n<li>CPU 사이클 낭비 → 해결(<Mark>대기 상태, 준비 상태</Mark>)</li>\n<li>프로세스 상태를 바꿈으로서 CPU 사이클 낭비를 방지\n<ul>\n<li>사용할 수 있는 자원이 없을 경우 <Mark>대기 상태</Mark>로 만듦\n<ul>\n<li>해당 프로세스의 PCB를 대기 큐에 삽입</li>\n</ul>\n</li>\n<li>사용할 수 있는 자원이 생겼을 경우 대기 큐의 프로세스를 <Mark>준비 상태</Mark>로 만듦\n<ul>\n<li>해당 프로세스의 PCB를 대기 큐에서 꺼내 준비 큐에 삽입</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        S<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>S <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            add this process to Queue<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 해당 프로세스 PCB를 대기 큐에 삽입</span>\n            <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 대기 상태로 접어든다</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        S<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 임계 구역에서의 작업을 마친 뒤 S를 1증가</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>S <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            remove a proccess p from Queue <span class=\"token comment\">// 대기 큐에 있는 프로세스 p를 제거</span>\n            <span class=\"token function\">wakeup</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 프로세스 p를 대기 상태에서 준비 상태로 만든다</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>세마포어를 활용한 실행 <Mark>순서 동기화</p>\n<ul>\n<li>세마포어의 변수 S를 <Mark>0</Mark>으로 두고</li>\n<li>먼저 실행할 프로세스 <Mark>뒤에 signal</Mark> 함수,</li>\n<li>다음에 실행할 프로세스 <Mark>앞에 wait 함수를</Mark> 붙이면 됨</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"모니터\" style=\"position:relative;\"><a href=\"#%EB%AA%A8%EB%8B%88%ED%84%B0\" aria-label=\"모니터 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모니터</h3>\n<p>매번 임계구역 앞뒤로 <code class=\"language-text\">wait()</code>, <code class=\"language-text\">signal()</code>을 호출해야하는 번거로움</p>\n<p>사용자(개발자)가 다루기에 편한 동기화 도구</p>\n<p><strong>상호 배제를 위한 동기화</strong></p>\n<ul>\n<li>인터페이스를 위한 큐</li>\n<li>공유자원에 접근하고자 하는 프로세스를 (인터페이스를 위한) 큐에 삽입</li>\n<li>큐에 삽입된 순서대로 (한 번에 하나의 프로세스만)  공유 자원 이용\n<img src=\"https://github.com/boost-library/yong-study/assets/74396128/5b1d247e-b64a-49a0-a17a-696c6867ad00\" alt=\"image\"></li>\n</ul>\n<p><strong>실행 순서 제어를 위한 동기화</strong></p>\n<ul>\n<li>조건 변수condition variable 이용\n<ul>\n<li>condition variable: 프로세스나 스레드의 실행 순서를 제어하기 위해 사용하는 특별한 변수\n<img src=\"https://github.com/boost-library/yong-study/assets/74396128/569bcfbd-c50a-4958-8e1e-e76c601201b8\" alt=\"image\"></li>\n</ul>\n</li>\n<li>조건변수.wait(): 대기 상태로 변경, 조건 변수에 대한 큐에 삽입</li>\n<li>조건변수.signal(): wait()으로 대기 상태로 접어든 조건 변수를 실행 상태로 변경</li>\n</ul>\n<p>모니터 안에는 하나의 프로세스만이 있을 수 있다</p>\n<ul>\n<li>wait()를 호출했던 프로세스는 signal()을 호출한 프로세스가 모니터를 떠난 뒤에 수행을 재게</li>\n<li>signal()을 호출한 프로세스의 실행을 일시 중단하고 자신이 실행된 뒤 다시 signal()을 호출한 프로세스의 수행을 재게</li>\n</ul>\n<p>실행 순서 제어를 위한 동기화</p>\n<ol>\n<li>특정 프로세스가 아직 실행될 조건이 되지 않았을 때에는 wait를 통해 실행 중단</li>\n<li>특정 프로세스가 실행될 조건이 충족되었을 때에는 signal을 통해 실행을 재게</li>\n</ol>\n<h2 id=\"교착-상태\" style=\"position:relative;\"><a href=\"#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C\" aria-label=\"교착 상태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>교착 상태</h2>\n<p><strong>두 개 이상의 프로세스가 서로 상대방이 가지고 있는 자원을 기다리면서 무한정 대기하게 되는 상황</strong></p>\n<h3 id=\"자원-할당-그래프\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EC%9B%90-%ED%95%A0%EB%8B%B9-%EA%B7%B8%EB%9E%98%ED%94%84\" aria-label=\"자원 할당 그래프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자원 할당 그래프</h3>\n<ol>\n<li>교착 상태가 발생했을 때의 상황을 정확히 표현해보기</li>\n</ol>\n<p>교착 상태 발생 조건 파악가능</p>\n<ul>\n<li>\n<p>어떤 프로세스가 어떤 자원을 할당 받아 사용 중인지 확인 가능</p>\n</li>\n<li>\n<p>어떤 프로세스가 어떤 자원을 기다리고 있는지 확인 가능</p>\n<p><img src=\"https://github.com/boost-library/yong-study/assets/74396128/ff0654e3-fbc6-47ea-b360-562b2b86fa31\" alt=\"image\"></p>\n<ul>\n<li>웹 브라우저 프로세스는 자원 B를 할당받았고, 자원 A의 사용을 기다리고 있고</li>\n<li>게임 프로세스는 자원 A를 할당받았고, 자원 B의 사용을 기다리고 있음</li>\n</ul>\n<p><strong>교착 상태가 일어난 그래프의 특징</strong></p>\n<ul>\n<li>자원 할당 그래프가 <Mark>원의 형태</Mark>를 띄고 있다</li>\n</ul>\n</li>\n</ul>\n<ol start=\"2\">\n<li>교착 상태가 일어나는 근본적인 이유 이해하기</li>\n</ol>\n<p>교착 상태가 발생할 조건</p>\n<ol>\n<li>\n<p><Mark>상호 배제<strong>mutual exclusion</strong></p>\n<p>한 프로세스가 사용하는 자원을 다른 프로세스가 사용할 수 없는 상태</p>\n</li>\n<li>\n<p><Mark>점유와 대기<strong>hold and wait</strong></p>\n<p>자원을 할당 받은 상태에서 다른 자원의 할당 받기를 기다리는 상태</p>\n</li>\n<li>\n<p><Mark>비선점<strong>Nonpreemption</strong></p>\n<p>어떤 프로세스도 다은 프로세스의 자원을 강제로 빼앗지 못하는 상태</p>\n</li>\n<li>\n<p><Mark>환형 대기<strong>circular wait</strong></p>\n<p>프로세스들이 원의 형태로 자원을 대기하는 상태</p>\n</li>\n</ol>\n<p>위 네 가지 조건 중 하나라도 만족하지 않으면 <Mark>교착상태가 발생하지 않음</p>\n<p>위 네 가지 조건을 모두 만족하면 <Mark>교착 상태가 발생할 수 있음</p>\n<h2 id=\"교착-상태-해결-방법\" style=\"position:relative;\"><a href=\"#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95\" aria-label=\"교착 상태 해결 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>교착 상태 해결 방법</h2>\n<p>교착 상태 해결</p>\n<ul>\n<li>예방, 회피, 검출 후 회복</li>\n</ul>\n<h3 id=\"교착-상태-예방\" style=\"position:relative;\"><a href=\"#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C-%EC%98%88%EB%B0%A9\" aria-label=\"교착 상태 예방 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>교착 상태 예방</h3>\n<h3 id=\"\" style=\"position:relative;\"><a href=\"#\" aria-label=\" permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>애초에 교착 상태가 발생하지 않도록 교착 상태 발생 조건(상호 배제, 점유와 대기, 비선점, 환형 대기) 중 하나를 없애버리기\n<ul>\n<li>상호 배제를 없애면?\n<ul>\n<li>모든 자원을 공유 → 이론적으론 가능, 현실적으론 ❌</li>\n</ul>\n</li>\n<li>점유와 대기를 없애면?\n<ul>\n<li>\n<p>특정 프로세스에 자원을 모두 할당하거나, 아예 할당하지 않는 방식으로 배분</p>\n<p>→ 자원의 활용룰 낮출 수 있는 방식</p>\n</li>\n</ul>\n</li>\n<li>비선점 조건을 없애면?\n<ul>\n<li>\n<p>선점이 가능한 자원(e.g. CPU)에 한해 효과적</p>\n<p>→ 모든 자원이 선점 가능한 것은 아니다</p>\n</li>\n</ul>\n</li>\n<li>환형 대기 조건을 없애면?\n<ul>\n<li>\n<p>자원에 <Mark>번호</Mark>를 붙이고 <Mark>오름차순</Mark>으로 할당하면 원형 대기는 발생하지 않음</p>\n<p>→ 자원에 번호 붙이는 것은 어려운 작업, 어떤 자원에 어떤 번호를 붙이느냐에 따라 활용률이 달라진다</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>교착 상태가 발생하지 않음을 보장할 수 있으나 부작용이 따르는 방식</li>\n</ul>\n<h3 id=\"교착-상태-회피\" style=\"position:relative;\"><a href=\"#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C-%ED%9A%8C%ED%94%BC\" aria-label=\"교착 상태 회피 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>교착 상태 회피</h3>\n<ul>\n<li>교착 상태를 <Mark>무분별한 자원 할당으로 인해 발생</Mark>했다고 간주</li>\n<li>교착 상태가 발생하지 않을 만큼 <Mark>적절하게 할당</Mark>하기</li>\n<li>배분할 수 있는 자원의 양을 고려하여 교착 상태가 발생하지 않을 만큼만 자원 배분</li>\n</ul>\n<ol>\n<li>\n<p>안전 순서열: 교착 상태 없이 안전하게 프로세스들에 자원을 할당할 수 있는 순서</p>\n</li>\n<li>\n<p>안전 상태: 교착 상태 없이 모든 프로세스가 자원을 할당 받고 종료될 수 있는 상태</p>\n<p>안전 순서열이 있는 상태\n<img src=\"https://github.com/boost-library/yong-study/assets/74396128/38e5374d-fa0d-4200-b79c-5339298da6ea\" alt=\"image\">\nP2 → P1 → P3이라는 안전 순서열대로 할당하면 모든 프로세스 실행 가능</p>\n</li>\n<li>\n<p>불안전 상태: 교착 상태가 발생할 수도 있는 상태</p>\n<p>안전 순서열이 없는 상태\n<img src=\"https://github.com/boost-library/yong-study/assets/74396128/ec6d7c4f-d4cc-46f9-8675-45ebf2ffd283\" alt=\"image\"></p>\n</li>\n</ol>\n<ul>\n<li>안전 상태에서 안전 상태로 움직이는 경우에만 자원을 할당하는 방식</li>\n<li>항시 안전 상태를 유지하도록 자원을 할당하는 방식</li>\n<li>c.f. 은행원 알고리즘</li>\n</ul>\n<h3 id=\"교착-상태-검출-후-회복\" style=\"position:relative;\"><a href=\"#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C-%EA%B2%80%EC%B6%9C-%ED%9B%84-%ED%9A%8C%EB%B3%B5\" aria-label=\"교착 상태 검출 후 회복 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>교착 상태 검출 후 회복</h3>\n<ul>\n<li>교착 상태의 발생을 인정하고 사후에 조치하는 방식</li>\n<li>프로세스가 자원을 요구하면 일단 할당, 교착 상태가 검출되면 회복</li>\n<li><Mark>선점을 통한 회복, 프로세스 강제 종료를 통한 회복\n<ul>\n<li>선점을 통한 회복\n<ul>\n<li>교착 상태가 해결될 때까지 한 프로세스씩 자원을 몰아주는 방식</li>\n</ul>\n</li>\n<li>프로세스 강제 종료를 통한 회복\n<ul>\n<li>교착 상태에 놓인 프로세스 모두 강제 종료 → 작업 내용을 잃을 위험</li>\n<li>교착 상태가 해결될 떄까지 한 프로세스씩 강제 종료 → 오버헤드</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"교차상태-무시\" style=\"position:relative;\"><a href=\"#%EA%B5%90%EC%B0%A8%EC%83%81%ED%83%9C-%EB%AC%B4%EC%8B%9C\" aria-label=\"교차상태 무시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>교차상태 무시</h3>\n<p><strong>타조 알고리즘</strong></p>\n<p>교착 상태가 발생할 수 있지만, 이를 무시하고 시스템을 계속 운영하는 방법. 이 방법은 교착 상태의 심각성이 낮거나 복구 비용이 더 큰 경우에 적용.</p>","fields":{"slug":"/posts/2023-09-13---프로세스의 동기화와 교착상태//posts/os/process-synchronization-deadlock","tagSlugs":["/tag/os/","/tag/cs/"]},"frontmatter":{"date":"2023-09-13T20:35:32.169Z","description":"프로세스의 동기화와 교착상태에 대해서 배웁니다","tags":["OS","CS"],"title":"프로세스의 동기화와 교착상태","socialImage":null}}},"pageContext":{"slug":"/posts/2023-09-13---프로세스의 동기화와 교착상태//posts/os/process-synchronization-deadlock"}},"staticQueryHashes":["2236276093","251939775","401334301"]}