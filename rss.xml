<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog by Yong Jun]]></title><description><![CDATA[Blog by Yong Jun]]></description><link>http://github.com/dylang/node-rss</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 24 Mar 2025 14:46:04 GMT</lastBuildDate><item><title><![CDATA[this에 대해서 알아보자]]></title><description><![CDATA[this의 특성에 대해 알아보자]]></description><link>https://dltlaos11.github.io/posts/javascript/what-is-this</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/javascript/what-is-this</guid><pubDate>Wed, 08 Nov 2023 23:35:32 GMT</pubDate><content:encoded>&lt;h2 id=&quot;this&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#this&quot; aria-label=&quot;this permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;this&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;정의 : Javascript에서 this의 값은 함수를 호출한 방법에 의해 결정된다.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;bind로 this 객체 고정 가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;화살표 함수에서의 this는 함수가 속해있는 곳의 상위 this를 계승받는다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;참고로 화살표 함수는 bind 함수를 제공하지 않는다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다음 예시를 통해 더 살펴보자&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;this는 누굴까?&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; car &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;KIA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;ArrowGetName&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;ArrowGetName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// car 객체&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; li &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;app&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; child &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;p&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// child.textContent = car.getName().name; // KIA -&gt; car.xxx&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// document.getElementById(&quot;app&quot;).innerHTML = &quot;안녕하세요!&quot;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// const globalCar = car.getName;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// child.textContent = globalCar().window; // [object Window] -&gt; xxx, 밖에서 최상단 window객체가 부른 것&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// child.textContent = globalCar.bind(car)(); // {name: &quot;KIA&quot;, getName: ƒ}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// bind this&lt;/span&gt;

child&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; car&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// {name: &quot;KIA&quot;, getName: ƒ}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// function일 경우 Window{} 반환&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// () =&gt;, 화살표 함수일 경우 {name: &quot;KIA&quot;, getName: ƒ}가 나온다.&lt;/span&gt;

li&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;child&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; btn &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// btn.addEventListener(&apos;click&apos;, car.getName);&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// HTMLButtonElement{attributes: {…}, innerHTML: &quot;this는 누굴까?&quot;, nodeType: 1, tagName: &quot;button&quot;}&lt;/span&gt;
btn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; car&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;car&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// HTMLButtonElement -&gt; car&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ageTest &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;unit&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;살&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;ageList&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function-variable function&quot;&gt;getAgelist&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ageList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; age &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;unit&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

ageTest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getAgelist&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;그러면-this를-사용할-때-화살표-함수를-써야할-까-일반-함수를-써야-할까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9F%AC%EB%A9%B4-this%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%95%8C-%ED%99%94%EC%82%B4%ED%91%9C-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%8D%A8%EC%95%BC%ED%95%A0-%EA%B9%8C-%EC%9D%BC%EB%B0%98-%ED%95%A8%EC%88%98%EB%A5%BC-%EC%8D%A8%EC%95%BC-%ED%95%A0%EA%B9%8C&quot; aria-label=&quot;그러면 this를 사용할 때 화살표 함수를 써야할 까 일반 함수를 써야 할까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그러면 this를 사용할 때 화살표 함수를 써야할 까 일반 함수를 써야 할까?&lt;/h4&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;this를 사용하고 싶다면 일반함수를 작성하자
&lt;ul&gt;
&lt;li&gt;bind()로 원하는 객체를 지정해 줄 수 있기 떄문 → 예측 가능한 this 사용 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;대신에 함수 안에 존재하는 함수의 this는 상위에 있는 것을 그대로 받아오기 때문에 화살표 함수로 만들어 주는 것이 좋다.&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Reducer에 대해서 알아보자]]></title><description><![CDATA[Reducer에 대해서 배웁니다]]></description><link>https://dltlaos11.github.io/posts/redux/what-is-reducer</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/redux/what-is-reducer</guid><pubDate>Sun, 08 Oct 2023 23:35:32 GMT</pubDate><content:encoded>&lt;h3 id=&quot;리듀서는-비동기적인-코드--side-effects를-수행하면-안된다-리듀서는-순수함수&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A6%AC%EB%93%80%EC%84%9C%EB%8A%94-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%A0%81%EC%9D%B8-%EC%BD%94%EB%93%9C--side-effects%EB%A5%BC-%EC%88%98%ED%96%89%ED%95%98%EB%A9%B4-%EC%95%88%EB%90%9C%EB%8B%A4-%EB%A6%AC%EB%93%80%EC%84%9C%EB%8A%94-%EC%88%9C%EC%88%98%ED%95%A8%EC%88%98&quot; aria-label=&quot;리듀서는 비동기적인 코드  side effects를 수행하면 안된다 리듀서는 순수함수 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;::리듀서는 비동기적인 코드 &amp;#x26; side effects를 수행하면 안된다, 리듀서는 순수함수&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;side effects?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;부작용(side effect)은 프로그램의 실행 과정에서 함수나 모듈 외부에 영향을 미치는 것을 말합니다. 순수 함수(pure function)는 동일한 입력에 대해 항상 동일한 출력을 반환하고 외부에 영향을 미치지 않는 함수를 의미합니다. 이러한 함수는 부작용이 없습니다.&lt;/p&gt;
&lt;p&gt;부작용은 주로 다음과 같은 것들을 나타냅니다:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;외부 데이터 변경:&lt;/strong&gt; 함수나 모듈이 외부 데이터를 변경하거나 파일에 쓰기, 데이터베이스 업데이트 등과 같은 작업을 수행합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;네트워크 요청:&lt;/strong&gt; 함수나 모듈이 네트워크 요청을 보내고, 이로 인해 서버 상태가 변경되거나 응답을 받습니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;시간에 따른 작업:&lt;/strong&gt; 함수나 모듈이 타이머, 인터벌, 애니메이션과 같이 시간에 따라 작업을 수행합니다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;외부 리소스 액세스:&lt;/strong&gt; 함수나 모듈이 외부 리소스에 접근하고 파일을 읽거나 센서 데이터를 수집하는 등의 작업을 수행합니다.&lt;/p&gt;
&lt;p&gt;Redux와 같은 상태 관리 라이브러리에서 부작용은 주로 비동기 작업(네트워크 요청, 데이터 로딩)과 관련이 있습니다. 이러한 부작용을 관리하기 위해 Redux에서는 미들웨어를 사용하고, 리듀서는 순수 함수로 유지되어 예측 가능한 상태 변경을 담당합니다. 부작용을 효과적으로 처리하면 애플리케이션의 예측 가능성과 디버깅 용이성을 향상시킬 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이상 GPT의 대답이다.&lt;/p&gt;
&lt;p&gt;그러면 비동기 작업(async task)와 side effects는 어디에서 수행되어야 할까?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;컴포넌트 안에서(e.g. useEffect())&lt;/li&gt;
&lt;li&gt;액션 생성자 안에서&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게?!&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; registerBoard &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; content&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; writer&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/boards&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; content&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; writer &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;aside&gt;
💡 리덕스 상태를 리듀서 함수 외부에서 변경해서는  안댐
&lt;/aside&gt;
&lt;h3 id=&quot;논리를-어디에-둘-것인가&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%85%BC%EB%A6%AC%EB%A5%BC-%EC%96%B4%EB%94%94%EC%97%90-%EB%91%98-%EA%B2%83%EC%9D%B8%EA%B0%80&quot; aria-label=&quot;논리를 어디에 둘 것인가 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;::논리를 어디에 둘 것인가?&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;동기적 code, side effects free code(i.e. data transformations)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reducer를 선호&lt;/li&gt;
&lt;li&gt;Action Creator와 Components를 피해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;비동기 코드(async) or code with side effects&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Action Creator와 Components를 선호&lt;/li&gt;
&lt;li&gt;절대 Reducer를 쓰지 말 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;💡 &lt;strong&gt;Reducer 내부에서는 비동기 요청을 보내는 것은 리덕스의 원칙에 어긋나는 거야? 나는 리듀서가 순수함수여야 한다고 알고 있어서 비동기 요청을 리듀서 내부에서 보낼 수 있는것인지 궁금해&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Redux의 리듀서는 순수 함수(pure function)여야 합니다. 리덕스의 세 가지 주요 원칙 중 하나는 “순수 함수를 사용하여 상태를 변경”하는 것입니다. 이 원칙을 지키려면 리듀서 함수는 순수하고 예측 가능해야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;순수 함수는 다음과 같은 특징을 갖습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;동일한 입력 값에 대해 항상 동일한 출력 값을 반환합니다.&lt;/li&gt;
&lt;li&gt;외부의 상태나 데이터를 변경하지 않습니다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;부작용(side effect)&lt;/code&gt;을 일으키지 않습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;따라서 &lt;strong&gt;비동기 작업을 수행하는 &lt;code class=&quot;language-text&quot;&gt;API 호출&lt;/code&gt;이나 &lt;code class=&quot;language-text&quot;&gt;네트워크 요청&lt;/code&gt;과 같은 작업은 리듀서 내부에서 직접 수행해서는 안 됩니다.&lt;/strong&gt; 비동기 작업은 &lt;code class=&quot;language-text&quot;&gt;액션 크리에이터&lt;/code&gt; 또는 &lt;code class=&quot;language-text&quot;&gt;미들웨어&lt;/code&gt;(예: &lt;code class=&quot;language-text&quot;&gt;Redux Thunk&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Redux Saga&lt;/code&gt;)를 사용하여 처리해야 합니다.&lt;/p&gt;
&lt;p&gt;:::Redux Thunk&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;code class=&quot;language-text&quot;&gt;Redux Thunk&lt;/code&gt;를 사용하는 경우, &lt;code class=&quot;language-text&quot;&gt;액션 크리에이터 함수&lt;/code&gt; 내에서 &lt;code class=&quot;language-text&quot;&gt;비동기 작업을 처리&lt;/code&gt;하고 액션을 디스패치하여 리듀서에 상태 변경을 알립니다. 이렇게 하면 리듀서 함수는 순수 함수로 유지됩니다.&lt;/p&gt;
&lt;p&gt;따라서 리듀서 함수는 순수하고 예측 가능한 상태 변경을 담당하고, 비동기 작업은 다른 부분(액션 크리에이터 함수 또는 미들웨어)에서 처리하는 것이 Redux의 원칙을 준수하는 방법입니다.&lt;/p&gt;
&lt;p&gt;:::Redux Saga&lt;/p&gt;
&lt;p&gt;Redux Saga는 리덕스의 미들웨어로서, 비동기 작업을 처리하기 위해 액션과 리듀서 사이에 중간 역할을 합니다. Redux Saga는 제너레이터(generator) 함수를 사용하여 비동기 작업의 흐름을 더 선언적으로 제어합니다.&lt;/p&gt;
&lt;p&gt;이상 GPT의 대답을 참고해봤다.&lt;/p&gt;
&lt;p&gt;비동기 작업을 수행하는 &lt;code class=&quot;language-text&quot;&gt;API 호출&lt;/code&gt;이나 &lt;code class=&quot;language-text&quot;&gt;네트워크 요청&lt;/code&gt;과 같은 &lt;code class=&quot;language-text&quot;&gt;부작용(side effects)&lt;/code&gt;은 미들웨어 활용하는 것이 &lt;code class=&quot;language-text&quot;&gt;Redux&lt;/code&gt;내에서는 정답이지만, &lt;code class=&quot;language-text&quot;&gt;Redux&lt;/code&gt;를 쓰지 않는다면 &lt;code class=&quot;language-text&quot;&gt;React Query&lt;/code&gt;를 사용해보는 것도 추천한다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[useRef의 사용법과 3가지 종류로 살펴보는 타입 정의 확인해보기]]></title><description><![CDATA[useRef의 사용법과 3가지 종류로 살펴보는 타입 정의에 대해서 배웁니다]]></description><link>https://dltlaos11.github.io/posts/typescript/how-to-use-useRef-and-its-three-types-of-type-definitions</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/typescript/how-to-use-useRef-and-its-three-types-of-type-definitions</guid><pubDate>Fri, 06 Oct 2023 23:35:32 GMT</pubDate><content:encoded>&lt;h3 id=&quot;useref&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#useref&quot; aria-label=&quot;useref permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;useRef&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;useRef&lt;/code&gt;는 인자로 넘어온 초깃값을 &lt;code class=&quot;language-text&quot;&gt;useRef&lt;/code&gt; 객체의 &lt;code class=&quot;language-text&quot;&gt;.current&lt;/code&gt; 프로퍼티에 저장한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;useRef&lt;/code&gt;의 사용법은 크게 2가지인데,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;특정 DOM 객체를 직접 조작해야하는 경우
&lt;ul&gt;
&lt;li&gt;e.f. ) &lt;code class=&quot;language-text&quot;&gt;focus()&lt;/code&gt; 메소드를 사용하는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;값이 바뀌어도 화면이 리렌더링 되지 않게 사용하는 경우
&lt;ul&gt;
&lt;li&gt;공유되는 외부 변수와 달리 각 컴포넌트의 복사본에 대한 지역 변수로 값의 변화에 따른 리렌더링을 트리거하지 않음&lt;/li&gt;
&lt;li&gt;js에서는 함수도 값처럼 취급하므로 변수가 될 수 있음을 기억하자_&lt;code class=&quot;language-text&quot;&gt;일급 객체&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/blob/d3a21b5b49cd03353ad056dcc834a690d0f06f73/types/react/index.d.ts#L1081C2-L1081C2&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Type definitions for React&lt;/a&gt;을 살펴보면 &lt;code class=&quot;language-text&quot;&gt;useRef&lt;/code&gt; 에는 3가지 종류가 있음을 알 수 있는데, 제네릭 타입에 따라 다른 것을 사용하도록 &lt;code class=&quot;language-text&quot;&gt;overload&lt;/code&gt;된 것을 알 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;값이-바뀌어도-화면이-리렌더링-되지-않게-사용하는-경우&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B0%92%EC%9D%B4-%EB%B0%94%EB%80%8C%EC%96%B4%EB%8F%84-%ED%99%94%EB%A9%B4%EC%9D%B4-%EB%A6%AC%EB%A0%8C%EB%8D%94%EB%A7%81-%EB%90%98%EC%A7%80-%EC%95%8A%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;값이 바뀌어도 화면이 리렌더링 되지 않게 사용하는 경우 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;::값이 바뀌어도 화면이 리렌더링 되지 않게 사용하는 경우&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;initialValue&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; MutableRefObject&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// convenience overload for refs given as a ref prop as they typically start with a null value&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;/**
 * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument
 * (`initialValue`). The returned object will persist for the full lifetime of the component.
 *
 * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable
 * value around similar to how you’d use instance fields in classes.
 *
 * Usage note: if you need the result of useRef to be directly mutable, include `| null` in the type
 * of the generic argument.
 *
 * @version 16.8.0
 * @see https://react.dev/reference/react/useRef
 */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MutableRefObject&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      current&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;T&gt; 제네릭으로 넘겨준 타입(값)을 current 프로퍼티에 그대로 넘겨준다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;예시 코드&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useRef &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; ref &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ref&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ref&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;You clicked &apos;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; ref&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos; times!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;handleClick&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      Click me!
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;💡 렌더링 중에는 &lt;code class=&quot;language-text&quot;&gt;ref.current&lt;/code&gt; 쓰거나 읽으면 안된다&lt;/p&gt;
&lt;p&gt;React는 컴포넌트의 본문(body of your component)이 순수함수 처럼 동작할 것을 기대하기 떄문이다
순수함수: 동일한 입력값(인자)을 주면 항상 동일한 결과값을 반환하는 함수&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;입력(props, state 및 context)이 동일하다면 동일한 JSX를 리턴해야 한다.&lt;/li&gt;
&lt;li&gt;다른 순서나 다른 인수로 호출해도 다른 호출의 결과에 영향을 주어서는 안된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;렌더링 중에 참조(ref)를 읽거나 쓰면 이러한 기대가 깨지게 된다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 🚩 Don&apos;t write a ref during rendering&lt;/span&gt;

  myRef&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// 🚩 Don&apos;t read a ref during rendering&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;myOtherRef&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;대신 이벤트 헨들러나 useEffect()에서 참조를 읽거나 쓸 수 있다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;MyComponent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// ✅ You can read or write refs in effects&lt;/span&gt;

    myRef&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// ✅ You can read or write refs in event handlers&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myOtherRef&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;렌더린 중에 무엇인거를 읽거나 써야한다면 ref대신 state를 사용할 것&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;다시 예시 코드로 돌아가본다면&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;useRef&lt;/code&gt;를 지역변수로 사용하는 경우이다. 버튼을 클릭할 경우 &lt;code class=&quot;language-text&quot;&gt;ref.current&lt;/code&gt;의 값이 1씩 증가한다.&lt;/p&gt;
&lt;p&gt;위에서 사용되는 &lt;code class=&quot;language-text&quot;&gt;useRef&lt;/code&gt; 는 제네릭 타입과 매개변수가 일치하는 &lt;code class=&quot;language-text&quot;&gt;useRef&lt;/code&gt; 이며 예시 코드에서 선언된 &lt;code class=&quot;language-text&quot;&gt;ref&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;MutableRefObject&amp;lt;number&gt;&lt;/code&gt; 타입이므로, &lt;code class=&quot;language-text&quot;&gt;.current&lt;/code&gt; 를 직접 수정가능 할 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;특정-dom-객체를-직접-조작해야하는-경우&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8A%B9%EC%A0%95-dom-%EA%B0%9D%EC%B2%B4%EB%A5%BC-%EC%A7%81%EC%A0%91-%EC%A1%B0%EC%9E%91%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;특정 dom 객체를 직접 조작해야하는 경우 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;::특정 DOM 객체를 직접 조작해야하는 경우&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;initialValue&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; RefObject&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// convenience overload for potentially undefined initialValue / call with 0 arguments&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// has a default to stop it from defaulting to {} instead&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;/**
 * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument
 * (`initialValue`). The returned object will persist for the full lifetime of the component.
 *
 * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable
 * value around similar to how you’d use instance fields in classes.
 *
 * @version 16.8.0
 * @see https://react.dev/reference/react/useRef
 */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;초깃값을 &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt;로 지정해주면 &lt;code class=&quot;language-text&quot;&gt;RefObject&lt;/code&gt;를 반환하는데&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RefObject&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; current&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;readonly&lt;/code&gt; 때문에 직접 &lt;code class=&quot;language-text&quot;&gt;current&lt;/code&gt;의 값은 수정이 안되지만 &lt;code class=&quot;language-text&quot;&gt;current&lt;/code&gt;의 하위 프로퍼티는 수정이 가능하다는 점을 알아두자.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;예시 코드&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useRef &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; inputRef &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;HTMLInputElement&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleClick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    inputRef&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;inputRef&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;handleClick&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        Focus the input
      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;input DOM element&lt;/code&gt;를 &lt;code class=&quot;language-text&quot;&gt;ref&lt;/code&gt;로 받아서, 버튼을 클릭하면 입력에 초점이 맞춰지는 예제다.&lt;/p&gt;
&lt;h3 id=&quot;마지막-세번째-userefundefined-useref&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EC%A7%80%EB%A7%89-%EC%84%B8%EB%B2%88%EC%A7%B8-userefundefined-useref&quot; aria-label=&quot;마지막 세번째 userefundefined useref permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마지막 세번째, useRef(&lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt;) useRef()&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; MutableRefObject&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;/**
 * The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.
 * Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside
 * `useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.
 *
 * Prefer the standard `useEffect` when possible to avoid blocking visual updates.
 *
 * If you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as
 * `componentDidMount` and `componentDidUpdate`.
 *
 * @version 16.8.0
 * @see https://react.dev/reference/react/useLayoutEffect
 */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;매개변수(제네릭)에 &lt;code class=&quot;language-text&quot;&gt;undefined&lt;/code&gt;를 넣는 경우 MutableRefObject를 리턴한다.&lt;/p&gt;
&lt;h3 id=&quot;요약&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%94%EC%95%BD&quot; aria-label=&quot;요약 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;요약&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ref &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ref &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;HTMLInputElement&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ref에 지역 변수를 담는 경우 - 리렌더링 ❌&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MutableRefObject&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    current&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DOM을 직접 다루는 경우 초깃값은 &lt;code class=&quot;language-text&quot;&gt;null&lt;/code&gt;로 설정&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;RefObject&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; current&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;reference&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/react/index.d.ts&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/react/index.d.ts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://react.dev/reference/react/useRef&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://react.dev/reference/react/useRef&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Type Aliases와 Interfaces의 차이]]></title><description><![CDATA[Type Aliases와 Interfaces의 차이에 대해서 배웁니다]]></description><link>https://dltlaos11.github.io/posts/typescript/Differences-between-TypeAliases-and-Interfaces</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/typescript/Differences-between-TypeAliases-and-Interfaces</guid><pubDate>Sat, 30 Sep 2023 20:35:32 GMT</pubDate><content:encoded>&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Type aliases&lt;/code&gt;와 &lt;code class=&quot;language-text&quot;&gt;Interfaces&lt;/code&gt;는 굉장히 비슷하고, 많은 경우에 자유롭게 선택해서 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;interface&lt;/code&gt;가 가지는 대부분의 기능은 &lt;code class=&quot;language-text&quot;&gt;type&lt;/code&gt;에서도 동일하게 사용 가능하다. 이 둘의 가장 핵심적인 차이는, &lt;strong&gt;&lt;code class=&quot;language-text&quot;&gt;type&lt;/code&gt;은 새 프로퍼티를 추가하기 위해 재선언할 수 없지만 &lt;code class=&quot;language-text&quot;&gt;interface&lt;/code&gt;는 항상 확장 가능하다는 점이다.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-interface&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1-interface&quot; aria-label=&quot;1 interface permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;1) Interface&lt;/strong&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Extending an interface&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Bear&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  honey&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bear &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getBear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
bear&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
bear&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;honey&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Adding new fields to an existing interface&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Window&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Window&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; TypeScriptAPI
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; src &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;const a = &quot;Hello World&quot;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;transpileModule&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;src&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;2-type&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2-type&quot; aria-label=&quot;2 type permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;2) Type&lt;/strong&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Extending a type via intersections&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Bear&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Animal &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; 
  honey&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bear &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getBear&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
bear&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
bear&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;honey&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;A type cannot be changed after being created&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Window&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Window&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  ts&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; TypeScriptAPI&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;token comment&quot;&gt;// Error: Duplicate identifier &apos;Window&apos;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Interface&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;Object type&lt;/code&gt;(extend named types and classes)만을 확장 가능하다.&lt;/p&gt;
&lt;p&gt;💡 Interfaces may only be used to &lt;a href=&quot;https://www.typescriptlang.org/play?#code/PTAEAkFMCdIcgM6gC4HcD2pIA8CGBbABwBtIl0AzUAKBFAFcEBLAOwHMUBPQs0XFgCahWyGBVwBjMrTDJMAshOhMARpD4tQ6FQCtIE5DWoixk9QEEWAeV37kARlABvaqDegAbrmL1IALlAEZGV2agBfampkbgtrWwMAJlAAXmdXdy8ff0Dg1jZwyLoAVWZ2Lh5QVHUJflAlSFxROsY5fFAWAmk6CnRoLGwmILzQQmV8JmQmDzI-SOiKgGV+CaYAL0gBBdyy1KCQ-Pn1AFFplgA5enw1PtSWS+vCsAAVAAtB4QQWOEMKBuYVUiVCYvYQsUTQcRSBDGMGmKSgAAa-VEgiQe2GLgKQA&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;declare the shapes of objects, not rename primitives&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;인터페이스는 &lt;a href=&quot;https://www.typescriptlang.org/play?#code/PTAEAkFMCdIcgM6gC4HcD2pIA8CGBbABwBtIl0AzUAKBFAFcEBLAOwHMUBPQs0XFgCahWyGBVwBjMrTDJMAshOhMARpD4tQ6FQCtIE5DWoixk9QEEWAeV37kARlABvaqDegAbrmL1IALlAEZGV2agBfampkbgtrWwMAJlAAXmdXdy8ff0Dg1jZwyLoAVWZ2Lh5QVHUJflAlSFxROsY5fFAWAmk6CnRoLGwmILzQQmV8JmQmDzI-SOiKgGV+CaYAL0gBBdyy1KCQ-Pn1AFFplgA5enw1PtSWS+vCsAAVAAtB4QQWOEMKBuYVUiVCYvYQsUTQcRSBDGMGmKSgAAa-VEgiQe2GLgKQA&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;오직 객체의 모양을 선언하는 데에만 사용되며, 기존의 원시 타입에 별칭을 부여하는 데에는 사용할 수는 없습니다&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Object type&lt;/code&gt; 을 확장한 경우&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;type Window2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;ts&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; number
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Animal&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Window2&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;An interface cannot extend a primitive type like ‘number’;
an interface can only extend named types and classes ❌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;X&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token builtin&quot;&gt;number&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;대부분의 경우 개인적 선호에 따라 인터페이스와 타입 중에서 선택할 수 있으며, 필요하다면 TypeScript가 다른 선택을 제안할 것이다. 잘 모르겠다면, 우선 &lt;code class=&quot;language-text&quot;&gt;interface&lt;/code&gt;를 사용하고 이후 문제가 발생하였을 때 &lt;code class=&quot;language-text&quot;&gt;type&lt;/code&gt;을 사용하면 된다.&lt;/p&gt;
&lt;h3 id=&quot;reference&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.typescriptlang.org/ko/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Documentation - Everyday Types&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[파일 시스템]]></title><description><![CDATA[파일 시스템에 대해서 배웁니다]]></description><link>https://dltlaos11.github.io/posts/os/filesystem</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/os/filesystem</guid><pubDate>Sat, 16 Sep 2023 20:35:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%BC%EA%B3%BC-%EB%94%94%EB%A0%89%ED%84%B0%EB%A6%AC&quot;&gt;파일과 디렉터리&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%BC&quot;&gt;파일&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%94%94%EB%A0%89%ED%84%B0%EB%A6%AC&quot;&gt;디렉터리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%BC-%EC%8B%9C%EC%8A%A4%ED%85%9C&quot;&gt;파일 시스템&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D%EA%B3%BC-%ED%8F%AC%EB%A7%A4%ED%8C%85&quot;&gt;파티셔닝과 포매팅&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%BC-%ED%95%A0%EB%8B%B9-%EB%B0%A9%EB%B2%95&quot;&gt;파일 할당 방법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%BC-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0&quot;&gt;파일 시스템 살펴보기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9C%A0%EB%8B%89%EC%8A%A4-%ED%8C%8C%EC%9D%BC-%EC%8B%9C%EC%8A%A4%ED%85%9C&quot;&gt;유닉스 파일 시스템&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;파일과-디렉터리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%BC%EA%B3%BC-%EB%94%94%EB%A0%89%ED%84%B0%EB%A6%AC&quot; aria-label=&quot;파일과 디렉터리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파일과 디렉터리&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;파일 시스템
&lt;ul&gt;
&lt;li&gt;파일과 디렉터리를 관리하는 운영체제 내의 프로그램&lt;/li&gt;
&lt;li&gt;파일과 디렉터리를 다루어 주는 프로그램&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;파일과 디럭터리
&lt;ul&gt;
&lt;li&gt;보조기억장치의 데이터 덩어리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;파일&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%BC&quot; aria-label=&quot;파일 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파일&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;보조기억장치에 저장된 관련 정보의 집합&lt;/li&gt;
&lt;li&gt;의미있고 관련있는 정보를 모은 논리적 단위&lt;/li&gt;
&lt;li&gt;파일을 이루는 정보
&lt;ul&gt;
&lt;li&gt;파일을 실행하기 위한 정보 + 부가 정보(= 속성, 메타 데이터)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;디렉터리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%94%94%EB%A0%89%ED%84%B0%EB%A6%AC&quot; aria-label=&quot;디렉터리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;디렉터리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;윈도우에서는 폴더&lt;/li&gt;
&lt;li&gt;1단계 디렉터리&lt;/li&gt;
&lt;li&gt;여러 계층으로 파일 및 폴더를 관리하는 &lt;Mark&gt;트리 구조 디렉터리&lt;/li&gt;
&lt;li&gt;최상위 디렉터리(루트 디렉터리, /, C:#), 서브 디렉터리&lt;/li&gt;
&lt;li&gt;경로
&lt;ul&gt;
&lt;li&gt;디렉터리를 이용해 파일/디렉터리의 위치, 나아가 이름까지 특정 지을 수 있는 정보&lt;/li&gt;
&lt;li&gt;절대경로: 루트 디렉터리에서 자기 자신까지 이르는 고유한 경로&lt;/li&gt;
&lt;li&gt;상대경로: 현재 디렉터리에서 자기 자신까지 이르는 경로&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;디렉터리/파일 연산을 위한 시스템 호출
&lt;ul&gt;
&lt;li&gt;생성&lt;/li&gt;
&lt;li&gt;삭제&lt;/li&gt;
&lt;li&gt;열기&lt;/li&gt;
&lt;li&gt;닫기&lt;/li&gt;
&lt;li&gt;읽기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;많은 운영체제에서 디렉터리를 그저 ‘&lt;Mark&gt;특별한 형태의 파일&lt;/Mark&gt;’로 간주&lt;/li&gt;
&lt;li&gt;디렉터리 엔트리
&lt;ul&gt;
&lt;li&gt;파일의 내부에는 &lt;Mark&gt;파일과 관련된 정보&lt;/Mark&gt;들이 있다면, 디렉터리의 내부에는 &lt;Mark&gt;해당 디렉터리에 담겨 있는 대상과 관련된 정보들&lt;/Mark&gt;이 표의 형태(테이블)로 담겨 있음&lt;/li&gt;
&lt;li&gt;각 엔트리(행)에 담기는 정보
&lt;ul&gt;
&lt;li&gt;디렉터리에 포함된 대상의 &lt;Mark&gt;이름&lt;/li&gt;
&lt;li&gt;그 대상이 보조기억장치 내에 &lt;Mark&gt;저장된 위치&lt;/Mark&gt;(를 유추할 수 있는 정보)&lt;/li&gt;
&lt;li&gt;파일 속성을 명시하는 경우도 있다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;파일-시스템&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%BC-%EC%8B%9C%EC%8A%A4%ED%85%9C&quot; aria-label=&quot;파일 시스템 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파일 시스템&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;파일 시스템이 파일과 디렉터리를 보조기억장치에 할당하고 접근하는 기법&lt;/li&gt;
&lt;li&gt;대표적인 파일 시스템의 종류(FAT 파일 시스템, 유닉스 파일 시스템) 학습&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;파티셔닝과-포매팅&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%ED%8B%B0%EC%85%94%EB%8B%9D%EA%B3%BC-%ED%8F%AC%EB%A7%A4%ED%8C%85&quot; aria-label=&quot;파티셔닝과 포매팅 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파티셔닝과 포매팅&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;파티셔닝과 포매팅을 해야 파일 시스템을 통해서 파일과 디렉터리에 접근 가능하며 파일 시스템 이용 가능&lt;/li&gt;
&lt;li&gt;한 번도 사용된 적이 없는 HDD/SSD는 파티셔닝, 포매팅 하기 전까지는 사용할 수 없음&lt;/li&gt;
&lt;li&gt;파티셔닝
&lt;ul&gt;
&lt;li&gt;저장 장치의 논리적인 영역을 구획하는 작업(&lt;Mark&gt;파티션&lt;/Mark&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;포매팅
&lt;ul&gt;
&lt;li&gt;파일 시스템을 설정&lt;/li&gt;
&lt;li&gt;어떤 방식으로 파일을 관리할지 결정, 새로운 데이터를 쓸 준비하는 작업&lt;/li&gt;
&lt;li&gt;파일 시스템은 포매팅할 때 결정&lt;/li&gt;
&lt;li&gt;파일 시스템에는 여러 종류가 있고, 파티션마다 다른 파일 시스템을 설정할 수 있음&lt;/li&gt;
&lt;li&gt;포매팅까지 완료하여 파일 시스템을 설정했다면 이제 파일과 디렉터리 생성이 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;파일-할당-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%BC-%ED%95%A0%EB%8B%B9-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;파일 할당 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파일 할당 방법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;포매팅까지 끝난 HDD에 파일을 저장하기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HDD의 가장 작은 저장 단위는 섹터이지만 보통 블록 단위로 읽고 쓴다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;운영체제는 파일/디렉터리를 블록 단위로 읽고 쓴다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;즉, 하나의 파일이 보조기억장치에 저장될 때에는 여러 블록에 걸쳐 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;파일을 보조기억장치에 할당하는 두 가지 방법: 연속 할당, 불연속 할당&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파일 할당
&lt;ul&gt;
&lt;li&gt;연속할당&lt;/li&gt;
&lt;li&gt;불연속 할당
&lt;ul&gt;
&lt;li&gt;연결 할당&lt;/li&gt;
&lt;li&gt;색인 할당&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;c.f. ) 오늘날 사용되는 방식은 불연속 할당&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;연속 할당&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이름 그대로 보조기억장치 내 연속적인 블록에 파일 할당&lt;/li&gt;
&lt;li&gt;연속된 파일에 접근하기 위해 파일의 첫 번째 블록 주소와 블록 단위의 길이만 알면 된다&lt;/li&gt;
&lt;li&gt;디렉터리 엔트리: 파일 이름 &amp;#x26; &lt;Mark&gt;첫 번째 블록 주소 &amp;#x26; 블록 단위 길이 명시&lt;/li&gt;
&lt;li&gt;구현이 단순하지만 &lt;Mark&gt;외부 단편화를 야기&lt;/Mark&gt;하는 단점&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;불연속 할당 - 연결 할당&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;각 블록의 일부에 다음 블록의 주소를 저장하여 각 블록이 다음 블록을 가리키는 형태로 할당&lt;/li&gt;
&lt;li&gt;파일을 이루는 데이터 블록을 연결 리스트로 관리&lt;/li&gt;
&lt;li&gt;불연속 할당의 일종: 파일이 여러 블록에 흩어져 저장되어도 무방&lt;/li&gt;
&lt;li&gt;디렉터리 엔트리: 파일 이름 &amp;#x26; 첫 번째 블록 주소 &amp;#x26; 블록 단위의 길이
&lt;ul&gt;
&lt;li&gt;첫 번째 블록 주소와 마지막 블록 주소를 기록 할 수도
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/8110c710-611e-4bed-8222-3cbdc0dbeb76&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;단점
&lt;ul&gt;
&lt;li&gt;반드시 첫 번째 블록부터 하나씩 읽어들여야 함 → 임의 위치의 접근 속도가 느림&lt;/li&gt;
&lt;li&gt;오류 발생시 해당 블록 이후 블록은 접근이 어렵다 → &lt;Mark&gt;FAT 해결&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;불연속 할당 - 색인 할당&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파일의 모든 블록 주소를 색인 블록이라는 하나의 블록에 모아 관리하는 방식&lt;/li&gt;
&lt;li&gt;파일 내 임의의 위치에 접근하기 용이&lt;/li&gt;
&lt;li&gt;디렉터리 엔트리: &lt;Mark&gt;파일 이름 &amp;#x26; 색인 블록 주소
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/c1c1283b-fb80-402b-8bf3-656eff482cf0&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;파일-시스템-살펴보기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%BC-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0&quot; aria-label=&quot;파일 시스템 살펴보기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파일 시스템 살펴보기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;FAT 파일 시스템
&lt;ul&gt;
&lt;li&gt;연결 할당 기반 파일 시스템&lt;/li&gt;
&lt;li&gt;연결 할당의 단점을 보완&lt;/li&gt;
&lt;li&gt;각 블록에 다음 블록 주소를 한데 모아 테이블(FAT: File Allocation Table)로 관리
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/4a608ddd-df08-41f1-8050-5deb30349d7f&quot; alt=&quot;image&quot;&gt;
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;FAT가 메모리에 캐시될 경우 느린 임의 접근 속도 개선 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HDD의 파티션을 FAT 파일 시스템으로 포매팅하면 다음과 같은 파티션이 설정(e.g. FAT 12 간략화)
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/840b06a1-e80c-4e6a-85f6-95cf2eedbb42&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;디렉터리 엔트리
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/793a90cf-376a-4580-9330-d0f5152b18fc&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;/home/minchul/a.sh를 읽는 과정 - FAT파일 시스템
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/36b25332-8e97-4b54-9544-37da66d883c9&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;유닉스-파일-시스템&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9C%A0%EB%8B%89%EC%8A%A4-%ED%8C%8C%EC%9D%BC-%EC%8B%9C%EC%8A%A4%ED%85%9C&quot; aria-label=&quot;유닉스 파일 시스템 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;유닉스 파일 시스템&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;색인 할당 기반 파일 시스템&lt;/li&gt;
&lt;li&gt;색인 블록 == i-node
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;파일의 속성 정보&lt;/Mark&gt;와 &lt;Mark&gt;15개의 블록 주소&lt;/Mark&gt; 저장 가능
&lt;ul&gt;
&lt;li&gt;15개 이상의 블록 주소를 저장하는 경우
&lt;ol&gt;
&lt;li&gt;블록 주소 중 12개에는 &lt;Mark&gt;직접 블록&lt;/Mark&gt; 주소 저장
&lt;ul&gt;
&lt;li&gt;직접 블록: 파일 데이터가 저장된 블록&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1️⃣으로 충분하지 않다면 13번째 주소에 &lt;Mark&gt;단일 간접 블록&lt;/Mark&gt; 주소 저장
&lt;ul&gt;
&lt;li&gt;단일 간접 블록: &lt;Mark&gt;파일 데이터&lt;/Mark&gt;(데이터블록)를 저장한 블록 주소가 저장된 블록&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2️⃣번으로 충분하지 않다면 14번째 주소에 &lt;Mark&gt;이중 간접 블록&lt;/Mark&gt; 주소 저장
&lt;ul&gt;
&lt;li&gt;이중 간접 블록: &lt;Mark&gt;단일 간접 블록들&lt;/Mark&gt;의 주소를 저장하는 블록&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3️⃣번으로 충분하지 않다면 15번째 주소에 &lt;Mark&gt;삼중 간접 블록&lt;/Mark&gt; 주소 저장
&lt;ul&gt;
&lt;li&gt;삼중 간접 블록: &lt;Mark&gt;이중 간접 블록들&lt;/Mark&gt;의 주소를 저장하는 블록&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;i-node를 사용하는 파일 시스템의 파티션
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/1d475280-498d-4dff-bfa1-3ac7f4368f0c&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;디렉터리 엔트리
&lt;ul&gt;
&lt;li&gt;i-node가 파일 시스템의 핵심
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/13b412a0-96a3-4fea-a74e-d2425bc8ec16&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;/home/minchul/a.sh를 유닉스 파일 시스템으로 읽는 과정
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/f8f9b9aa-737f-4059-9ec6-49af4a58d48c&quot; alt=&quot;image&quot;&gt;
&lt;ul&gt;
&lt;li&gt;i-node에 루트 i-node가 저장되어 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[메모리 할당 및 페이징]]></title><description><![CDATA[메모리 할당 및 페이징에 대해서 배웁니다]]></description><link>https://dltlaos11.github.io/posts/os/memory-allocation&amp;paging</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/os/memory-allocation&amp;paging</guid><pubDate>Thu, 14 Sep 2023 20:35:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%97%B0%EC%86%8D-%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%95%A0%EB%8B%B9&quot;&gt;연속 메모리 할당&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8A%A4%EC%99%80%ED%95%91&quot;&gt;스와핑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%95%A0%EB%8B%B9&quot;&gt;메모리 할당&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%99%B8%EB%B6%80-%EB%8B%A8%ED%8E%B8%ED%99%94&quot;&gt;외부 단편화&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%95%EC%9D%84-%ED%86%B5%ED%95%9C-%EA%B0%80%EC%83%81-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC&quot;&gt;페이징을 통한 가상 메모리 관리&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%95&quot;&gt;페이징&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%80-%ED%85%8C%EC%9D%B4%EB%B8%94&quot;&gt;페이지 테이블&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ptbr&quot;&gt;PTBR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tlb&quot;&gt;TLB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%95%EC%97%90%EC%84%9C%EC%9D%98-%EC%A3%BC%EC%86%8C-%EB%B3%80%ED%99%98&quot;&gt;페이징에서의 주소 변환&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%80-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%97%94%ED%8A%B8%EB%A6%AC&quot;&gt;페이지 테이블 엔트리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%90%EC%B2%B4%EC%99%80-%ED%94%84%EB%A0%88%EC%9E%84-%ED%95%A0%EB%8B%B9&quot;&gt;페이지 교체와 프레임 할당&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9A%94%EA%B5%AC-%ED%8E%98%EC%9D%B4%EC%A7%95&quot;&gt;요구 페이징&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%90%EC%B2%B4-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot;&gt;페이지 교체 알고리즘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8A%A4%EB%9E%98%EC%8B%B1%EA%B3%BC-%ED%94%84%EB%A0%88%EC%9E%84-%ED%95%A0%EB%8B%B9&quot;&gt;스래싱과 프레임 할당&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%95%EC%9D%98-%EC%9D%B4%EC%A0%90%EA%B3%BC-%EA%B3%84%EC%B8%B5%EC%A0%81-%ED%8E%98%EC%9D%B4%EC%A7%95&quot;&gt;페이징의 이점과 계층적 페이징&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%93%B0%EA%B8%B0-%EC%8B%9C-%EB%B3%B5%EC%82%AC&quot;&gt;쓰기 시 복사&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B3%84%EC%B8%B5%EC%A0%81-%ED%8E%98%EC%9D%B4%EC%A7%80&quot;&gt;계층적 페이지&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;연속-메모리-할당&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%B0%EC%86%8D-%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%95%A0%EB%8B%B9&quot; aria-label=&quot;연속 메모리 할당 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;연속 메모리 할당&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/32ac8300-3bb5-4504-9f7c-e9927ce6c95f&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;프로세스에 연속적인 메모리 공간을 할당&lt;/p&gt;
&lt;h3 id=&quot;스와핑&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%EC%99%80%ED%95%91&quot; aria-label=&quot;스와핑 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스와핑&lt;/h3&gt;
&lt;p&gt;현재 사용되지 않는 프로세스들을 보조기억장치의 일부 영역(&lt;Mark&gt;스왑 영역&lt;/Mark&gt;)으로 쫓아내고, 그렇게 생긴 빈 공간에 새 프로세스 적재
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/c96b4cf5-f5a0-4461-8db9-896656bb5b7a&quot; alt=&quot;image&quot;&gt;
→ 당장 사용할 수 있는 프로세스만 메모리(&lt;Mark&gt;스왑 인&lt;/Mark&gt;)에 배치 가능, 메모리에서 보조기억장치로 프로세스 이동(&lt;Mark&gt;스왑 아웃&lt;/Mark&gt;)&lt;/p&gt;
&lt;p&gt;스와핑을 통해 프로세스들이 요구하는 메모리 공간 크기가 메모리보다 큰 경우 적절한 메모리 적재가 가능
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/ae060b26-5f8d-40ba-a503-a8c6e9224584&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스왑 영역 크기 확인: free, top&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;메모리-할당&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC-%ED%95%A0%EB%8B%B9&quot; aria-label=&quot;메모리 할당 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리 할당&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로세스는 메모리의 빈 공간에 할당되어야 한다.
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;최초 적합, 최적 적합, 최악 적합 → &lt;Mark&gt;연속 메모리 할당 방식&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;연속적으로 프로세스를 메모리에 내에 배치할 떄 어떤 빈 공간에 어떻게 적재할지에 따라서 나뉜 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;최초 적합(first-fit)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;운영체제가 메모리 내의 빈 공간을 순서대로 검색하다 적재할 수 있는 공간을 발견하면 그 공간에 프로세스를 배치하는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;최적 적합(best-fit)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;운영체제가 빈 공간을 모두 검색해본 뒤, 적재 가능한 가장 작은 공간에 할당&lt;/li&gt;
&lt;li&gt;외부 단편화 발생 가능성 크다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;최악 적합(worst-fit)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;운영체제가 빈 공간을 모두 검색해본 뒤, 적재 가능한 가장 큰 공간에 할당&lt;/li&gt;
&lt;li&gt;외부 단편화 발생 가능성 적다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;외부-단편화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%99%B8%EB%B6%80-%EB%8B%A8%ED%8E%B8%ED%99%94&quot; aria-label=&quot;외부 단편화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;외부 단편화&lt;/h3&gt;
&lt;p&gt;프로세스를 연속적으로 할당하는 방식은 메모리를 효율적으로 사용하는 방법이 아니다.&lt;/p&gt;
&lt;p&gt;외부 단편화&lt;strong&gt;external fragmentation&lt;/strong&gt;라는 문제가 발생하기 때문&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;Mark&gt;프로세스들이 실행되고 종료되길 반복하며 메모리 사이에 빈 공간 발생&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;Mark&gt;외부 단편화&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로세스를 할당하기 어려울 만큼 &lt;Mark&gt;작은 메모리 공간들&lt;/Mark&gt;로 인해 &lt;Mark&gt;메모리가 낭비&lt;/Mark&gt;되는 현상&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;외부 단편화 해결&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;메모리 압축(compaction)
&lt;ul&gt;
&lt;li&gt;흩어져 있는 빈 공간들을 하나로 모으는 방식&lt;/li&gt;
&lt;li&gt;프로세스를 적당히 재배치시켜 흩어져 있는 작은 빈 공간들을 하나의 큰 빈 공간으로 만드는 방법&lt;/li&gt;
&lt;li&gt;부작용
&lt;ul&gt;
&lt;li&gt;빈 공간을 하나로 압축시키는 과정과, 프로세스들을 재배치하는 과정에서 오버헤드 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;가상 메모리 기법, 페이징&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;페이징을-통한-가상-메모리-관리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%95%EC%9D%84-%ED%86%B5%ED%95%9C-%EA%B0%80%EC%83%81-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC&quot; aria-label=&quot;페이징을 통한 가상 메모리 관리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;페이징을 통한 가상 메모리 관리&lt;/h2&gt;
&lt;p&gt;연속 메모리 할당의 두 가지 문제점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;외부 단편화&lt;/li&gt;
&lt;li&gt;물리 메모리보다 큰 프로세스 실행 불가&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;가상 메모리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실행하고자 하는 프로그램을 일부만 메모리에 적재하여 실제 물리 메모리크기보다 더 큰 프로세스를 실행할 수 있게 하는 기술&lt;/li&gt;
&lt;li&gt;페이징, 세그멘테이션&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;페이징&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%95&quot; aria-label=&quot;페이징 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;페이징&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;각기 다른 크기의 프로세스가 메모리에 연속적으로 할당되었기 때문에 외부 단편화  발생&lt;/li&gt;
&lt;li&gt;메모리에 적재되는 대상이 모두 일정한 크기를 갖고 있다면 외부 단편화 발생 ❌&lt;/li&gt;
&lt;li&gt;페이징은 프로세스를 일정한 크기로 자르고, 이를 메모리에 불연속적으로 할당하여 외부 단편화를 해결한다&lt;/li&gt;
&lt;li&gt;프로세스의 &lt;Mark&gt;논리 주소 공간을 페이지(page)&lt;/Mark&gt;라는 일정 단위로 자르고,&lt;/li&gt;
&lt;li&gt;메모리의 &lt;Mark&gt;물리 주소 공간을 프레임(frame)&lt;/Mark&gt;이라는 페이지와 동일한 일정한 단위로 자른 뒤&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;페이지를 프레임에 할당하는 가상 메모리 관리 기법
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/19e5c44a-42dd-49a2-aa28-2a49377c733d&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;페이징에서의 스와핑
&lt;ul&gt;
&lt;li&gt;프로세스 단위의 스왑 인, 스왑 아웃이 아닌 페이지 단위의 스왑 인(&lt;Mark&gt;페이지 인&lt;/Mark&gt;), 스왑 아웃(&lt;Mark&gt;페이지 아웃&lt;/Mark&gt;)&lt;/li&gt;
&lt;li&gt;메모리에 적재된 필요가 없는 페이지들은 보조기억장치로 스왑 아웃&lt;/li&gt;
&lt;li&gt;실행에 필요한 페이지들은 메모리로 스왑 인
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/9114af0d-6764-416c-a5c6-6e6b6fd833c9&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;프로세스를 실행하기 위해 모든 페이지가 적재될 필요 없다&lt;/li&gt;
&lt;li&gt;달리 말해 &lt;Mark&gt;물리 메모리보다 큰 프로세스도&lt;/Mark&gt; 실행 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;페이지-테이블&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%80-%ED%85%8C%EC%9D%B4%EB%B8%94&quot; aria-label=&quot;페이지 테이블 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;페이지 테이블&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로세스를 이루는 페이지가 어느 프레임에 적재되어 있는지 CPU가 일일이 알기란 어렵다&lt;/li&gt;
&lt;li&gt;프로세스가 메모리에 불연속적으로 배치되어 있다면 CPU 입장에서 이를 순차적으로 실행할 수 ❌&lt;/li&gt;
&lt;li&gt;CPU입장에서 ‘다음에 실행할 명령어 위치’를 찾기가 어려워짐&lt;/li&gt;
&lt;li&gt;(실제 메모리 내의 주소인) 물리 주소에 불연속적으로 배치되더라도 (CPU가 바라보는 주소인)논리 주소에는 연속적으로 배치되도록 하는 방법&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;페이지 번호와 프레임 번호를 짝지어 주는 일종의 이정표&lt;/li&gt;
&lt;li&gt;프로세스마다 페이지 테이블이 있다
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/021409ee-3f14-4a98-9b97-17231c42f184&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;물리적으로는 분산되어 저장되더라도 CPU 입장에서 바라본 논리 주소는 연속적으로 보임&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;CPU는 그저 논리 주소를 순차적으로 실행하면 될 뿐&lt;/li&gt;
&lt;li&gt;내부 단편화
&lt;ul&gt;
&lt;li&gt;페이지 크기가 10KB, 프로세스 크기 108KB일 경우&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;2KB: 내부 단편화&lt;/li&gt;
&lt;li&gt;하나의 페이지 크기보다 작은 크기로 발생&lt;/li&gt;
&lt;li&gt;세그멘테이션 해결 가능 → 외부단편화 발생
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/1cf3a22a-d0d8-4121-9ae9-bfb6faee9018&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ptbr&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ptbr&quot; aria-label=&quot;ptbr permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ptbr&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;프로세스마다 페이지 테이블이 있고, 각 페이지 테이블은 CPU내의 &lt;Mark&gt;프로세스 테이블 베이스 레지스터(PTBR)&lt;/Mark&gt;가 가리킨다(저장).
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/a71f5f98-a406-4fdb-b2ed-37b64d4374fb&quot; alt=&quot;image&quot;&gt;
프로세스 B 실행 시 PTBR은 프로세스 B의 페이지테이블 주소를 가리키고 이를 통해 CPU는 B의 페이지테이블에 접근해서 프로세스 B의 페이지가 각각 어떤 프레임에 할당되어 있는지 알 수 있다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그런데, 페이지 테이블이 메모리에 있다면 &lt;Mark&gt;메모리 접근 시간이 두배로 걸리는 문제가 생김&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;페이지 테이블(어떤 페이지가 어떤 프레임에 할당되어있는지 알 수 있다) 참조하기 위해 한번&lt;/li&gt;
&lt;li&gt;페이지 참조하기 위해 한번&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tlb&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#tlb&quot; aria-label=&quot;tlb permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;tlb&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CPU 곁에 페이지 테이블의 캐시 메모리&lt;/li&gt;
&lt;li&gt;페이지 테이블의 일부를 가져와 저장하여 불필요한 메모리 접근을 줄일 수 있다&lt;/li&gt;
&lt;li&gt;CPU가 접근하려는 논리 주소가 TLB에 있다면 → TLB 히트
&lt;ul&gt;
&lt;li&gt;메모리 접근 1번&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU가 접근하려는 논리 주소가 TLB에 없다면 → TLB 미스
&lt;ul&gt;
&lt;li&gt;메모리 접근 2번
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/cd7e653f-6dd9-4570-b7b1-057f8e16afdd&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;페이징에서의-주소-변환&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%95%EC%97%90%EC%84%9C%EC%9D%98-%EC%A3%BC%EC%86%8C-%EB%B3%80%ED%99%98&quot; aria-label=&quot;페이징에서의 주소 변환 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;페이징에서의 주소 변환&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;특정 주소에 접근할 때 필요한 정보
&lt;ul&gt;
&lt;li&gt;어떤 페이지/프레임에 접근하고 싶은지&lt;/li&gt;
&lt;li&gt;접근하려는 주소가 그 페이지 혹은 프레임으로부터 &lt;Mark&gt;얼마나 떨어져 있는지&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;페이징 시스템에서의 논리 주소
&lt;ul&gt;
&lt;li&gt;페이지 번호(page number)와 변위(offset)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;&amp;#x3C;페이지 번호, 변위&gt;&lt;/Mark&gt;로 이루어진 논리 주소는 페이지 테이블을 통해 &lt;Mark&gt;&amp;#x3C;프레임 번호, 변위&gt;&lt;/Mark&gt;로 이루어진 물리주소로 변환
&lt;ul&gt;
&lt;li&gt;논리주소에서의 변위와 물리주소에서의 변위는 &lt;Mark&gt;같다
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/36004ddb-27a5-4e54-88a9-2f1330ae98c7&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;페이지-테이블-엔트리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%80-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%97%94%ED%8A%B8%EB%A6%AC&quot; aria-label=&quot;페이지 테이블 엔트리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;페이지 테이블 엔트리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;페이지 테이블 각각의 행: 페이지 테이블 엔트리(PTE)
&lt;ul&gt;
&lt;li&gt;PTE에는 페이지 번호, 프레임 번호 등이 있으며 이외에도 여러가지 정보가 있음
&lt;ul&gt;
&lt;li&gt;유효비트
&lt;ul&gt;
&lt;li&gt;현재 해당 페이지에 접근 가능한지 여부
&lt;ul&gt;
&lt;li&gt;현재 페이지가 스왑 영역으로  스왑아웃 되있는지 아닌지, 메모리에 적재되어 있는지 아닌지를 나타낸다
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/0fc11f87-f1f4-4735-81ba-350858a873cd&quot; alt=&quot;image&quot;&gt;
&lt;ul&gt;
&lt;li&gt;유효 비트가 0인 페이지(메모리에 적재❌)에 접근하는 경우
&lt;ul&gt;
&lt;li&gt;페이지 폴트(page fault)라는 인터럽트 발생
&lt;ol&gt;
&lt;li&gt;CPU는 기존의 작업 내용을 백업&lt;/li&gt;
&lt;li&gt;페이지 폴트 처리 루틴(&lt;Mark&gt;인터럽트 서비스 루틴&lt;/Mark&gt;)을 실행&lt;/li&gt;
&lt;li&gt;페이지 처리 루틴은 원하는 페이지를 메모리로 가져온 뒤 유효 비트를 1로 변경&lt;/li&gt;
&lt;li&gt;페이지 폴트를 처리했다면 이제 CPU는 해당 페이지에 접근할 수 있음&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;보호 비트
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;페이지 보호 기능을 위해 존재하는 비트
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/275f2846-329a-43a7-bd5b-046d98310b91&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c.f. )프로세스의 코드 영역은 read-only영역, 읽기만 가능하므로 쓰기 권한&lt;/li&gt;
&lt;li&gt;페이지에 접근할 권한을 제한하여 페이지를 보호하는 비트&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;참조 비트
&lt;ul&gt;
&lt;li&gt;CPU가 이 페이지에 접근한 적이 있는지 여부
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/b2091785-2d8f-4154-974d-6a1f26287f63&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;수정 비트(=dirty bit)
&lt;ul&gt;
&lt;li&gt;CPU가 이 페이지에 데이터를 쓴 적이 있는지 여부
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/c6528fbf-7e16-4582-ac40-ca44915f7320&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;수정비트의 존재 이유 → 스와핑
&lt;ul&gt;
&lt;li&gt;페이지가 메모리에서 삭제될 때 보조기억장치의 쓰기작업을 해야 되는지 여부를 판단하기 위해서 존재&lt;/li&gt;
&lt;li&gt;만약 CPU 페이지의 내용을 변경했다면(쓰기) 해당 페이지는 스왑 아웃될 때 변경된 내용을 보조기억장치에도 반영해야(쓰기) 한다 → 수정 비트를 통해서 판단&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;페이지-교체와-프레임-할당&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%90%EC%B2%B4%EC%99%80-%ED%94%84%EB%A0%88%EC%9E%84-%ED%95%A0%EB%8B%B9&quot; aria-label=&quot;페이지 교체와 프레임 할당 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;페이지 교체와 프레임 할당&lt;/h2&gt;
&lt;p&gt;물리 메모리보다 큰 프로세스를 실행할 수 있지만, 그럼에도 &lt;Mark&gt;물리 메모리의 크기는 한정&lt;/Mark&gt;되어 있다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기존에 적재된 불필요한 페이지를 선별해 보조기억장치로 내보내야하고 → &lt;Mark&gt;페이지 교체 알고리즘&lt;/li&gt;
&lt;li&gt;프로세스들에게 적절한 수의 프레임을 할당해야 한다 → &lt;Mark&gt;프레임 할당&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;요구-페이징&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%94%EA%B5%AC-%ED%8E%98%EC%9D%B4%EC%A7%95&quot; aria-label=&quot;요구 페이징 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;요구 페이징&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;처음부터 모든 페이지를 적재하지 않고 필요한 페이지만을 메모리에 적재하는 기법&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;요구되는 페이지만&lt;/Mark&gt; 적재하는 기법
&lt;ol&gt;
&lt;li&gt;CPU가 특정 페이지에 접근하는 명령어를 실행&lt;/li&gt;
&lt;li&gt;해당 페이지가 현재 메모리에 있을 경우(&lt;Mark&gt;페이지 테이블 엔트리에 유효비트가 1일 경우&lt;/Mark&gt;) CPU는 페이지가 적재된 프레임에 접근&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;&lt;strong&gt;해당 페이지가 현재 메모리에 없을 경우&lt;/strong&gt;(유효비트:0)&lt;/Mark&gt; &lt;Mark&gt;페이지 폴트&lt;/Mark&gt;가 발생&lt;/li&gt;
&lt;li&gt;페이지 폴트 처리 루틴은 해당 페이지를 메모리로 적재하고 유효 비트를 1로 설정&lt;/li&gt;
&lt;li&gt;다시 1️⃣을 수행&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;c.f.) 어떤 프로세스를 실행하고자 할 때 어떤 페이지도 적재하지 않은채 실행하는 기법을 &lt;Mark&gt;순수 요구 페이징&lt;/Mark&gt;이라 함&lt;/li&gt;
&lt;li&gt;요구 페이징 시스템이 안정적으로 작동하려면 &lt;Mark&gt;페이지 교체&lt;/Mark&gt;와 &lt;Mark&gt;프레임 할당&lt;/Mark&gt;을 해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;페이지-교체-알고리즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%80-%EA%B5%90%EC%B2%B4-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;페이지 교체 알고리즘 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;페이지 교체 알고리즘&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;요구 페이징 기법으로 페이지들을 적재하다보면 언젠가 메모리가 가득 차게 된다&lt;/li&gt;
&lt;li&gt;당장 실행에 필요한 페이지를 적재하려면 적재된 페이지를 보조기억장치로 내보내야 하는데 &lt;Mark&gt;어떤 페이지를&lt;/Mark&gt; 내보내는 방법(알고리즘)이 &lt;Mark&gt;페이지 교체 알고리즘&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;페이지 폴트가 적은 알고리즘&lt;/Mark&gt;이 좋은 페이지 교체 알고리즘🔥
&lt;ul&gt;
&lt;li&gt;페이지 폴트가 발생하면 보조기억장치로부터 필요한 페이지를 다시 갖고와야 하므로 메모리에 적재된 페이지를 가지고 오는 것보다 느려지기 떄문 → 보조기억장치에 접근해야 해서 성능 저하
&lt;ul&gt;
&lt;li&gt;e.g. ) 어떤 페이지 교체 알고리즘을 통해서 페이지를 스왑아웃시켰더니 페이지 폴트가 자주 발생  == 보조기억장치로 내보내야 할 페이지를 잘 못 골랐다, 내보내면 안되는 페이지를 보조기억장치로 내보냄&lt;/li&gt;
&lt;li&gt;e.g. ) 어떤 페이지 교체 알고리즘을 통해 고른 페이지를 스왑아웃시켜도 페이지폴트가 자주 발생하지 않는다면 보조기억장치로 내보낼 페이지를 잘 골랐음을 의미&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;페이지 폴트 횟수
&lt;ul&gt;
&lt;li&gt;페이지 참조열(page reference string)
&lt;ul&gt;
&lt;li&gt;CPU가 참조하는 페이지들 중 연속된 페이지를 생략한 페이지열
&lt;ul&gt;
&lt;li&gt;e.g. )2 2 2 3 5 5 5 3 3 7 → 2 3 5 3 7&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FIFO 페이지 교체 알고리즘
&lt;ul&gt;
&lt;li&gt;가장 단순한 방식&lt;/li&gt;
&lt;li&gt;메모리에 가장 먼저 올라온 페이지부터 내보내는 방식
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/55266032-0a5d-4dc5-8d73-e6ce40ce3469&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;프로그램 실행 초기에 잠깐 실행될 페이지&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;프로그램 실행 내내 사용될 페이지&lt;/Mark&gt; ← 먼저 적재되었다고 내보내면 ❌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FIFO 페이지 교체 알고리즘 - 보완책
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;2차 기회(second-chance) 페이지 교체 알고리즘&lt;/li&gt;
&lt;li&gt;참조 비트 1: CPU가 한 번 참조한 적이 있는 페이지 → 바로 내보내지 않고 참조 비트를 0으로 초기화 후 적재된 시간을 현재 시간으로 설정하고 가장 최근에 적재된 페이지로 간주&lt;/li&gt;
&lt;li&gt;참조 비트 0: CPU가 참조한 적이 없는 페이지 →  가장 오랬동안 메모리에 머물렀음에도 CPU가 참조한 적이 없음을 의미하므로 내보냄
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/ba7d2b7f-6d8c-482b-9812-0c7ce3d39497&quot; alt=&quot;image&quot;&gt;
&lt;/br&gt;
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/255c0d2d-d4f7-46d9-b426-77679fb7f8aa&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;최적 페이지 교체 알고리즘
&lt;ul&gt;
&lt;li&gt;CPU에 의해 참조되는 횟수를 고려&lt;/li&gt;
&lt;li&gt;메모리에 오래 남아야 할 페이지는 &lt;Mark&gt;자주 사용될 페이지&lt;/li&gt;
&lt;li&gt;메모리에 없어도 될 페이지는 오랫동안 &lt;Mark&gt;사용되지 않을 페이지&lt;/li&gt;
&lt;li&gt;앞으로의 사용 빈도가 가장 낮은 페이지를 교체하는 알고리즘
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/b2af5866-39da-49fd-89e8-808ec778fc06&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;가장 낮은 페이 폴트율을 보장&lt;/Mark&gt;하는 페이지 교체 알고리즘&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;실제 구현이 어렵다&lt;/Mark&gt; → 예측할 수 ❌&lt;/li&gt;
&lt;li&gt;다른 페이지 교체 알고리즘 성능을 평가하기 위한 하한선으로 간주&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LRU(Least-Recently-Used) 페이지 교체 알고리즘
&lt;ul&gt;
&lt;li&gt;최적 페이지 교체 알고리즘: 가장 오래 사용되지 &lt;Mark&gt;않을&lt;/Mark&gt; 페이지 교체&lt;/li&gt;
&lt;li&gt;LRU 페이지 교체 알고리즘: 가장 오래 사용되지 &lt;Mark&gt;않은&lt;/Mark&gt; 페이지 교체
&lt;ul&gt;
&lt;li&gt;“최근에 사용되지 않은 페이지는 앞으로도 사용되지 않지 않을 것..”
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/71db495a-3ff0-42ee-81e9-8d1e8aabdece&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;기타 페이지 교체 알고리즘
&lt;ul&gt;
&lt;li&gt;이외에도 많은 페이지 교체 알고리즘이 존재(e.g. LRU 페이지 교체 알고리즘의 파생 알고리즘)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;페이지 교체 알고리즘이란 무엇인지&lt;/li&gt;
&lt;li&gt;페이지 교체는 왜 해야 하는지&lt;/li&gt;
&lt;li&gt;무엇이 좋은 페이지 교체 알고리즘인지&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;스래싱과-프레임-할당&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%EB%9E%98%EC%8B%B1%EA%B3%BC-%ED%94%84%EB%A0%88%EC%9E%84-%ED%95%A0%EB%8B%B9&quot; aria-label=&quot;스래싱과 프레임 할당 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스래싱과 프레임 할당&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;페이지 폴트가 자주 발생하는 이유&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;나쁜 페이지 교체 알고리즘을 사용해서&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;프로세스가 사용할 수 있는 프레임 자체가 적어서, 많으면 상대적으로 자주 일어나지 않을 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;스래싱&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로세스가 실행되는 시간보다 페이징에 더 많은 시간을 소요하여 성능(CPU 이용률)이 저해되는 문제
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/ead703e8-3ff7-43ef-aba6-c470835a53e2&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;동시 실행되는 프로세스의 수를 늘린다고 CPU 이용률이 높아지는 것이 아니다&lt;/li&gt;
&lt;li&gt;페이지 폴트가 너무 빈번하게 발생하기 때문에 막상 실행해야 하는 프로세스를 실행하지 못하는 상태
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/c33d9220-ad92-415d-b002-8ebde9e8f386&quot; alt=&quot;image&quot;&gt;
&lt;ul&gt;
&lt;li&gt;멀티프로그래밍의 정도: 메모리에 동시에 실행되는 프로세스의 수&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;각 프로세스가 필요로 하는 최소한의 프레임 수가 보장되지 않았기 때문&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;각 프로세스가 필요로 하는 최소한의 프레임 수를 파악하고 프로세스들에게 적절한 프레임을 할당해주어야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;운영체제의 프레임 할당 방식&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;균등 할당(equal allocation)
&lt;ul&gt;
&lt;li&gt;가장 단순한 할당 방식&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;모든 프로세스들에게 균등하게 프레임을 할당하는 방식 → 실행되는 프로세스들의 크기는 각기 다를텐데 동일한 프레임의 수를 할당하는 방식은 비합리적&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;비례 할당(proportional allocation)
&lt;ul&gt;
&lt;li&gt;프로세스의 크기를 고려&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;프로세스 크기에 비례하여 프레임 할당 방식&lt;/li&gt;
&lt;li&gt;크기가 큰 프로세스인데 막상 실행해보니 많은 프레임을 필요로 하지 않을 수도있고 크기가 작은 프로세스인데 막상 실행해보니 많은 프레임을 필요로 할 수 도 있음 → 결국 프로세스가 필요로 하는 프레임 수는 &lt;Mark&gt;실행해봐야 알 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;c.f.) 균등, 비례 할당은 프로세스의 실행 과정을 고려하지 않고 프로세스의 크기나 물리 메모리의 크기만 고려한 방식이라는 점에서  &lt;Mark&gt;정적 할당 방식&lt;/Mark&gt;이라 부르기도&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;작업 집합 모델(Working set Model)
&lt;ul&gt;
&lt;li&gt;프로세스가 실행하는 과정에서 배분할 프레임 결정&lt;/li&gt;
&lt;li&gt;스레싱이 발생하는 이유는 빈번한 페이지 교체 때문
&lt;ul&gt;
&lt;li&gt;그렇다면 &lt;Mark&gt;CPU가 특정 시간 동안 주로 참조한 페이지 개수만큼만 프레임을 할당&lt;/Mark&gt;하면 된다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;‘프로세스가 일정 기간 동안 참조한 페이지 집합’을 기억하여 빈번한 페이 교체를 방지하는 방식이 작업 집합 모델 기반의 프레임 할당 방식
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;작업 집합&lt;/Mark&gt;이란 “실행 중인 프로세스가 일정 시간 동안 참조한 페이지의 집합”을 의미&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;작업 집합을 구하려면
&lt;ol&gt;
&lt;li&gt;프로세스가 참조한 페이지&lt;/li&gt;
&lt;li&gt;시간 간격이 필요
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/f3f3ee0d-d97e-4bd6-9282-ed3541a9514d&quot; alt=&quot;image&quot;&gt;
최소 5개의 프레임이 t2라는 순간에 필요 → 작업 집합 모델 기반의 프레임 할당 방식&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;페이지 폴트 빈도
&lt;ul&gt;
&lt;li&gt;프로세스가 실행하는 과정에서 배분할 프레임 결정&lt;/li&gt;
&lt;li&gt;두 개의 가정에서 생겨난 아이디어
&lt;ol&gt;
&lt;li&gt;페이지 폴트율이 너무 높으면 그 프로세스는 너무 적은 프레임을 갖고 있다&lt;/li&gt;
&lt;li&gt;페이지 폴트율이 너무 낮으면 그 프로세스는 너무 많은 프레임을 갖고 있다
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/0bf93504-be6e-419d-add9-c6650cf4e5cd&quot; alt=&quot;image&quot;&gt;
&lt;ul&gt;
&lt;li&gt;페이지 폴트율에 상한선과 하한선을 정하고, 그 내부 범위 안에서만 프레임을 할당하는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;c.f.) 작업 집합 모델, 페이지 폴트 빈도: &lt;Mark&gt;동적 할당 방식&lt;/Mark&gt; → 프로세스가 실행하는 과정을 통해서 프레임을 할당하는 방식&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;페이징의-이점과-계층적-페이징&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8E%98%EC%9D%B4%EC%A7%95%EC%9D%98-%EC%9D%B4%EC%A0%90%EA%B3%BC-%EA%B3%84%EC%B8%B5%EC%A0%81-%ED%8E%98%EC%9D%B4%EC%A7%95&quot; aria-label=&quot;페이징의 이점과 계층적 페이징 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;페이징의 이점과 계층적 페이징&lt;/h2&gt;
&lt;h3 id=&quot;쓰기-시-복사&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%93%B0%EA%B8%B0-%EC%8B%9C-%EB%B3%B5%EC%82%AC&quot; aria-label=&quot;쓰기 시 복사 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;쓰기 시 복사&lt;/h3&gt;
&lt;p&gt;페이징 → 외부 단편화 해결 가능, 프로세스 간 페이지 공유 가능(&lt;strong&gt;쓰기 시 복사,&lt;/strong&gt; 공유 라이브러리)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이론적인 fork()
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;프로세스는 기본적으로 자원을 공유하지 ❌&lt;/p&gt;
&lt;p&gt;→ 부모 프로세스가 적재된 별도의 공간에 자식 프로세스가 통째로 복제되어 적재(&lt;Mark&gt;프로세스 생성 시간 지연, 메모리 낭비&lt;/Mark&gt;)
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/a5c20ba4-9dcb-4555-a251-752e4d9d2573&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;쓰기 시 복사
&lt;ul&gt;
&lt;li&gt;부모 프로세스와 동일한 자식 프로세스가 복제되어 생성되면 자식 프로세스는 부모 프로세스와 &lt;Mark&gt;동일한 프레임&lt;/Mark&gt;을 가리킴(&lt;Mark&gt;쓰기 작업 없다면 이 상태 유지&lt;/Mark&gt;)
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/d050921c-7473-43da-a0b1-b935e1100d53&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;프로세스 간 기본적으로는 자원을 공유 ❌ → &lt;Mark&gt;부모 프로세스/자식 프로세스 둘 중 하나가 페이지에 쓰기 작업 수행 시&lt;/Mark&gt; 해당 페이지는 별도의 공간으로 복제(&lt;Mark&gt;프로세스 생성 시간 절약, 메모리 절약&lt;/Mark&gt;)
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/8d2d048d-782a-4953-8db0-9802cc7a18d7&quot; alt=&quot;image&quot;&gt;
&lt;ul&gt;
&lt;li&gt;부모 프로세스와 자식 프로세스가 별도의 자원을 유지하면서 중복해서 메모리를 저장❌ (메모리 효율 &amp;#x26; 프로세스 간 자원 공유를 막는 방식 → &lt;Mark&gt;쓰기 시 복사&lt;/Mark&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;계층적-페이지&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B3%84%EC%B8%B5%EC%A0%81-%ED%8E%98%EC%9D%B4%EC%A7%80&quot; aria-label=&quot;계층적 페이지 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;계층적 페이지&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로세스 테이블의 크기는 생각보다 작지 않다&lt;/li&gt;
&lt;li&gt;프로세스를 이루는 모든 페이지 테이블 엔트리를 메모리에 두는 것은 큰 낭비&lt;/li&gt;
&lt;li&gt;프로세스를 이루는 모든 페이지 테이블 엔트리를 항상 메모리에 유지하지 않을 방법&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;페이지 테이블을 페이징&lt;/Mark&gt;하여 여러 단계의 페이지를 두는 방식
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/c1936155-89a9-4630-a5ae-0ea4703436b3&quot; alt=&quot;image&quot;&gt;
&lt;ul&gt;
&lt;li&gt;페이지 테이블을 여러 페이지로 쪼개고 이 페이지를 가리키는 페이지 테이블(Outer 페이지 테이블)을 두는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;모든 페이지 테이블을 항상 메모리에 있을 필요가 없어짐
&lt;ul&gt;
&lt;li&gt;CPU와 가장 가까이 위치한 페이지 테이블(Outer 페이지 테이블)은 항상 메모리에 유지&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;계층적 페이징을 이용하는 환경에서의 논리 주소
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;Mark&gt;바깥 페이지 번호 + 안쪽 페이지 번호 + 변위(2단계, 이상의 단계도 가능)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;바깥 페이지 번호를 통해 &lt;Mark&gt;페이지 테이블의 페이지&lt;/Mark&gt;를 찾기&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;페이지 테이블의 페이지&lt;/Mark&gt;를 통해 &lt;Mark&gt;프레임 번호&lt;/Mark&gt;를 찾고 변위를 더함으로서 물리 주소 얻기&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;c.f.) 계층이 많을 경우, 페이지 폴트(참조하고자 하는 페이지가 현재 메모리에 존재하지 않는 경우)가 발생했을 경우에 메모리를 많이 참조해야 하기 때문에 계층이 많다고 해서 반드시 좋은 것은 ❌&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[프로세스의 동기화와 교착상태]]></title><description><![CDATA[프로세스의 동기화와 교착상태에 대해서 배웁니다]]></description><link>https://dltlaos11.github.io/posts/os/process-synchronization-deadlock</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/os/process-synchronization-deadlock</guid><pubDate>Wed, 13 Sep 2023 20:35:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%8F%99%EA%B8%B0%ED%99%94&quot;&gt;프로세스 동기화&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8F%99%EA%B8%B0%ED%99%94%EC%9D%98-%EC%9D%98%EB%AF%B8&quot;&gt;동기화의 의미&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B3%B5%EC%9C%A0-%EC%9E%90%EC%9B%90%EA%B3%BC-%EC%9E%84%EA%B3%84-%EA%B5%AC%EC%97%AD&quot;&gt;공유 자원과 임계 구역&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8F%99%EA%B8%B0%ED%99%94-%EA%B8%B0%EB%B2%95&quot;&gt;동기화 기법&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AE%A4%ED%85%8D%EC%8A%A4-%EB%9D%BD&quot;&gt;뮤텍스 락&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4&quot;&gt;세마포어&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AA%A8%EB%8B%88%ED%84%B0&quot;&gt;모니터&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C&quot;&gt;교착 상태&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%90%EC%9B%90-%ED%95%A0%EB%8B%B9-%EA%B7%B8%EB%9E%98%ED%94%84&quot;&gt;자원 할당 그래프&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95&quot;&gt;교착 상태 해결 방법&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C-%EC%98%88%EB%B0%A9&quot;&gt;교착 상태 예방&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C-%ED%9A%8C%ED%94%BC&quot;&gt;교착 상태 회피&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C-%EA%B2%80%EC%B6%9C-%ED%9B%84-%ED%9A%8C%EB%B3%B5&quot;&gt;교착 상태 검출 후 회복&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A8%EC%83%81%ED%83%9C-%EB%AC%B4%EC%8B%9C&quot;&gt;교차상태 무시&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;프로세스-동기화&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%8F%99%EA%B8%B0%ED%99%94&quot; aria-label=&quot;프로세스 동기화 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스 동기화&lt;/h2&gt;
&lt;p&gt;동시다발적으로 실행되는 프로세스들은 서로 협력하며 영향을 주고 받는다, 이 과정에서 &lt;Mark&gt;동기화&lt;/Mark&gt;(=자원의 일관성)를 보장해야 한다&lt;/p&gt;
&lt;h3 id=&quot;동기화의-의미&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EA%B8%B0%ED%99%94%EC%9D%98-%EC%9D%98%EB%AF%B8&quot; aria-label=&quot;동기화의 의미 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동기화의 의미&lt;/h3&gt;
&lt;p&gt;공동의 목적을 위해 동시에 수행되는 프로세스&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e.g. 워드 프로세서 프로그램
&lt;ul&gt;
&lt;li&gt;맞춤법 검사 프로세스&lt;/li&gt;
&lt;li&gt;입력 내용을 화면에 출력하는 프로세스&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ 아무렇게나 실행하면 ❌ → 올바른 수행을 위해 프로세스들은 &lt;Mark&gt;동기화&lt;/Mark&gt;되어야 → 자원의 일관성&lt;/p&gt;
&lt;p&gt;프로세스들의 &lt;Mark&gt;수행 시기를 맞추는 것&lt;/p&gt;
&lt;p&gt;&lt;Mark&gt;실행 순서 제어&lt;/Mark&gt;: 프로세스를 올바른 순서대로 실행하기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실행 순서 제어를 위한 동기화: reader writer problem
&lt;ul&gt;
&lt;li&gt;Writer: Book.txt파일에 값을 저장하는 프로세스&lt;/li&gt;
&lt;li&gt;Reader: Book.txt파일에 저장된 값을 읽어들이는 프로세스&lt;/li&gt;
&lt;li&gt;Reader와 Writer 프로세스는 무작정 아무렇게나 실행 되면 ❌, &lt;Mark&gt;실행의 순서&lt;/Mark&gt; 떄문&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reader 프로세스는 ‘Book.txt 안에 값이 존재한다’는 &lt;Mark&gt;특정 조건이 만족되어야만&lt;/Mark&gt; 실행 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;Mark&gt;상호 배제&lt;/Mark&gt;: 동시에 접근해서는 안되는 자원에 하나의 프로세스만 접근하게 하기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;상호 배제를 위한 동기화: Bank account problem&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;한 번에 하나의 프로세스만 접근해야 하는 자원&lt;/Mark&gt;에 동시 접근을 피하기 위한 동기화
&lt;ul&gt;
&lt;li&gt;현재 계좌에 잔액: 10만원&lt;/li&gt;
&lt;li&gt;프로세스 A는 현재 잔액에 2만원을 추가하는 프로세스&lt;/li&gt;
&lt;li&gt;프로세스 B는 현재 잔액에 5만원을 추가하는 프로세스
&lt;ul&gt;
&lt;li&gt;동시에 실행된다면 아래와 같은 문제 발생
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/a3a2394b-8e6d-4e28-9c63-afa6021a6ea3&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;동기화 된 프로세스의 실행 예제
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/de95d343-0d22-46e3-a8dd-e090f2d2fa87&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;Mark&gt;Producer &amp;#x26; Consumer problem&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;물건을 계속해서 생산하는 생성자(producer, 프로세스 혹은 스레드)&lt;/li&gt;
&lt;li&gt;물건을 계속해서 생산하는 소비자(consumer, 프로세스 혹은 스레드)&lt;/li&gt;
&lt;li&gt;‘총합’ 변수 공유
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;총합&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;
생산자&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    버퍼에 데이터 삽입
    &lt;span class=&quot;token char&quot;&gt;&apos;총합&apos;&lt;/span&gt; 변수 &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; 증가
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

소비자&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    버퍼에 데이터 삽입
    &lt;span class=&quot;token char&quot;&gt;&apos;총합&apos;&lt;/span&gt; 변수 &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; 감소
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
동기화가 되지 않아 소비자&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 생산자를 &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;000&lt;/span&gt;번 실행하면 총합은 달라짐
동시에 접근해서는 안되는 자원에 동시에 접근해서 발생한 문제&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;c.f. ) 실행의 문맥을 갖는 모든 대상은 동기화 대상이기에 &lt;Mark&gt;스레드&lt;/Mark&gt; 또한 동기화 대상&lt;/p&gt;
&lt;h3 id=&quot;공유-자원과-임계-구역&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B3%B5%EC%9C%A0-%EC%9E%90%EC%9B%90%EA%B3%BC-%EC%9E%84%EA%B3%84-%EA%B5%AC%EC%97%AD&quot; aria-label=&quot;공유 자원과 임계 구역 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;공유 자원과 임계 구역&lt;/h3&gt;
&lt;p&gt;&lt;Mark&gt;공유 자원&lt;/Mark&gt;: 여러 프로세스 혹은 스레드가 공유하는 자원&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;전역 변수, 파일, 입출력장치, 보조기억장치, …&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;Mark&gt;임계 구역&lt;/Mark&gt;: 동시에 실행하면 문제가 발생하는 자원에 접근하는 &lt;Mark&gt;코드 영역&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;앞선 예시의 ‘총합’ 변수 …&lt;/li&gt;
&lt;li&gt;임계 구역에 진입하고자 하면 진입한 프로세스 이외에는 대기해야
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/90d59066-667f-4d46-bfe1-d360ad472959&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;임계 구역에 동시에 접근하면 자원의 일관성이 깨질 수 있다. 이를 &lt;Mark&gt;경쟁 조건&lt;/Mark&gt;(race condition)이라 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;운영체제가 임계구역 문제를 해결하는 세 가지 원칙🔥&lt;/p&gt;
&lt;p&gt;(상호 배제를 위한 동기화를 위한 세 가지 원칙)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;Mark&gt;상호 배제&lt;/Mark&gt;mutual exclusion&lt;/p&gt;
&lt;p&gt;한 프로세스가 임계구역에 진입했다면 다른 프로세스는 들어올 수 ❌&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;Mark&gt;진행&lt;/Mark&gt;progress&lt;/p&gt;
&lt;p&gt;임계 구역에 어떤 프로세스도 진입하지 않았다면 &lt;Mark&gt;진입하고자 하는 프로세스는 들어갈 수 있어야 한다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;Mark&gt;유한 대기&lt;/Mark&gt;bounded waiting&lt;/p&gt;
&lt;p&gt;한 프로세스가 임계 구역에 진입하고 싶다면 언젠가는 임계 구역에 들어올 수 있어야 한다(임계구역에 들어오기 위해 무한정 대기해서는 안 된다.)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;동기화-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8F%99%EA%B8%B0%ED%99%94-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;동기화 기법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;동기화 기법&lt;/h2&gt;
&lt;p&gt;동기화 기법 중 뮤텍스 락, 세마포어, 모니터에 대해서 알아보자&lt;/p&gt;
&lt;h3 id=&quot;뮤텍스-락&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AE%A4%ED%85%8D%EC%8A%A4-%EB%9D%BD&quot; aria-label=&quot;뮤텍스 락 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;뮤텍스 락&lt;/h3&gt;
&lt;p&gt;상호 배제를 위한 동기화 도구(자물쇠 역할), 뮤텍스 락&lt;/p&gt;
&lt;p&gt;뮤텍스 락의 단순한 형태&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;전역 변수 하나, 함수 두개&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;자물쇠 역할: 프로세스들이 공유하는 전역 변수 lock&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;임계 구역을 잠그는 역할: acquire 함수&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;임계 구역의 잠금을 해제하는 역할: release 함수&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token function&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lock &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; true&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 만약 임계 구역이 잠겨 있다면&lt;/span&gt;
            &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 임계 구역이 잠겨 있는지를 반복적으로 확인&lt;/span&gt;
    lock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; true&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 만약 임계 구역이 잠겨 있지 않다면 임계 구역 잠금&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    lock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; false&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 임계 구역 작업이 끝났으니 잠금 해제&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 자물쇠 잠겨 있는지 확인, 잠겨 있지 않다면 잠그고 들어가기&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// 임계구역  // 임계 구역에서의 작업 진행&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 자물쇠 반환&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;acuire 함수
&lt;ul&gt;
&lt;li&gt;프로세스가 임계 구역에 진입하기 전에 호출&lt;/li&gt;
&lt;li&gt;임계 구역이 잠겨 있다면
&lt;ul&gt;
&lt;li&gt;임계 구역이 열릴 때까지(lock이 false가 될 때까지) 임계 구역을 반복적으로 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;임계 구역이 열려있다면
&lt;ul&gt;
&lt;li&gt;임계 구역을 잠그기(lock를 true로 바꾸기)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;바쁜 대기(busy waiting)
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lock &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; true&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 만약 임계 구역이 잠겨 있다면&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 임계 구역이 잠겨 있는지를 반복적으로 확인&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;반복적으로 무한히 대기하면서 임계 구역이 잠겨 있는지를 반복적으로 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;release 함수
&lt;ul&gt;
&lt;li&gt;임계 구역에서의 작업이 끝나고 호출&lt;/li&gt;
&lt;li&gt;현재 잠긴 임계 구역을 열기(lock을 false로 바꾸기)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;세마포어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%B8%EB%A7%88%ED%8F%AC%EC%96%B4&quot; aria-label=&quot;세마포어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;세마포어&lt;/h3&gt;
&lt;p&gt;일반화된 방식의 동기화 도구&lt;/p&gt;
&lt;p&gt;&lt;Mark&gt;공유 자원이 여러 개 있는 경우에도&lt;/Mark&gt; 적용 가능&lt;/p&gt;
&lt;p&gt;세마포어의 종류(이진 세마포어, 카운팅 세마포어) 중 카운팅 세마포어&lt;/p&gt;
&lt;p&gt;임계구역 앞에서 멈춤 신호를 받으면 잠시 기다리기&lt;/p&gt;
&lt;p&gt;임계구역 앞에서 가도 좋다는 신호를 받으면 임계 구여 진입&lt;/p&gt;
&lt;p&gt;세마포어의 단순한 형태&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;전역 변수 하나, 함수 두개&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;임계 구역에 진입할 수 있는 프로세스의 개수(사용 가능한 공유 자원의 개수)를 나타내는 &lt;Mark&gt;전역 변수 S&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;임계구역에 들어가도 좋은지, 기다려야 할지를 알려주는 &lt;Mark&gt;wait함수&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;임계구역 앞에서 기다리는 프로세스에 ‘이제 가도 좋다’고 신호를 주는 &lt;Mark&gt;signal 함수&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// 임계구역&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;S &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 만일 임계 구역에 진입할 수 잇는 프로세스 개수가 0 이하라면&lt;/span&gt;
                    &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 사용할 수 있는 자원이 있는지 반복적으로 확인하고&lt;/span&gt;
        S&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 임계 구역에 진입할 수 있는 프로세스 개수가 하나 이상이면 S를 1감소시키고 임계 구역 진입&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Busy waiting
&lt;ul&gt;
&lt;li&gt;CPU 사이클 낭비 → 해결(&lt;Mark&gt;대기 상태, 준비 상태&lt;/Mark&gt;)&lt;/li&gt;
&lt;li&gt;프로세스 상태를 바꿈으로서 CPU 사이클 낭비를 방지
&lt;ul&gt;
&lt;li&gt;사용할 수 있는 자원이 없을 경우 &lt;Mark&gt;대기 상태&lt;/Mark&gt;로 만듦
&lt;ul&gt;
&lt;li&gt;해당 프로세스의 PCB를 대기 큐에 삽입&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사용할 수 있는 자원이 생겼을 경우 대기 큐의 프로세스를 &lt;Mark&gt;준비 상태&lt;/Mark&gt;로 만듦
&lt;ul&gt;
&lt;li&gt;해당 프로세스의 PCB를 대기 큐에서 꺼내 준비 큐에 삽입&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        S&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;S &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            add this process to Queue&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 해당 프로세스 PCB를 대기 큐에 삽입&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 대기 상태로 접어든다&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        S&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 임계 구역에서의 작업을 마친 뒤 S를 1증가&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;S &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            remove a proccess p from Queue &lt;span class=&quot;token comment&quot;&gt;// 대기 큐에 있는 프로세스 p를 제거&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;wakeup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 프로세스 p를 대기 상태에서 준비 상태로 만든다&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;세마포어를 활용한 실행 &lt;Mark&gt;순서 동기화&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;세마포어의 변수 S를 &lt;Mark&gt;0&lt;/Mark&gt;으로 두고&lt;/li&gt;
&lt;li&gt;먼저 실행할 프로세스 &lt;Mark&gt;뒤에 signal&lt;/Mark&gt; 함수,&lt;/li&gt;
&lt;li&gt;다음에 실행할 프로세스 &lt;Mark&gt;앞에 wait 함수를&lt;/Mark&gt; 붙이면 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;모니터&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%8B%88%ED%84%B0&quot; aria-label=&quot;모니터 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모니터&lt;/h3&gt;
&lt;p&gt;매번 임계구역 앞뒤로 &lt;code class=&quot;language-text&quot;&gt;wait()&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;signal()&lt;/code&gt;을 호출해야하는 번거로움&lt;/p&gt;
&lt;p&gt;사용자(개발자)가 다루기에 편한 동기화 도구&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;상호 배제를 위한 동기화&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인터페이스를 위한 큐&lt;/li&gt;
&lt;li&gt;공유자원에 접근하고자 하는 프로세스를 (인터페이스를 위한) 큐에 삽입&lt;/li&gt;
&lt;li&gt;큐에 삽입된 순서대로 (한 번에 하나의 프로세스만)  공유 자원 이용
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/5b1d247e-b64a-49a0-a17a-696c6867ad00&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;실행 순서 제어를 위한 동기화&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;조건 변수condition variable 이용
&lt;ul&gt;
&lt;li&gt;condition variable: 프로세스나 스레드의 실행 순서를 제어하기 위해 사용하는 특별한 변수
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/569bcfbd-c50a-4958-8e1e-e76c601201b8&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;조건변수.wait(): 대기 상태로 변경, 조건 변수에 대한 큐에 삽입&lt;/li&gt;
&lt;li&gt;조건변수.signal(): wait()으로 대기 상태로 접어든 조건 변수를 실행 상태로 변경&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;모니터 안에는 하나의 프로세스만이 있을 수 있다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wait()를 호출했던 프로세스는 signal()을 호출한 프로세스가 모니터를 떠난 뒤에 수행을 재게&lt;/li&gt;
&lt;li&gt;signal()을 호출한 프로세스의 실행을 일시 중단하고 자신이 실행된 뒤 다시 signal()을 호출한 프로세스의 수행을 재게&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;실행 순서 제어를 위한 동기화&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;특정 프로세스가 아직 실행될 조건이 되지 않았을 때에는 wait를 통해 실행 중단&lt;/li&gt;
&lt;li&gt;특정 프로세스가 실행될 조건이 충족되었을 때에는 signal을 통해 실행을 재게&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;교착-상태&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C&quot; aria-label=&quot;교착 상태 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;교착 상태&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;두 개 이상의 프로세스가 서로 상대방이 가지고 있는 자원을 기다리면서 무한정 대기하게 되는 상황&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;자원-할당-그래프&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EC%9B%90-%ED%95%A0%EB%8B%B9-%EA%B7%B8%EB%9E%98%ED%94%84&quot; aria-label=&quot;자원 할당 그래프 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자원 할당 그래프&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;교착 상태가 발생했을 때의 상황을 정확히 표현해보기&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;교착 상태 발생 조건 파악가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;어떤 프로세스가 어떤 자원을 할당 받아 사용 중인지 확인 가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;어떤 프로세스가 어떤 자원을 기다리고 있는지 확인 가능&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/ff0654e3-fbc6-47ea-b360-562b2b86fa31&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;웹 브라우저 프로세스는 자원 B를 할당받았고, 자원 A의 사용을 기다리고 있고&lt;/li&gt;
&lt;li&gt;게임 프로세스는 자원 A를 할당받았고, 자원 B의 사용을 기다리고 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;교착 상태가 일어난 그래프의 특징&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자원 할당 그래프가 &lt;Mark&gt;원의 형태&lt;/Mark&gt;를 띄고 있다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;교착 상태가 일어나는 근본적인 이유 이해하기&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;교착 상태가 발생할 조건&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;Mark&gt;상호 배제&lt;strong&gt;mutual exclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;한 프로세스가 사용하는 자원을 다른 프로세스가 사용할 수 없는 상태&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;Mark&gt;점유와 대기&lt;strong&gt;hold and wait&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;자원을 할당 받은 상태에서 다른 자원의 할당 받기를 기다리는 상태&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;Mark&gt;비선점&lt;strong&gt;Nonpreemption&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;어떤 프로세스도 다은 프로세스의 자원을 강제로 빼앗지 못하는 상태&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;Mark&gt;환형 대기&lt;strong&gt;circular wait&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;프로세스들이 원의 형태로 자원을 대기하는 상태&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;위 네 가지 조건 중 하나라도 만족하지 않으면 &lt;Mark&gt;교착상태가 발생하지 않음&lt;/p&gt;
&lt;p&gt;위 네 가지 조건을 모두 만족하면 &lt;Mark&gt;교착 상태가 발생할 수 있음&lt;/p&gt;
&lt;h2 id=&quot;교착-상태-해결-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;교착 상태 해결 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;교착 상태 해결 방법&lt;/h2&gt;
&lt;p&gt;교착 상태 해결&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;예방, 회피, 검출 후 회복&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;교착-상태-예방&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C-%EC%98%88%EB%B0%A9&quot; aria-label=&quot;교착 상태 예방 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;교착 상태 예방&lt;/h3&gt;
&lt;h3 id=&quot;&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#&quot; aria-label=&quot; permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;애초에 교착 상태가 발생하지 않도록 교착 상태 발생 조건(상호 배제, 점유와 대기, 비선점, 환형 대기) 중 하나를 없애버리기
&lt;ul&gt;
&lt;li&gt;상호 배제를 없애면?
&lt;ul&gt;
&lt;li&gt;모든 자원을 공유 → 이론적으론 가능, 현실적으론 ❌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;점유와 대기를 없애면?
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;특정 프로세스에 자원을 모두 할당하거나, 아예 할당하지 않는 방식으로 배분&lt;/p&gt;
&lt;p&gt;→ 자원의 활용룰 낮출 수 있는 방식&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;비선점 조건을 없애면?
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;선점이 가능한 자원(e.g. CPU)에 한해 효과적&lt;/p&gt;
&lt;p&gt;→ 모든 자원이 선점 가능한 것은 아니다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;환형 대기 조건을 없애면?
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;자원에 &lt;Mark&gt;번호&lt;/Mark&gt;를 붙이고 &lt;Mark&gt;오름차순&lt;/Mark&gt;으로 할당하면 원형 대기는 발생하지 않음&lt;/p&gt;
&lt;p&gt;→ 자원에 번호 붙이는 것은 어려운 작업, 어떤 자원에 어떤 번호를 붙이느냐에 따라 활용률이 달라진다&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;교착 상태가 발생하지 않음을 보장할 수 있으나 부작용이 따르는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;교착-상태-회피&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C-%ED%9A%8C%ED%94%BC&quot; aria-label=&quot;교착 상태 회피 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;교착 상태 회피&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;교착 상태를 &lt;Mark&gt;무분별한 자원 할당으로 인해 발생&lt;/Mark&gt;했다고 간주&lt;/li&gt;
&lt;li&gt;교착 상태가 발생하지 않을 만큼 &lt;Mark&gt;적절하게 할당&lt;/Mark&gt;하기&lt;/li&gt;
&lt;li&gt;배분할 수 있는 자원의 양을 고려하여 교착 상태가 발생하지 않을 만큼만 자원 배분&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;안전 순서열: 교착 상태 없이 안전하게 프로세스들에 자원을 할당할 수 있는 순서&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;안전 상태: 교착 상태 없이 모든 프로세스가 자원을 할당 받고 종료될 수 있는 상태&lt;/p&gt;
&lt;p&gt;안전 순서열이 있는 상태
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/38e5374d-fa0d-4200-b79c-5339298da6ea&quot; alt=&quot;image&quot;&gt;
P2 → P1 → P3이라는 안전 순서열대로 할당하면 모든 프로세스 실행 가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;불안전 상태: 교착 상태가 발생할 수도 있는 상태&lt;/p&gt;
&lt;p&gt;안전 순서열이 없는 상태
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/ec6d7c4f-d4cc-46f9-8675-45ebf2ffd283&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;안전 상태에서 안전 상태로 움직이는 경우에만 자원을 할당하는 방식&lt;/li&gt;
&lt;li&gt;항시 안전 상태를 유지하도록 자원을 할당하는 방식&lt;/li&gt;
&lt;li&gt;c.f. 은행원 알고리즘&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;교착-상태-검출-후-회복&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A9-%EC%83%81%ED%83%9C-%EA%B2%80%EC%B6%9C-%ED%9B%84-%ED%9A%8C%EB%B3%B5&quot; aria-label=&quot;교착 상태 검출 후 회복 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;교착 상태 검출 후 회복&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;교착 상태의 발생을 인정하고 사후에 조치하는 방식&lt;/li&gt;
&lt;li&gt;프로세스가 자원을 요구하면 일단 할당, 교착 상태가 검출되면 회복&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;선점을 통한 회복, 프로세스 강제 종료를 통한 회복
&lt;ul&gt;
&lt;li&gt;선점을 통한 회복
&lt;ul&gt;
&lt;li&gt;교착 상태가 해결될 때까지 한 프로세스씩 자원을 몰아주는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로세스 강제 종료를 통한 회복
&lt;ul&gt;
&lt;li&gt;교착 상태에 놓인 프로세스 모두 강제 종료 → 작업 내용을 잃을 위험&lt;/li&gt;
&lt;li&gt;교착 상태가 해결될 떄까지 한 프로세스씩 강제 종료 → 오버헤드&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;교차상태-무시&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%90%EC%B0%A8%EC%83%81%ED%83%9C-%EB%AC%B4%EC%8B%9C&quot; aria-label=&quot;교차상태 무시 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;교차상태 무시&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;타조 알고리즘&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;교착 상태가 발생할 수 있지만, 이를 무시하고 시스템을 계속 운영하는 방법. 이 방법은 교착 상태의 심각성이 낮거나 복구 비용이 더 큰 경우에 적용.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[프로세스와 스레드]]></title><description><![CDATA[프로세스와 스레드에 대해서 배웁니다]]></description><link>https://dltlaos11.github.io/posts/os/process-thread</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/os/process-thread</guid><pubDate>Tue, 12 Sep 2023 20:35:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%83%81%ED%83%9C%EC%99%80-%EA%B3%84%EC%B8%B5%EA%B5%AC%EC%A1%B0&quot;&gt;프로세스 상태와 계층구조&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%83%81%ED%83%9C&quot;&gt;프로세스 상태&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0&quot;&gt;프로세스 계층 구조&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%83%9D%EC%84%B1-%EA%B8%B0%EB%B2%95&quot;&gt;프로세스 생성 기법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rom-bios&quot;&gt;ROM-BIOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8A%A4%EB%A0%88%EB%93%9C&quot;&gt;스레드&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C&quot;&gt;프로세스와 스레드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A9%80%ED%8B%B0-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EB%A9%80%ED%8B%B0-%EC%8A%A4%EB%A0%88%EB%93%9C&quot;&gt;멀티 프로세스와 멀티 스레드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0&quot;&gt;프로세스 확인하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8A%A4%EB%A0%88%EB%93%9C-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0&quot;&gt;스레드 확인하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cpu-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%EA%B0%9C%EC%9A%94&quot;&gt;CPU 스케줄링 개요&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84&quot;&gt;프로세스 우선순위&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%ED%81%90&quot;&gt;스케줄링 큐&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%84%A0%EC%A0%90%ED%98%95%EA%B3%BC-%EB%B9%84%EC%84%A0%EC%A0%90%ED%98%95-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81&quot;&gt;선점형(Preemptive)과 비선점형 스케줄링(Non-preemptive)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cpu-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot;&gt;CPU 스케줄링 알고리즘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;프로세스-상태와-계층구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%83%81%ED%83%9C%EC%99%80-%EA%B3%84%EC%B8%B5%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;프로세스 상태와 계층구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스 상태와 계층구조&lt;/h2&gt;
&lt;h3 id=&quot;프로세스-상태&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%83%81%ED%83%9C&quot; aria-label=&quot;프로세스 상태 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스 상태&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;생성상태
&lt;ul&gt;
&lt;li&gt;이제 막 메모리에 적재되어 PCB를 할당 받은 상태&lt;/li&gt;
&lt;li&gt;준비가 완료되었다면 준비 상태로&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;준비상태
&lt;ul&gt;
&lt;li&gt;당장이라도 CPU를 할당 받아 실행할 수 있지만&lt;/li&gt;
&lt;li&gt;자신의 차례가 아니기에 기다리는 상태&lt;/li&gt;
&lt;li&gt;자신의 차례가 된다면 실행 상태로(=&lt;Mark&gt;디스패치&lt;/Mark&gt;(준비→실행))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;실행상태
&lt;ul&gt;
&lt;li&gt;CPU를 할당 받아 실행 중인 상태&lt;/li&gt;
&lt;li&gt;할당된 시간 모두 사용 시(&lt;Mark&gt;타이머 인터럽트&lt;/Mark&gt;(할당된 시간을 전부 사용했음을 나타내는 하드웨어 인터럽트) 발생 시) 준비 상태로&lt;/li&gt;
&lt;li&gt;실행 도중 입출력장치를 사용하면 입출력 작업이 끝날 때까지(&lt;Mark&gt;입출력 완료 인터럽트를 받을 때까지&lt;/Mark&gt;) 대기 상태로&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;대기상태(block state)
&lt;ul&gt;
&lt;li&gt;프로세스가 실행 도중 입출력장치를 사용하는 경우&lt;/li&gt;
&lt;li&gt;입출력 작업은 CPU에 비해 느리기에 이 경우 대기 상태로 접어듬&lt;/li&gt;
&lt;li&gt;입출력 작업이 끝나면 (입출력 완료 인터럽트를 받으면) 준비 상태로&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;종료상태
&lt;ul&gt;
&lt;li&gt;프로세스가 종료된 상태&lt;/li&gt;
&lt;li&gt;PCB, 프로세스의 메모리 영역 정리
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/eccf0a31-0da9-4dbb-83c2-c9b5983bc9e0&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;프로세스-계층-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;프로세스 계층 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스 계층 구조&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;프로세스 실행 도중(&lt;Mark&gt;시스템 호출을 통해&lt;/Mark&gt;) 다른 프로세스 생성 가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;새 프로세스를 생성한 프로세스: 부모 프로세스&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;부모 프로세스에 의해 생성된 프로세스: 자식 프로세스&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;부모 프로세스와 자식 프로세스는 &lt;Mark&gt;별개의 프로세스&lt;/Mark&gt;이므로 &lt;Mark&gt;각기 다른 PID&lt;/Mark&gt;를 가짐&lt;/li&gt;
&lt;li&gt;일부 운영체제에서는 자식 프로세스 &lt;Mark&gt;PCB에 부모 프로세스 PID(PPID)를 명시하기도&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ 프로세스의 게층적인 구조 형성&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;OS에서 데몬 프로세스는 백그라운드에서 실행되는 시스템 서비스나 작업을 수행하는 프로세스를 의미, 데몬 프로세스는 주로 리눅스와 유닉스 기반 운영 체제에서 많이 사용되며, Windows 운영 체제에서는 “서비스”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;데몬 프로세스는 처음으로 시작되는 프로세스의 자식 프로세스&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;최초의 프로세스 확인
pstree&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c.f.) Windows는 계층 구조 ❌&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;프로세스-생성-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%83%9D%EC%84%B1-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;프로세스 생성 기법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스 생성 기법&lt;/h3&gt;
&lt;p&gt;부모 프로세스는 &lt;Mark&gt;fork 시스템 호출&lt;/Mark&gt;을 통해 자신의 복사본을 자식 프로세스로 생성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;복사본(=자식 프로세스) 생성&lt;/li&gt;
&lt;li&gt;부모 프로세스의 자원 상속&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;자식 프로세스는 &lt;Mark&gt;exec 시스템 호출&lt;/Mark&gt;을 통해 &lt;Mark&gt;자신의 메모리 공간을 다른 프로그램으로 교체&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;메모리 공간을 새로운 프로그램으로 덮어쓰기&lt;/li&gt;
&lt;li&gt;코드/데이터 영역은 실행할 프로그램 내용으로 바뀌고 나머지 영역은 초기화
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;이때 부모 프로세스가 갖고있는 프로그램 내용은 자식 프로세스와 다르다.(별개)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;rom-bios&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#rom-bios&quot; aria-label=&quot;rom bios permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;rom bios&lt;/h3&gt;
&lt;p&gt;ROM-BIOS(Read-Only Memory - Basic Input/Output System)은 운영 체제나 프로세스와 직접적으로 관련된 프로세스가 아니다. ROM-BIOS는 컴퓨터의 부팅 및 기본 입출력 시스템을 관리하는 하드웨어와 소프트웨어의 조합&lt;/p&gt;
&lt;p&gt;ROM-BIOS는 컴퓨터의 기본 입력 및 출력 작업을 처리하며, 부팅 시 초기 하드웨어 설정 및 컴퓨터의 기본 동작을 관리. 이는 운영 체제의 부팅 전 단계에서 실행되며, 컴퓨터의 기본 하드웨어를 초기화하고 저장 장치에서 운영 체제를 로드. 이후 운영 체제가 로드되면 운영 체제가 컴퓨터 시스템을 제어하고 프로세스를 관리한다.&lt;/p&gt;
&lt;p&gt;따라서 ROM-BIOS는 운영 체제나 프로세스와는 &lt;Mark&gt;구분되는 역할&lt;/Mark&gt;을 한다. ROM-BIOS는 컴퓨터의 하드웨어와 초기 부팅 프로세스를 다루는데 사용되며, 운영 체제와 어플리케이션은 이후에 실행되는 소프트웨어.&lt;/p&gt;
&lt;h2 id=&quot;스레드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%EB%A0%88%EB%93%9C&quot; aria-label=&quot;스레드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스레드&lt;/h2&gt;
&lt;p&gt;스레드(thread)는 프로세스를 구성하는 실행 흐름의 단위&lt;/p&gt;
&lt;p&gt;하나의 프로세스는 하나 이상의 스레드를 가질 수 있다
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/3c4fb422-9e0c-496e-972e-2e78e2e8897b&quot; alt=&quot;image&quot;&gt;
한 프로세스를 여러개의 스레드로 동시에 실행&lt;/p&gt;
&lt;h3 id=&quot;프로세스와-스레드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C&quot; aria-label=&quot;프로세스와 스레드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스와 스레드&lt;/h3&gt;
&lt;p&gt;실행 흐름이 하나인 프로세스(단일 스레드 프로세스)&lt;/p&gt;
&lt;p&gt;실행 흐름이 여러 개인 프로세스(멀티 스레드 프로세스)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로세스를 이루는 여러 명령어 동시 실행 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;스레드의 구성 요소&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;스레드 ID, 프로그램 카운터를 비롯한 레지스터값, 스택 등&lt;/p&gt;
&lt;p&gt;&lt;Mark&gt;실행에 필요한 최소한의 정보
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/d3363057-79d0-4a5d-a4a3-dcc086240e2f&quot; alt=&quot;image&quot;&gt;
🔥&lt;Mark&gt;프로세스를 이루는 모든 스레드들은 그 프로세스의 자원을 공유할 수 있다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;리눅스&lt;/Mark&gt; 운영체제에서의 스레드
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;프로세스와 스레드는 “실행의 문맥(context of execution)”, 별개의 것으로 구분할 필요 ❌ - 리눅스 토발즈&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;task&lt;/Mark&gt;라는 용어로 대체하여 사용&lt;/li&gt;
&lt;li&gt;다른 운영체제에서는 아직까지 구분한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;c.f. ) 전통적인 관점의 전공서에서는 CPU한테 처리해야할 작업을 처리할 때 &lt;Mark&gt;프로세스 단위&lt;/Mark&gt;로 전달한다고 나와있지만, 실제로 확인해보면 CPU한테 처리해야 할 작업을 전달하거나 CPU를 할당받아 실행되는 단위는 프로세스가 아니라 &lt;Mark&gt;스레드 단위&lt;/Mark&gt;인 경우가 많다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;멀티-프로세스와-멀티-스레드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%80%ED%8B%B0-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EB%A9%80%ED%8B%B0-%EC%8A%A4%EB%A0%88%EB%93%9C&quot; aria-label=&quot;멀티 프로세스와 멀티 스레드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;멀티 프로세스와 멀티 스레드&lt;/h3&gt;
&lt;p&gt;동일한 작업을 수행하는 &lt;Mark&gt;단일 스레드 프로세스 여러 개&lt;/Mark&gt; 실행 vs 하나의 프로세스를 &lt;Mark&gt;여러 스레드&lt;/Mark&gt;로 실행
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/6d5006ba-9a51-4c5c-9017-6607c1a8498e&quot; alt=&quot;image&quot;&gt;
→ 프로세스끼리는 기본적으로 자원을 공유하지 않지만 스레드끼리는 같은 프로세스의 자원을 공유하는 차이점이 있다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;process
&lt;ul&gt;
&lt;li&gt;프로세스를 fork하면 코드/데이터/힙 영역 등 모든 자원이 복제되어 저장됨&lt;/li&gt;
&lt;li&gt;저장된 메모리 주소를 제외하면 모든 것이 동일한 프로세스 두 개가 통째로 메모리에 적재
&lt;ul&gt;
&lt;li&gt;c.f. ) 실제로는 fork 직후 같은 프로세스를 &lt;Mark&gt;통째로 메모리에 중복 저장하지 않으면서&lt;/Mark&gt; 동시에 프로세스끼리 자원을 공유하지 않는 방법이 있다. 이를 &lt;Mark&gt;쓰기 시 복사(copy on write)기법&lt;/Mark&gt;이라 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;thread
&lt;ul&gt;
&lt;li&gt;스레드들은 각기 다른 스레드 ID, (별도의 실행을 위해 꼭 필요한) 프로그램 카운터 값을 포함한 레지스터 값, 스택을 가질 뿐 프로세스가 가지는 자원을 공유
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/52f79880-1bda-4bac-abd2-e0e0c012361d&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로세스끼리는 자원을 공유하지 않는다 → 남남처럼 독립적으로 실행
&lt;ul&gt;
&lt;li&gt;프로세스 간에도 자원을 주고받을 수 있다 → 프로세스 간 통신(IPC)&lt;/li&gt;
&lt;li&gt;파일을 통한 프로세스 간 통신, 공유 메모리를 통한 프로세스 간 통신&lt;/li&gt;
&lt;li&gt;c.f.) socket, pipe …&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;스레드는 프로세스의 자원을 공유 → 비교적 멀티프로세스에 비해 협력과 통신에 유리
&lt;ul&gt;
&lt;li&gt;스레드 하나에 문제가 생기면 전체 프로세스에 문제가 생길 수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;프로세스-확인하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0&quot; aria-label=&quot;프로세스 확인하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스 확인하기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;vi test&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py
&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hello, os&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
python3 test&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py

&lt;span class=&quot;token comment&quot;&gt;// PID 확인&lt;/span&gt;
vi test&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py

import os
os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// PID 22662&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// -----------------------------------&lt;/span&gt;
from multiprocessing import Process
import os

def &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token char&quot;&gt;&apos;foo: child process: &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 자식 PID&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token char&quot;&gt;&apos;foo: paraent process: &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getppid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 자식의 부모 PID(22784)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; __name__ &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token char&quot;&gt;&apos;__main__&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token char&quot;&gt;&apos;paraent process: &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// paraent process:  22784&lt;/span&gt;
    child &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 자식 프로세스 생성&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// ------------------------------------&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// 멀티 process 생성&lt;/span&gt;
from multiprocessing import Process
import os

def &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token char&quot;&gt;&apos;foo: child process: &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token char&quot;&gt;&apos;foo: paraent process: &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getppid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; __name__ &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token char&quot;&gt;&apos;__main__&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token char&quot;&gt;&apos;paraent process: &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    child1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    child2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    child3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;스레드-확인하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%EB%A0%88%EB%93%9C-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0&quot; aria-label=&quot;스레드 확인하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스레드 확인하기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;vi test&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;py
&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;
import threading
import os

def &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token char&quot;&gt;&apos;foo: thread id is: &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; threading&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get_native_id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token char&quot;&gt;&apos;foo: my pid is: &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; 
		&lt;span class=&quot;token comment&quot;&gt;// 23222, thread는 process의 자원 공유&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; __name__ &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token char&quot;&gt;&apos;__main__&apos;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token char&quot;&gt;&apos;PID: &apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; os&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 23222&lt;/span&gt;
    thread1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; threading&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;cpu-스케줄링-개요&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cpu-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%EA%B0%9C%EC%9A%94&quot; aria-label=&quot;cpu 스케줄링 개요 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;cpu 스케줄링 개요&lt;/h2&gt;
&lt;p&gt;운영체제가 프로세스들에게 공정하고 합리적으로 CPU 자원을 배분하는 것&lt;/p&gt;
&lt;h3 id=&quot;프로세스-우선순위&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84&quot; aria-label=&quot;프로세스 우선순위 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스 우선순위&lt;/h3&gt;
&lt;p&gt;&lt;Mark&gt;입출력 작업&lt;/Mark&gt;이 많은 프로세스(=&lt;Mark&gt;I/O Bound Process&lt;/Mark&gt;, 입출력 집중 프로세스)의 우선순위는&lt;/p&gt;
&lt;p&gt;&lt;Mark&gt;CPU 작업&lt;/Mark&gt;이 많은 프로세스(=&lt;Mark&gt;CPU Bound Process&lt;/Mark&gt;, CPU 집중 프로세스)의 우선순위 보다 높다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I/O Bound Process는 대기 상태에서 더 많이 존재하기에 입출력 작업이 우선순위가 높아서 프로세스 먼저 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;스케줄링-큐&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%ED%81%90&quot; aria-label=&quot;스케줄링 큐 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스케줄링 큐&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;반드시 FIFO일 필요는 ❌&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;특정 자원(cpu,hdd, i/o devcie)을 이용하고 싶어하는 프로세스들을 큐에 삽입해서 자원을 이용하도록 만듦&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;준비 큐와 대기 큐
&lt;ul&gt;
&lt;li&gt;준비 큐: CPU를 이용하기 위해 기다리는 줄&lt;/li&gt;
&lt;li&gt;대기 큐: 입출력장치를 이용하기 위해 기다리는 줄
&lt;ul&gt;
&lt;li&gt;같은 장치를 요구한 프로세스들은 같은 큐에서 대기
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/dca033ec-bdaf-4241-a16c-d5189c97c5a9&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;먼저 큐에 삽입되더라도 반드시 먼저 실행되는 것은 아님, 우선순위가 높은 프로세스가 CPU를 이용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;선점형과-비선점형-스케줄링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%84%A0%EC%A0%90%ED%98%95%EA%B3%BC-%EB%B9%84%EC%84%A0%EC%A0%90%ED%98%95-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81&quot; aria-label=&quot;선점형과 비선점형 스케줄링 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;선점형과 비선점형 스케줄링&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;선점형 스케줄링(Preemptive)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;현재 CPU를 사용중인 프로세스로부터 CPU 자원을 빼앗아 다른 프로세스에 할당&lt;/li&gt;
&lt;li&gt;어떤 프로세스 하나가 CPU 자원 하나를 독점해서 쓸 수 없는 스케줄링 방식&lt;/li&gt;
&lt;li&gt;프로세스마다 정해진 시간만큼 CPU를 쓰게 하고 정해진 시간을 모두써서 타임아웃 인터럽트가 발생하면 OS가 다음 프로세스에게 CPU자원을 넘겨줌&lt;/li&gt;
&lt;li&gt;장점
&lt;ul&gt;
&lt;li&gt;어느 한 프로세스의 자원 독점을 막고 프로세스들에 골고루 자원을 배분 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;단점
&lt;ul&gt;
&lt;li&gt;그만큼 문맥 교환 과정에서 오버헤드가 발생할 수 있다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;비선점형 스케줄링((Non-preemptive))&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;현재 CPU를 사용중인 프로세스의 작업이 끝날 때까지 프로세스 기다리기&lt;/li&gt;
&lt;li&gt;어느 한 프로세스가 자원을 이용하고 있다면 종료되거나 대기상태에 접어들기 전까지 다른 끼어들 수 ❌&lt;/li&gt;
&lt;li&gt;장점
&lt;ul&gt;
&lt;li&gt;선점형 스케줄링에 비해 문맥 교환에서 발생하는 오버헤드가 적다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;단점
&lt;ul&gt;
&lt;li&gt;모든 프로세스가 골고루 자원을 이용하기 어렵다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;c.f. ) 문맥교환
다중 프로그래밍 및 다중 작업 환경에서 발생하는 프로세스 간의 전환 작업을 의미&lt;/p&gt;
&lt;p&gt;문맥 교환은 현재 실행 중인 프로세스의 상태(문맥)를 저장하고, 다음으로 실행될 프로세스의 상태를 복원하는 과정을 포함. 이를 통해 여러 프로세스가 CPU를 공유하며 실행될 수 있습니다.&lt;/p&gt;
&lt;p&gt;문맥 교환은 다음과 같은 상황에서 발생할 수 있음:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;인터럽트: 하드웨어 인터럽트(예: 타이머 인터럽트, 입출력 완료 인터럽트) 또는 소프트웨어 인터럽트(예: 시스템 호출)에 의해 발생.&lt;/li&gt;
&lt;li&gt;스케줄러 결정: &lt;Mark&gt;스케줄러는 실행 중인 프로세스 중 하나를 중단하고 다른 프로세스를 실행하도록 결정할 때 발생&lt;/Mark&gt;합니다. 이를 통해 다양한 프로세스 간에 CPU 시간을 공정하게 분배할 수 있음.&lt;/li&gt;
&lt;li&gt;입출력 작업: 입출력 작업을 수행하는 동안 CPU가 대기 상태에 들어가는 경우, 다른 프로세스로 전환하여 시스템 자원을 최대한 활용합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;문맥 교환은 오버헤드를 발생시킬 수 있으므로, 효율적으로 수행하기 위해 하드웨어와 운영 체제가 최적화되어야 한다. 문맥 교환은 다중 프로그래밍 환경에서 여러 작업이 동시에 실행될 수 있도록 해주는 핵심적인 운영 체제 기능 중 하나&lt;/p&gt;
&lt;h2 id=&quot;cpu-스케줄링-알고리즘&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cpu-%EC%8A%A4%EC%BC%80%EC%A4%84%EB%A7%81-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;cpu 스케줄링 알고리즘 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;cpu 스케줄링 알고리즘&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;선입 선처리 스케줄링&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;FCFS(First Come First Served) 스케줄링&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단순히 준비 큐에 삽입된 순서대로 처리하는 비선점 스케줄링&lt;/li&gt;
&lt;li&gt;먼저 CPU를 요청한 프로세스부터 CPU 할당&lt;/li&gt;
&lt;li&gt;단점: 프로세스들이 기다리는 시간이 매우 길어질 수 있다는 부작용(=호위 효과)
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/1c69dc56-e150-4184-a615-8404e80b1fd6&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;최단 작업 우선 스케줄링&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SJF(Shortest Job First) 스케줄링&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;호위 효과를 방지하려면&lt;/li&gt;
&lt;li&gt;CPU 사용이 긴 프로세스는 나중에 실행, CPU 사용 시간이 짧은 프로세스는 먼저 실행
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/d7e0510c-a903-43d5-b125-457e10ec52fc&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;CPU 사용 시간이 가장 짧은 프로세스부터 처리하는 스케줄링 방식
&lt;ul&gt;
&lt;li&gt;선점형 → 최소 잔여 시간 우선 스케줄링&lt;/li&gt;
&lt;li&gt;비선점형 → 주로&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;라운드 로빈 스케줄링&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RR(Round Robin) 스케줄링&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;선입 선처리 스케줄링 + &lt;Mark&gt;타임 슬라이스(time slice)&lt;/li&gt;
&lt;li&gt;타임 슬라이스: 각 프로세스가 CPU를 사용할 수 있는 정해진 시간
&lt;ul&gt;
&lt;li&gt;타임 슬라이스의 크기가 중요, 너무 커지면 FCFS와 유사해져서 호위 효과가 생길 수도&lt;/li&gt;
&lt;li&gt;너무 작으면 문맥교환이 발생하는 오버헤드 떄문에 CPU 부담이 너무 커짐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;정해진 타임 슬라이스만큼의 시간 동안 돌아가며 CPU를 이용하는 선점형 스케줄링
&lt;ul&gt;
&lt;li&gt;큐에 삽입된 프로세스들은 순서대로 CPU를 이용하되 정해진 시간만큼만 이용&lt;/li&gt;
&lt;li&gt;정해진 시간을 모두 사용하였음에도 아직 프로세스가 완료되지 않았다면 다시 큐의 맨 뒤에 삽입(문맥교환)
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/0a55b185-8bb3-4fef-9548-2c8a3a577545&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;최소 잔여 시간 우선 스케줄링&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SRT(Shortest Remaining Time) 스케줄링&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;최단 작업 우선 스케줄링 + 라운드 로빈 스케줄링&lt;/li&gt;
&lt;li&gt;최단 작업 우선 스케줄링: 작업 시간이 짧은 프로세스부터 처리하는 스케줄링 알고리즘&lt;/li&gt;
&lt;li&gt;라운드 로빈 스케줄링: 정해진 타임 슬라이스만큼 돌아가며 사용하는 스케줄링 알고리즘&lt;/li&gt;
&lt;li&gt;정해진 시간만큼 CPU를 이용하되, 다음으로 CPU를 사용할 프로세스로는 &lt;Mark&gt;남은 작업 시간이 가장 적은 프로세스 선택&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;우선순위 스케줄링&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로세스들에 우선순위를 부여하고, 우선순위 높은 프로세스부터 실행&lt;/li&gt;
&lt;li&gt;우선순위가 같은 프로세스들은 선입 선처리로 스케줄링&lt;/li&gt;
&lt;li&gt;최단 작업 우선 스케줄링, 최소 잔여 시간 스케줄링 C 우선 순위 스케줄링
&lt;ul&gt;
&lt;li&gt;최단작업우선스케줄링: 작업시간이 짧은 프로세스한테 높은 우선수위를 부여하는 방식&lt;/li&gt;
&lt;li&gt;최소잔여시간스케줄링: 남아있는 시간이 짧은 프로세스한테 높은 우선순위를 부여하는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;우선순위 스케줄링의 근본적인 문제점, &lt;Mark&gt;기아(starvation)현상&lt;/li&gt;
&lt;li&gt;우선순위 높은 프로세스만 주구장창 실행&lt;/li&gt;
&lt;li&gt;우선순위 낮은 프로세스는 (준비 큐에 먼저 삽입되었음에도 불구하고) 실행 연기&lt;/li&gt;
&lt;li&gt;기아현상을 방지하기 위한 기법: &lt;Mark&gt;에이징(aging)&lt;/li&gt;
&lt;li&gt;오랫동안 대기한 프로세스의 우선순위를 점차 높이는 방식&lt;/li&gt;
&lt;li&gt;대기 중인 프로세스의 우선순위를 점차 증가시키는 방법
&lt;ul&gt;
&lt;li&gt;우선순위가 낮아도 언젠가는 우선순위가 높아진다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다단계 큐 스케줄링&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multilevel queue 스케줄링&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;우선순위 스케줄링의 발전된 형태&lt;/li&gt;
&lt;li&gt;우선순위별로 준비 큐를 여러개 사용하는 스케줄링 방식
&lt;ul&gt;
&lt;li&gt;우선순위가 가장 높은 큐에 있는 프로세스를 먼저 처리&lt;/li&gt;
&lt;li&gt;우선순위가 가장 높은 큐가 비어 있으면 그 다음 우선순위 큐에 있는 프로세스 처리
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/dd6f2ca2-8b02-4995-81b3-62b5907b9989&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;큐 간의 이동이 불가, 우선순위가 낮은 프로세스는 우선순위가 낮은 큐에서 높은 큐로 이동 불가능하므로 &lt;Mark&gt;기아현상&lt;/Mark&gt; 발생 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;다단계 피드백 큐 스케줄링&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multilevel feedback queue 스케줄링&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다단계 큐 스케줄링의 발전된 형태&lt;/li&gt;
&lt;li&gt;큐 간의 이동이 가능한 다단계 큐 스케줄링&lt;/li&gt;
&lt;li&gt;다단계 큐 스케줄링에서는 기본적으로 큐 간의 이동 불가
&lt;ul&gt;
&lt;li&gt;우선순위 낮은 프로세스는 계속해서 실행 연기 우려&lt;/li&gt;
&lt;li&gt;기아 현상 발생 가능
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/d36488cf-0cbc-4c6c-92df-d25d060ca790&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;준비상태의 프로세스를 가장 높은 우선순위 큐에 삽입, 차례가 오면 CPU할당 받고 실행, 실행이 안끝났으면 다음 실행 우선순위 큐로 이동해서 실행.. 스케줄링의 반복. 타임 슬라이스 동안 실행을 다 못 끝내면 낮은 우선순위로 이동
&lt;ul&gt;
&lt;li&gt;자연스럽게 CPU 집중 프로세스의 우선순위는 상대적으로 낮아지고
&lt;ul&gt;
&lt;li&gt;다단계 피드백 큐에서도 에이징 기법 적용 가능 →  기아현상 해결 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;입출력 집중 프로세스의 우선순위는 상대적으로 높아짐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;즉, 어떤 프로세스의 CPU 시간이 길면 우선순위가 낮아지고 어떤 프로세스가 낮은 우선순위 큐에서 너무 오래 기다리면 우선순위를 높이는 방식&lt;/p&gt;
&lt;p&gt;일반적인 CPU 스케줄링 방식으로 알려져 있음&lt;/p&gt;</content:encoded></item><item><title><![CDATA[운영체제의 큰 그림]]></title><description><![CDATA[운영체제를 알아야 하는 이유에 대해서 배웁니다]]></description><link>https://dltlaos11.github.io/posts/os/purpose</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/os/purpose</guid><pubDate>Sat, 09 Sep 2023 20:35:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EB%A5%BC-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot;&gt;운영체제를 알아야 하는 이유&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%ED%81%B0-%EA%B7%B8%EB%A6%BC&quot;&gt;운영체제의 큰 그림&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BB%A4%EB%84%90&quot;&gt;커널&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9D%B4%EC%A4%91%EB%AA%A8%EB%93%9C%EC%99%80-%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%98%B8%EC%B6%9C&quot;&gt;이중모드와 시스템 호출&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%ED%95%B5%EC%8B%AC-%EC%84%9C%EB%B9%84%EC%8A%A4&quot;&gt;운영체제의 핵심 서비스&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%98%B8%EC%B6%9C-%EC%A7%81%EC%A0%91-%EA%B4%80%EC%B0%B0%ED%95%98%EA%B8%B0&quot;&gt;시스템 호출(system call)직접 관찰하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4&quot;&gt;프로세스&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%A7%81%EC%A0%91-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0&quot;&gt;프로세스 직접 확인하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%A0%9C%EC%96%B4-%EB%B8%94%EB%A1%9D&quot;&gt;프로세스 제어 블록&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AC%B8%EB%A7%A5-%EA%B5%90%ED%99%98&quot;&gt;문맥 교환(context switch)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%98%81%EC%97%AD&quot;&gt;프로세스의 메모리 영역&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;운영체제를-알아야-하는-이유&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EB%A5%BC-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;운영체제를 알아야 하는 이유 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;운영체제를 알아야 하는 이유&lt;/h2&gt;
&lt;p&gt;모든 프로그램은 실행을 위해 자원을 필요로 한다&lt;/p&gt;
&lt;h5 id=&quot;자원시스템-자원&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EC%9B%90%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%9E%90%EC%9B%90&quot; aria-label=&quot;자원시스템 자원 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자원/시스템 자원&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;프로그램 실행에 있어 마땅히 필요한 요소&lt;/li&gt;
&lt;li&gt;컴퓨터의 네 가지 핵심 부품 포함&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;운영체제는&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실행할 프로그램에 &lt;Mark&gt;필요한 자원을 할당&lt;/Mark&gt;하고&lt;/li&gt;
&lt;li&gt;프로그램이 올바르게 실행되도록 돕는&lt;/li&gt;
&lt;li&gt;특별한 프로그램&lt;/li&gt;
&lt;li&gt;프로그램이다 보니 메모리에 저장되어있어야 하니 운영체제는 특별한 프로그램이라&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;커널영역&lt;/Mark&gt;이라는 특별한 영역에 적재되는 프로그램&lt;/li&gt;
&lt;li&gt;일반 응용 프로그램은 &lt;Mark&gt;사용자 영역&lt;/Mark&gt;에 적재&lt;/li&gt;
&lt;li&gt;운영체제는 하드웨어와 응용프로그램 사이에 위치&lt;/li&gt;
&lt;li&gt;운영체제의 메모리 관리
&lt;ul&gt;
&lt;li&gt;메모리에 적당한 공간에 응용 프로그램 적재 및 삭제&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;운영체제의 CPU관리&lt;/li&gt;
&lt;li&gt;운영체제의 입출력장치 관리&lt;/li&gt;
&lt;li&gt;운영체제는 컴퓨터의 자원을 cpu,프로세스,파일시스템,메모리 관리를 통해 효율적으로 컴퓨터를 관리&lt;/li&gt;
&lt;li&gt;운영체제 덕분에 개발자는 하드웨어를 조작하는 코드를 직접 작성할 필요 ❌&lt;/li&gt;
&lt;li&gt;운영체제는 프로그램을 위한 프로그램, 프로그램을 만드는 개발자는 운영체제를 잘 알아야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;운영체제의-큰-그림&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%ED%81%B0-%EA%B7%B8%EB%A6%BC&quot; aria-label=&quot;운영체제의 큰 그림 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;운영체제의 큰 그림&lt;/h2&gt;
&lt;p&gt;운영체제는 현존하는 프로그램 중 규모가 가장 큰 프로그램 중 하나&lt;/p&gt;
&lt;h3 id=&quot;커널&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%A4%EB%84%90&quot; aria-label=&quot;커널 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;커널&lt;/h3&gt;
&lt;p&gt;운영체제의 핵심 서비스를 담당하는 부분을 커널(kernal)이라고 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;운영체제에는 속하지만 커널에는 속하지 않는 기능
&lt;ul&gt;
&lt;li&gt;유저 인터페이스(UI)&lt;/li&gt;
&lt;li&gt;사용자와 컴퓨터간의&lt;Mark&gt;통로&lt;/Mark&gt;일 뿐 운영체제의 핵심 기능(커널)은 아님&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;이중모드와-시스템-호출&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EC%A4%91%EB%AA%A8%EB%93%9C%EC%99%80-%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%98%B8%EC%B6%9C&quot; aria-label=&quot;이중모드와 시스템 호출 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이중모드와 시스템 호출&lt;/h3&gt;
&lt;p&gt;사용자가 실행하는 프로그램은 자원에 직접 접근하면 ❌ → 자원에 직접 접근은 위험&lt;/p&gt;
&lt;p&gt;오직 운영체제를 통해서만 접근하도록 하여 자원 보호&lt;/p&gt;
&lt;p&gt;응용 프로그램이 자원에 접근하려면 운영체제의 도움을 요청(=운영체제의 코드를 실행)해야&lt;/p&gt;
&lt;p&gt;응용 프로그램이 하드 디스크에 접근 → 운영체제(HDD 저장 코드 실행) → 하드웨어 저장&lt;/p&gt;
&lt;p&gt;이중 모드&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU가 명령어를 실행하는 모드를 크게 사용자 모드와 커널 모드로 구분하는 방식
&lt;ul&gt;
&lt;li&gt;사용자 모드
&lt;ul&gt;
&lt;li&gt;운영체제 서비스를 제공받을 수 없는 실행 모드&lt;/li&gt;
&lt;li&gt;커널 영역의 코드를 실행할 수 없는 실행 모드&lt;/li&gt;
&lt;li&gt;자원 접근 불가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;커널 모드
&lt;ul&gt;
&lt;li&gt;운영체제의 서비스를 제공받을 수 있는 실행 모드&lt;/li&gt;
&lt;li&gt;자원 접근을 비롯한 모든 명령어 실행 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;플래그 레지스터 속 &lt;Mark&gt;슈퍼바이저 플래그&lt;/Mark&gt; 존재
&lt;ul&gt;
&lt;li&gt;커널 모드로 실행 중인지, 사용자 모드로 실행 중인지를 나타냄&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;시스템 호출&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;커널 모드로 전환하여 실행하기 위해 호출&lt;/li&gt;
&lt;li&gt;일종의 소프트웨어 인터럽트
&lt;ul&gt;
&lt;li&gt;시스템 호출이 처리되는 방식은 인터럽트 처리 방식과 유사
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;시스템 호출&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;운영체제(운영체제 코드(⇒ 인터럽트 서비스 루틴) 실행)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;시스템 호출 복귀(사용자 모드로 복귀)
&lt;img width=&quot;612&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/066cacb7-d98e-42d9-9c06-71b19488c722&quot;&gt;&lt;/p&gt;
&lt;p&gt;시스템 호출은 운영체제 서비스를 제공받기 위해 커널 모드로 전환하는 방법&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
시스템 호출 예시
&lt;img width=&quot;626&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/1bf37051-1db9-41ba-bdd3-9983c1d7cca3&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;운영체제의-핵심-서비스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%ED%95%B5%EC%8B%AC-%EC%84%9C%EB%B9%84%EC%8A%A4&quot; aria-label=&quot;운영체제의 핵심 서비스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;운영체제의 핵심 서비스&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;프로세스 == 실행 중인 프로그램&lt;/li&gt;
&lt;li&gt;수 많은 프로세스들이 동시에 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;c.f. ) 모든 프로세스들은 메모리에 올라있어야 하는데 페이징, 스와핑을 통해서 메모리에 모든 프로세스들이 올라오진 ❌&lt;/p&gt;
&lt;p&gt;프로세스 관리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;동시다발적으로 생성/실행/삭제되는 다양한 프로세스를 일목요연하게 관리
&lt;ul&gt;
&lt;li&gt;프로세스와 스레드, 프로세스 동기화, 교착상태 해결&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;자원 접근 및 할당&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU(CPU 스케줄링: 어떤 프로세스를 먼저, 얼마나 오래 실행할지)&lt;/li&gt;
&lt;li&gt;메모리(페이징, 스와핑, …)&lt;/li&gt;
&lt;li&gt;입출력장치(하드웨어 인터럽트 서비스 루틴을 제공하는 운영체제)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;파일 시스템 관리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;관련된 정보를 파일이라는 단위로 저장 장치에 보관&lt;/li&gt;
&lt;li&gt;파일들을 묶어 폴더(디렉터리) 단위로 저장 장치에 보관&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;시스템-호출-직접-관찰하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%98%B8%EC%B6%9C-%EC%A7%81%EC%A0%91-%EA%B4%80%EC%B0%B0%ED%95%98%EA%B8%B0&quot; aria-label=&quot;시스템 호출 직접 관찰하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시스템 호출 직접 관찰하기&lt;/h2&gt;
&lt;p&gt;시스템 콜 → 소프트웨어 인터럽트 발생 → 운영체제(커널 영역에 적재되어 있는 운영체제 코드를 실행)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;ls &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;bin&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ls
ls &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; 어떤 프로그램을 실행하는 것&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;strace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;linux에서&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
strace &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;bin&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;ls &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; ls 하면서 실행되는 시스템 콜을 불러옴&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  

vi hello&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;c
&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hello\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
gcc hello&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;c
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out

sudo dtruss &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;out

복구 모드로 macOS 재부팅 후 터미널에서 아래와 같이 명령어를 입력한 뒤 재부팅
$ csrutil disable
그럼 정상적으로 dtruss 명령어가 동작하는 것을 볼 수 있다

참고로 아래의 메세지는 보안상의 이유로 &lt;span class=&quot;token function&quot;&gt;dtrace&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dtruss&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;실행이 의도적으로 안되게 보안 기능이 설정되어 있는 의미이고

dtrace&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; system integrity protection is on&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; some features will not be available
dtrace&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; failed to initialize dtrace&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; DTrace requires additional privileges

아래의 명령어는 해당 기능을 끄겠다는 의미

$ csrutil disable

그렇기에 다시 복구 모드에서 아래 명령어로 해당 기능을 켜주는 것을 권장

$ csrutil enable&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;프로세스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4&quot; aria-label=&quot;프로세스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스&lt;/h2&gt;
&lt;h3 id=&quot;프로세스-직접-확인하기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%A7%81%EC%A0%91-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0&quot; aria-label=&quot;프로세스 직접 확인하기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스 직접 확인하기&lt;/h3&gt;
&lt;p&gt;리눅스 → ps 명령어&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;포그라운드 프로세스(foreground process)
&lt;ul&gt;
&lt;li&gt;사용자가 볼 수 있는 공간에서 실행되는 프로세스&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;백그라운드 프로세스(background process)
&lt;ul&gt;
&lt;li&gt;사용자와 직접 상호작용이 가능한 백그라운드 프로세스&lt;/li&gt;
&lt;li&gt;사용자와 상호작용하지 않고 그저 정해진 일만 수행하는 프로세스→데몬,서비스&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;프로세스-제어-블록&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%A0%9C%EC%96%B4-%EB%B8%94%EB%A1%9D&quot; aria-label=&quot;프로세스 제어 블록 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스 제어 블록&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;모든 프로세스는 실행을 위해 CPU가 필요, 하지만 CPU 자원은 한정적&lt;/li&gt;
&lt;li&gt;프로세스들은 돌아가며 한정된 시간 만큼만 CPU 이용
&lt;ul&gt;
&lt;li&gt;자신의 차례에 정해진 시간만큼 CPU 이용&lt;/li&gt;
&lt;li&gt;타이머(=타임아웃) 인터럽트가 발생하면 차례 양보&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;빠르게 번갈아 수행되는 프로세스들을 관리해야&lt;/li&gt;
&lt;li&gt;이를 위해 사용하는 자료구조가 프로세스 제어 블록(이하 PCB)
&lt;ul&gt;
&lt;li&gt;프로세스 관련 정보를 저장하는 자료 구조&lt;/li&gt;
&lt;li&gt;마치 상품에 달린 태그와 같은 정보&lt;/li&gt;
&lt;li&gt;프로세스 생성 시 커널 영역에 생성, 종료 시 폐기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PCB에 담기는 대표적인 정보
&lt;ul&gt;
&lt;li&gt;프로세스 ID(=PID)
&lt;ul&gt;
&lt;li&gt;특정 프로세스를 식별하기 위해 부여하는 고유한 번호(학교의 학번, 회사의 사번)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;레지스터 값
&lt;ul&gt;
&lt;li&gt;프로세스는 자신의 실행 차례가 오면 이전까지 사용한 레지스터 중간 값을 모두 복원 → 실행 재게&lt;/li&gt;
&lt;li&gt;프로그램 카운터, 스택 포인터 …&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로세스 상태
&lt;ul&gt;
&lt;li&gt;입출력 장치를 사용하기 위해 기다리는 상태, CPU를 사용하기 위해 기다리는 상태, CPU 이용 중인 상태…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU 스케줄링 정보
&lt;ul&gt;
&lt;li&gt;프로세스가 언제, 어떤 순서로 CPU를 할당받을지에 대한 정보&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;메모리 정보
&lt;ul&gt;
&lt;li&gt;프로세스가 어느 주소에 저장되어 있는지에 대한 정보&lt;/li&gt;
&lt;li&gt;페이지 테이블 정보(’메모리 주소를 알 수 있는 정보가 담긴다’)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;사용한 파일과 입출력장치 정보
&lt;ul&gt;
&lt;li&gt;할당된 입출력장치, 사용 중인(열린) 파일 정보&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;운영체제는 &lt;Mark&gt;커널 영역에 적재된&lt;/Mark&gt; PCB를 보고 프로세스를 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;문맥-교환&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EB%A7%A5-%EA%B5%90%ED%99%98&quot; aria-label=&quot;문맥 교환 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문맥 교환&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;한 프로세스(e.g. 프로세스 A)에서 다른 프로세스(e.g. 프로세스 B)로 실행 순서가 바뀌면&lt;/li&gt;
&lt;li&gt;기존에 실행되던 프로세스 A는 지금까지의 &lt;Mark&gt;중간 정보&lt;/Mark&gt;를 백업
&lt;ul&gt;
&lt;li&gt;프로그램 카운터 등 각종 레지스터 값, 메모리 정보, 열었던 파일, 사용한 입출력장치 등&lt;/li&gt;
&lt;li&gt;이러한 중간 정보 == &lt;Mark&gt;문맥(context)&lt;/li&gt;
&lt;li&gt;다음 차례가 왔을 떄 실행을 재개하기 위한 정보&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;“실행 문맥을 백업해두면 언제든 해당 프로세스의 실행을 재개할 수 있다”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;뒤이어 실행할 프로세스 B의 문맥을 복구
&lt;ul&gt;
&lt;li&gt;자연스럽게 실행 중인 프로세스가 바뀜&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;이처럼 기존의 실행 중인 프로세스 문맥을 백업하고&lt;/li&gt;
&lt;li&gt;새로운 프로세스 실행을 위해 문맥을 복구하는 과정을&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;문맥  교환(context switching)&lt;/Mark&gt;이라 한다
&lt;ul&gt;
&lt;li&gt;여러 프로세스가 끊임없이 빠르게 번갈아 가며 실행되는 원리
&lt;img width=&quot;617&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/d77c2f16-43f4-41ba-80a4-83d343173b59&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;프로세스의-메모리-영역&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%98%81%EC%97%AD&quot; aria-label=&quot;프로세스의 메모리 영역 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로세스의 메모리 영역&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;크게 코드 영역(=텍스트 영역), 데이터 영역, 힙 영역, 스택영역으로 프로세스는 사용자 영역에 저장
&lt;ul&gt;
&lt;li&gt;코드 영역
&lt;ul&gt;
&lt;li&gt;실행할 수 있는 코드, 기계어로 이루어진 명령어 저장&lt;/li&gt;
&lt;li&gt;데이터가 아닌 CPU가 실행할 명령어가 담기기에 쓰기가 금지된 영역(read-only)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;데이터 영역
&lt;ul&gt;
&lt;li&gt;잠깐 썼다가 없앨 데이터가 아닌 프로그램이 실행되는 동안 유지할 데이터가 저장&lt;/li&gt;
&lt;li&gt;e.g. 전역 변수&lt;/li&gt;
&lt;li&gt;코드 영역과 데이터 영역의 크기는 고정적, &lt;Mark&gt;정적 할당 영역&lt;/Mark&gt;이라고도 한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;힙 영역
&lt;ul&gt;
&lt;li&gt;프로그램을 만드는 사용자, 즉 프로그래머가 직접 할당할 수 있는 저장공간&lt;/li&gt;
&lt;li&gt;힙 영역에 메모리 공간을 할당했다면 반환해줘야 하는데 프로그래밍 언어가 알아서 반환해주는 언어가 있는데 &lt;Mark&gt;가비지 컬렉션&lt;/Mark&gt;이라 함, 일부 프로그래밍 언어(C, ..)는 가비지 컬렉션 기능이 없기에 일일이 메모리 반환과정을 거쳐야 하는데 그렇지 않으면 힙 영역에 공간은 계속해서 메모리 공간을 차지하면서 메모리 낭비를 초래 → &lt;Mark&gt;메모리 누수(Memeory Leak)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;스택 영역
&lt;ul&gt;
&lt;li&gt;데이터가 일시적으로 저장되는 공간&lt;/li&gt;
&lt;li&gt;(데이터 영역에 담기는 값과는 달리) 잠깐 쓰다가 말 값들이 저장되는 공간&lt;/li&gt;
&lt;li&gt;e.g. 매개변수, 지역변수&lt;/li&gt;
&lt;li&gt;힙, 스택영역의 크기는 실행과정에서 가변적, &lt;Mark&gt;동적 할당 영역&lt;/Mark&gt;이라고 한다
&lt;ul&gt;
&lt;li&gt;일반적으로 힙 영역은 낮은 주소에서 높은 주소로 할당&lt;/li&gt;
&lt;li&gt;일반적으로 스택 영역은 높은 주소에 낮은 주소로 할당&lt;/li&gt;
&lt;li&gt;힙영역은 스택 영역과 반대되는 방향으로 주소 할당
&lt;ul&gt;
&lt;li&gt;메모리간 충돌 방지를 위함(거의 반대방향으로 할당)
&lt;img width=&quot;439&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/40bba153-2b55-4b99-bcec-777b702f2f6b&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;커널영역은 따로 존재, 메모리 안에서&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[다양한 입출력장치의 특성]]></title><description><![CDATA[다양한 입출력장치의 특성에 대해서 배웁니다.]]></description><link>https://dltlaos11.github.io/posts/computer-architecture/characteristics-of-various-io-devices</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/computer-architecture/characteristics-of-various-io-devices</guid><pubDate>Tue, 05 Sep 2023 20:35:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#raid%EC%9D%98-%EC%A0%95%EC%9D%98%EC%99%80-%EC%A2%85%EB%A5%98&quot;&gt;RAID의 정의와 종류&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#raid%EC%9D%98-%EC%A0%95%EC%9D%98&quot;&gt;RAID의 정의&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#raid&quot;&gt;RAID&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%A5%EC%B9%98-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EC%99%80-%EC%9E%A5%EC%B9%98-%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B2%84&quot;&gt;장치 컨트롤러와 장치 드라이버&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%85%EC%B6%9C%EB%A0%A5%EC%9E%A5%EC%B9%98-%EC%A0%95%EB%B3%B4-%EC%A3%BC%EA%B3%A0%EB%B0%9B%EA%B8%B0&quot;&gt;입출력장치 정보 주고받기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%A5%EC%B9%98-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EC%9D%98-%EC%97%AD%ED%95%A0&quot;&gt;장치 컨트롤러의 역할&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%A5%EC%B9%98-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EC%9D%98-%EA%B5%AC%EC%A1%B0&quot;&gt;장치 컨트롤러의 구조&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%A5%EC%B9%98-%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B2%84&quot;&gt;장치 드라이버&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8B%A4%EC%96%91%ED%95%9C-%EC%9E%85%EC%B6%9C%EB%A0%A5-%EB%B0%A9%EB%B2%95&quot;&gt;다양한 입출력 방법&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%9E%85%EC%B6%9C%EB%A0%A5&quot;&gt;프로그램 입출력&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%A7%B5-%EC%9E%85%EC%B6%9C%EB%A0%A5&quot;&gt;메모리 맵 입출력&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B3%A0%EB%A6%BD%ED%98%95-%EC%9E%85%EC%B6%9C%EB%A0%A5&quot;&gt;고립형 입출력&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8-%EA%B8%B0%EB%B0%98-%EC%9E%85%EC%B6%9C%EB%A0%A5&quot;&gt;인터럽트 기반 입출력&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#dma-%EC%9E%85%EC%B6%9C%EB%A0%A5&quot;&gt;DMA 입출력&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#dma&quot;&gt;DMA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#dma-%EC%9E%85%EC%B6%9C%EB%A0%A5-%EA%B3%BC%EC%A0%95&quot;&gt;DMA 입출력 과정&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EB%B2%84%EC%8A%A4&quot;&gt;입출력 버스&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;raid의-정의와-종류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#raid%EC%9D%98-%EC%A0%95%EC%9D%98%EC%99%80-%EC%A2%85%EB%A5%98&quot; aria-label=&quot;raid의 정의와 종류 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;raid의 정의와 종류&lt;/h2&gt;
&lt;p&gt;1TB 하드디스크 네 개로 RAID를 구성하면 4TB 하드 디스크 한 개의 성능과 안전성을 능가할 수 있다.&lt;/p&gt;
&lt;p&gt;HDD, SSD같은 저장장치를 관리할 때 안전하고 성능을 높이는 방식은 RAID만 있는 것은 아니다. 다양하다&lt;/p&gt;
&lt;h3 id=&quot;raid의-정의&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#raid%EC%9D%98-%EC%A0%95%EC%9D%98&quot; aria-label=&quot;raid의 정의 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;raid의 정의&lt;/h3&gt;
&lt;p&gt;Redundant(복수) Array of Independent Disks&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하드 디스크와 SSD로 사용하는 기술&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;데이터의 안전성 혹은 높은 성능&lt;/Mark&gt;을 위해 여러 물리적 보조기억장치를 마치 하나의 논리적 보조기억장치처럼 사용하는 기술&lt;/li&gt;
&lt;li&gt;1TB + 1TB + 1TB + 1TB = 4TB, 마치 4TB를 하나의 논리적인 장치로 사용하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RAID 레벨&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RAID를 구성하는 기술&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;RAID 0, RAID 1&lt;/Mark&gt;, RAID 2, RAID 3, &lt;Mark&gt;RAID 4, RAID 5, RAID 6&lt;/Mark&gt;&lt;/li&gt;
&lt;li&gt;그로부터 파생된(nested) RAID 10, RADI 50, …&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;RAID 0
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;데이터를 단순히 나누어 저장하는 구성 방식&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;각 하드 디스크는 번갈아 가며 데이터를 저장&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;저장되는 데이터가 하드 디스크 개수만큼 나뉘어 저장
&lt;img src=&quot;https://github.com/adamschwartz/magic-of-css/assets/74396128/90e44776-b2c1-4d97-a4a8-1193e6e66a3a&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스트라입(stripe): 마치 줄무늬처럼 분산되어 저장된 데이터&lt;/li&gt;
&lt;li&gt;스트라이핑(striping): 분산하여 저장하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;장점: 입출력 속도의 향상
&lt;img src=&quot;https://github.com/adamschwartz/magic-of-css/assets/74396128/8a14838c-16e0-4e83-882b-2501d9f4780f&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단점: 저장된 정보가 안전하지 않음&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/adamschwartz/magic-of-css/assets/74396128/89f37c1c-596b-4737-ae53-445a3f9d93cb&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RAID 1
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;미러링(mirroring): 복사본을 만드는 방식&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;데이터를 쓸 떄 원본과 복사본 두 군데에 씀(느린 쓰기 속도)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/adamschwartz/magic-of-css/assets/74396128/c456f444-4551-436e-8990-2a68a529c267&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;장점: &lt;Mark&gt;백업과 복구&lt;/Mark&gt;의 속도 향상, 안전하게 데이터를 저장할 수 있다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단점:  하드 디스크 개수가 한정되었을 떄 사용 가능한 용량이 적어짐&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;복사본이 만들어지는 용량만큼 사용 불가 → 많은 양의 하드 디스크가 필요 → 비용 증가&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RAID 4
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(RAID 1 처럼 완전한 복사본을 만드는 대신) &lt;Mark&gt;패리티 비트&lt;/Mark&gt;를 저장&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;패리티를 저장한 장치를 이용해 다른 장치들의 오류를 검출하고, 오류가 있다면 복구&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/adamschwartz/magic-of-css/assets/74396128/ded80437-ac70-425c-b397-b95411c749d4&quot; alt=&quot;image&quot;&gt;
c.f. ) 패리티 비트는 오류 검출만 가능할 뿐 오류 복구는 불가능, 하지만 RAID에서 사용되는 패리티  비트는 오류의 검출 뿐만이 아니라 오류 복구까지 가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RAID 1 보다 적은 하드 디스크로도 데이터를 안전하게 보관&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단점: 패리티 디스크의 병목(많은 I/O 떄문)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/adamschwartz/magic-of-css/assets/74396128/7f57c674-5530-4dd5-821b-cdf2295038e7&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RAID 5
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;패리티 정보를 분산하여 저장하는 방식&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/adamschwartz/magic-of-css/assets/74396128/6e86ba99-ee88-4371-b17a-1946651053e4&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RAID 4는 패리티를 저장한 장치를 따로 두는 방식&lt;/li&gt;
&lt;li&gt;RAID 5는 패리티를 분산하여 저장하는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RAID 6
&lt;ul&gt;
&lt;li&gt;두 종류의 패리티(오류를 검출하고 복구할 수 있는 수단)
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;RAID 5보다 안전, 쓰기는 RAID 5보다 느림&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/adamschwartz/magic-of-css/assets/74396128/a099229e-a69a-48c3-bf4c-01fce434b192&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;raid&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#raid&quot; aria-label=&quot;raid permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;raid&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;각 RAID 레벨마다 장단점이 있음&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;빠른 입출력 → RAID 0, 안전의 중요성 → RAID 1 or RAID 6&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;어떤 상황에서 무엇을 최우선으로 원하는지에 따라 최적의 RAID 레벨은 달라질 수 있음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;각 RAID 레벨의 대략적인 구성과 특징을 아는 것이 중요&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/adamschwartz/magic-of-css/assets/74396128/5edf0de5-ffb6-46b8-9216-bbf3574a1038&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실제로 RAID 구성 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;장치-컨트롤러와-장치-드라이버&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EC%B9%98-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EC%99%80-%EC%9E%A5%EC%B9%98-%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B2%84&quot; aria-label=&quot;장치 컨트롤러와 장치 드라이버 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장치 컨트롤러와 장치 드라이버&lt;/h2&gt;
&lt;p&gt;보조기억장치도 입출력장치의 한 종류로 볼 수 있음 → 메모리를 보조하는 입출력장치&lt;/p&gt;
&lt;h3 id=&quot;입출력장치-정보-주고받기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%85%EC%B6%9C%EB%A0%A5%EC%9E%A5%EC%B9%98-%EC%A0%95%EB%B3%B4-%EC%A3%BC%EA%B3%A0%EB%B0%9B%EA%B8%B0&quot; aria-label=&quot;입출력장치 정보 주고받기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;입출력장치 정보 주고받기&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;장치가 다양하면 장치마다 속도, 데이터 전송 형식 등도 다양하다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;→ 다양한 입출력장치와 정보를 주고받는 방식을 &lt;Mark&gt;규격화&lt;/Mark&gt;하기 어렵다&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;일반적으로 CPU와 메모리의 데이터 전송률은 높지만 입출력장치의 데이터 &lt;Mark&gt;전송률&lt;/Mark&gt;은 낮다.
&lt;ul&gt;
&lt;li&gt;전송률: 데이터를 얼마나 빨리 교환할 수 있는지를 나타내는 지표&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이런 이유로 입출력장치는 &lt;Mark&gt;장치 컨트롤러&lt;/Mark&gt;를 통해 컴퓨터와 정보를 주고받으며 연결된다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;입출력 제어기(I/O controller), 입출력 모듈(I/O module)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;장치-컨트롤러의-역할&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EC%B9%98-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EC%9D%98-%EC%97%AD%ED%95%A0&quot; aria-label=&quot;장치 컨트롤러의 역할 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장치 컨트롤러의 역할&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CPU와 입출력장치의 통신 중개
&lt;ul&gt;
&lt;li&gt;규격화의 어려움을 해결하는 일종의 번역기 역할 수행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;오류검출&lt;/li&gt;
&lt;li&gt;데이터 버퍼링
&lt;ul&gt;
&lt;li&gt;버퍼링
&lt;ul&gt;
&lt;li&gt;전송률이 높은 장치와 낮은 장치 사이에 주고받는 데이터를 &lt;Mark&gt;버퍼&lt;/Mark&gt;라는 임시저장 공간에 저장하여 전송률을 비슷하게 맞추는 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;장치-컨트롤러의-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EC%B9%98-%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC%EC%9D%98-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;장치 컨트롤러의 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장치 컨트롤러의 구조&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/adamschwartz/magic-of-css/assets/74396128/76e35b8a-d528-4dad-a453-4f136b107876&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;장치 컨트롤러는 입/출력 버스에 연결된다.&lt;/li&gt;
&lt;li&gt;주고받는 정보는 데이터, 상태, 제어로 나뉜다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;c.f. ) 상태 레지스터와 제어 레지스터는 하나의 레지스터(상태/제어 레지스터)로 사용되기도&lt;/p&gt;
&lt;p&gt;데이터 레지스터&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU와 입출력장치 사이에 주고받을 데이터가 담기는 레지스터(버퍼의 역할)&lt;/li&gt;
&lt;li&gt;RAM을 사용하기도&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;상태 레지스터&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;상태 정보 저장
&lt;ul&gt;
&lt;li&gt;입출력장치가 입출력 작업을 할 준비가 되었는지,&lt;/li&gt;
&lt;li&gt;입출력 작업이 완료되었는지&lt;/li&gt;
&lt;li&gt;입출력장치에 오류는 없는지 등의 상태 정보&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;제어 레지스터&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;입출력장치가 수행할 내용에 대한 제어 정보&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;장치-드라이버&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EC%B9%98-%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B2%84&quot; aria-label=&quot;장치 드라이버 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장치 드라이버&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;장치 컨트롤러의 동작을 감지하고 제어하는 프로그램&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;장치 드라이버를 인식하고 실행시키는 주체는 운영체제&lt;/p&gt;
&lt;p&gt;장치 컨트롤러가 입출력장치를 연결하기 위한 &lt;Mark&gt;하드웨어적 통로&lt;/Mark&gt;라면, 장치 드라이버는 입출력장치를 연결하기 위한 &lt;Mark&gt;소프트웨어적 통로&lt;/p&gt;
&lt;p&gt;→ 장치 드라이버가 설치되어 있지 않다면 해당 입출력장치를 사용할 수 없다&lt;/p&gt;
&lt;p&gt;컴퓨터가(&lt;Mark&gt;운영체제&lt;/Mark&gt;) 연결된 장치의 드라이버를 인식하고 실행할 수 있다면 컴퓨터 내부와 정보를 주고받을 수 있음&lt;/p&gt;
&lt;p&gt;반대로 컴퓨터(운영체제)가 장치 드라이버를 인식하거나 실행할 수 없다면 그 장치는 컴퓨터 내부와 정보를 주고받을 수없음&lt;/p&gt;
&lt;p&gt;&lt;Mark&gt;→ CPU는 연결된 장치 컨트롤러를 어떻게 제어하고 동작시키는지 모르기 떄문&lt;/p&gt;
&lt;h2 id=&quot;다양한-입출력-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%96%91%ED%95%9C-%EC%9E%85%EC%B6%9C%EB%A0%A5-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;다양한 입출력 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다양한 입출력 방법&lt;/h2&gt;
&lt;p&gt;세 가지 입출력 방식: 프로그램 입출력, 인터럽트 기반 입출력, DMA 입출력에 대해서 알아보자&lt;/p&gt;
&lt;h3 id=&quot;프로그램-입출력&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8-%EC%9E%85%EC%B6%9C%EB%A0%A5&quot; aria-label=&quot;프로그램 입출력 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로그램 입출력&lt;/h3&gt;
&lt;p&gt;프로그램 속 명령어로 입출력장치를 제어하는 방법&lt;/p&gt;
&lt;p&gt;입출력 명령어로써 장치 컨트롤러와 상호작용&lt;/p&gt;
&lt;p&gt;메모리에 저장된 정보를 하드 디스크에 &lt;Mark&gt;백업&lt;/Mark&gt;(=하드 디스크에 새로운 정보 &lt;Mark&gt;쓰기&lt;/Mark&gt;)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CPU는 하드 디스크 컨트롤러의&lt;Mark&gt;제어 레지스터&lt;/Mark&gt;에 &lt;Mark&gt;쓰기&lt;/Mark&gt; 명령 내보내기&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하드 디스크 컨트롤러는 하드 디스크 상태 확인 → 상태 레지스터에 &lt;Mark&gt;준비 완료&lt;/Mark&gt; 표시&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPU는 상태 레지스터를 주기적으로 읽어보며 하드 디스크의 준비 여부를 확인&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하드 디스크가 준비되었다면 백업할 메모리의 정보를 데이터 레지스터에 쓰기&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/adamschwartz/magic-of-css/assets/74396128/6264cddc-a243-4f5c-a3ee-8c9e543c5e75&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;아직 백업 작업(쓰기 작업)이 끝나지 않았다면 1번부터 반복, 쓰기가 끝났다면 작업 종료&lt;/p&gt;
&lt;p&gt;하드 디스크 컨트롤러의 특정 레지스터에 입출력 명령어로서 입출력 작업을 수행하는 것이 프로그램 입출력 방식&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;CPU가 장치 컨트롤러의 레지스터 값을 읽고 씀&lt;/Mark&gt;으로서 이루어진다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;프로그램 입출력 방식&lt;/p&gt;
&lt;p&gt;CPU가 장치 컨트롤러의 레지스터 값들을 알기 위한 방법으로 &lt;Mark&gt;메모리 맵 입출력 &amp;#x26; 고립형 입출력이 있다.&lt;/p&gt;
&lt;h4 id=&quot;메모리-맵-입출력&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%A7%B5-%EC%9E%85%EC%B6%9C%EB%A0%A5&quot; aria-label=&quot;메모리 맵 입출력 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리 맵 입출력&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;메모리&lt;/Mark&gt;에 접근하기 위한 주소공간과 &lt;Mark&gt;입출력장치&lt;/Mark&gt;에 접근하기 위한 주소 공간을 &lt;Mark&gt;하나의 주소 공간&lt;/Mark&gt;으로 간주하는 방법&lt;/li&gt;
&lt;li&gt;별도의 입출력 명령어가 필요하지 않은 방식, 메모리를 읽고 쓰는것과 동일하게 장치컨트롤러의 레지스터에 값을 읽고 쓸수 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/adamschwartz/magic-of-css/assets/74396128/b117970c-5594-407a-b5c0-14ea749d3ff7&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;516번지: 프린터 컨트롤러의 데이터 레지스터&lt;/li&gt;
&lt;li&gt;517번지: 프린터 컨트롤러의 상태 레지스터
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;‘517 번지를 읽어 들여라’ == 프린터 상태 읽기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;518번지: 하드 디스크 컨트롤러의 데이터 레지스터
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;‘518 번지에 a를 써라’ == 하드 디스크에 a 쓰기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;519번지: 하드 디스크 컨트롤러의 상태 레지스터&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;Mark&gt;메모리 접근 명령어 == 입출력장치 접근 명령어가 동일한 입출력 방식&lt;/p&gt;
&lt;h4 id=&quot;고립형-입출력&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B3%A0%EB%A6%BD%ED%98%95-%EC%9E%85%EC%B6%9C%EB%A0%A5&quot; aria-label=&quot;고립형 입출력 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;고립형 입출력&lt;/h4&gt;
&lt;p&gt;&lt;Mark&gt;메모리를 위한 주소 공간&lt;/Mark&gt;과 &lt;Mark&gt;입출력 장치를 위한 주소 공간&lt;/Mark&gt;을 &lt;Mark&gt;분리&lt;/Mark&gt;하는 방법&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/adamschwartz/magic-of-css/assets/74396128/667df59b-b7f9-42fb-973d-bc72348c7832&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;(입출력 읽기/쓰기 선을 활성화시키는) 입출력 전용 명령어 사용, 메모리 전용 명령어도 존재&lt;/p&gt;
&lt;p&gt;제어 버스에서 각기(&lt;Mark&gt;메모리, 입출력장치&lt;/Mark&gt;) 전용 명령어를 통해 읽기/쓰기 선이 활성화&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/adamschwartz/magic-of-css/assets/74396128/6f889f7e-efa1-4bca-a3ad-14d00e3c5861&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/adamschwartz/magic-of-css/assets/74396128/8dc172ee-da9f-42fa-a1d5-f0f5635c2651&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;인터럽트-기반-입출력&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8-%EA%B8%B0%EB%B0%98-%EC%9E%85%EC%B6%9C%EB%A0%A5&quot; aria-label=&quot;인터럽트 기반 입출력 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인터럽트 기반 입출력&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;(하드웨어) 인터럽트의 개념
&lt;ul&gt;
&lt;li&gt;CPU 사이클의 낭비를 막기 위해서 입출력장치가 일을 할 동안 다른 일을 할 수 있도록 일종의 알람 같은 개념&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;플래그 레지스터 속 인터럽트 비트
&lt;ul&gt;
&lt;li&gt;인터럽트 비트가 활성화되면 (하드웨어)인터럽트를 받아들일 수 있게되고 비활성화되면 받을 수 없게 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;인터럽트 요청 신호
&lt;ul&gt;
&lt;li&gt;입출력장치가 CPU에게 요청을 신호로서 보내는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;인터럽트 서비스 루틴
&lt;ul&gt;
&lt;li&gt;CPU가 인터럽트 요청 신호를 받으면 인터럽트를 처리하기 위한 특별한 프로그램&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;하드웨어 인터럽트는 장치 컨트롤러에 의해 발생 → CPU 사이클을 효율적으로 관리 가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;메모리에 저장된 정보를 하드 디스크에 백업할 때 CPU가 상태 레지스터를 주기적으로 읽지만(인터럽트와 반대되는 &lt;Mark&gt;폴링&lt;/Mark&gt;이라고도 함), 인터럽트는 요청 신호를 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;동시다발적인 인터럽트: 많은 입출력장치의 장치 컨트롤러들이 CPU에게 인터럽트 요청 신호를 보내는 상황을 생각해보자&lt;/p&gt;
&lt;p&gt;인터럽트 발생 순서대로 처리 가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;플래그 레지스터 속 인터럽트 비트를 비활성화한 채 인터럽트를 처리하는 경우
&lt;ul&gt;
&lt;li&gt;NMI - 순차적으로 처리가 불가능한 인터럽트가 있음(정전, 고장) critical한 인터럽트가 발생하는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;현실적으로 모든 인터럽트를 순차적으로 처리할 수 는 없다, 인터럽트 중에서도 &lt;Mark&gt;더 빨리 처리해야하는(우선순위가 높은) 인터럽트&lt;/Mark&gt;가 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/adamschwartz/magic-of-css/assets/74396128/da66f3b4-da51-494c-95c4-824fc752299e&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;→ NMI가 발생한 경우, 플래그 레지스터 속 인터럽트 비트를 활성화한 채 인터럽트를 처리하는 경우&lt;/p&gt;
&lt;p&gt;동시다발적인 인터럽트 - 우선순위를 반영한 인터럽트&lt;/p&gt;
&lt;p&gt;PIC(Programmable Interrupt Controller)&lt;/p&gt;
&lt;p&gt;장치 컨트롤러와 CPU사이에서 어떤 인터럽트를 가장 우선으로 처리해야 하는지를 판단해서 CPU가 처리해야 하는 인터럽트를 알려줌(&lt;Mark&gt;다중 인터럽트 가능&lt;/Mark&gt;)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;여러 장치 컨트롤러에 연결되어&lt;/li&gt;
&lt;li&gt;장치 컨트롤러의 하드웨어 인터럽트의 우선순위를 판단한 뒤&lt;/li&gt;
&lt;li&gt;CPU에게 지금 처리해야 하는 인터럽트가 무엇인지 판단하는 하드웨어&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;c.f. ) NMI 우선순위까지 판단하지는 않음&lt;/p&gt;
&lt;h3 id=&quot;dma-입출력&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dma-%EC%9E%85%EC%B6%9C%EB%A0%A5&quot; aria-label=&quot;dma 입출력 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;dma 입출력&lt;/h3&gt;
&lt;p&gt;프로그램 입출력, 인터럽트 기반 입출력의 공통점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;입력장치와 메모리 간의 데이터 이동은 &lt;Mark&gt;CPU가 주도하고&lt;/li&gt;
&lt;li&gt;이동하는 데이터도 반드시 &lt;Mark&gt;CPU를 거친다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ 하드디스크의 데이터를 메모리에 저장하는 경우, 하드디스크의 &lt;Mark&gt;데이터 레지스터에 저장되어 있는 값&lt;/Mark&gt;을 입출력장치를 읽어들임으로서 &lt;Mark&gt;CPU레지스터로 읽어들이게 되고&lt;/Mark&gt; 레지스터로 읽어들인 값을 메모리로 쓰게 된다.&lt;/p&gt;
&lt;p&gt;하드 디스크 백업과 같이 대용량 데이터를 이동한다면 CPU의 효율이 떨어짐 → DMA 등장&lt;/p&gt;
&lt;h4 id=&quot;dma&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dma&quot; aria-label=&quot;dma permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;dma&lt;/h4&gt;
&lt;p&gt;Direct Memory Access&lt;/p&gt;
&lt;p&gt;CPU를 거치지 않고 입출력장치와 메모리간의 데이터를 &lt;Mark&gt;직접적으로 주고받는&lt;/Mark&gt; 입출력 방식&lt;/p&gt;
&lt;h4 id=&quot;dma-입출력-과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#dma-%EC%9E%85%EC%B6%9C%EB%A0%A5-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;dma 입출력 과정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;dma 입출력 과정&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;CPU는 DMA 컨트롤러에 입출력 작업을 명령&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DMA 컨트롤러는 CPU대신 장치 컨트롤러와 상호작용하며 입출력 작업을 수행&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이 떄 HDD에 메모리 정보를 백업하는 입출력작업이라면 DMA 컨트롤러는 필요한 경우 메모리에 직접 접근&lt;/li&gt;
&lt;li&gt;DMA 컨트롤러가 메모리와 장치컨트롤러가 상호작용하면서 입출력하는 도중 CPU는 다른 작업이 가능&lt;/li&gt;
&lt;li&gt;메모리와 장치컨트롤러 사이의 주고받는 데이터는 CPU를 거치지 ❌&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;입출력 작업이 끝나면 DMA 컨트롤러는 인터럽트를 통해 CPU에 작업이 끝났음을 알림&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;결과적으로 CPU는 입출력 작업의 &lt;Mark&gt;시작과 끝&lt;/Mark&gt;만 관여&lt;/p&gt;
&lt;p&gt;앞선 예시의 DMA 과정에서 시스템 버스를 이용&lt;/p&gt;
&lt;p&gt;그런데, 시스템 버스는 공용 자원이기에 동시 사용이 불가능&lt;/p&gt;
&lt;p&gt;CPU가 시스템 버스를 사용할 때 DMA 컨트롤러는 시스템 버스를 사용할 수 없고, DMA컨트롤러는 시스템 버스를 사용할 떄는 CPU가 시스템 버스를 사용할 수 없음&lt;/p&gt;
&lt;p&gt;그래서 DMA 컨트롤러는&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU가 시스템 버스를 이용하지 않을 때마다 조금씩 시스템 버스 이용&lt;/li&gt;
&lt;li&gt;CPU가 일시적으로 시스템 버스를 이용하지 않도록 허락을 구하고 시스템 버스 이용&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/adamschwartz/magic-of-css/assets/74396128/84e516ac-a1dc-48ee-bdcb-8fb351b7d471&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;→ DMA 컨트롤러가 시스템 버스를 이런식으로 이용하는 양상을 Cycle Stealing이라고도 함&lt;/p&gt;
&lt;h3 id=&quot;입출력-버스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EB%B2%84%EC%8A%A4&quot; aria-label=&quot;입출력 버스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;입출력 버스&lt;/h3&gt;
&lt;p&gt;DMA 컨트롤러가 시스템 버스를 (불필요하게)이용하는 것을 방지하기 위해 등장&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/adamschwartz/magic-of-css/assets/74396128/d87c3126-394b-4894-9997-cb50ba708a60&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;e.g. PCI 버스, PCI express (PCIe) 버스와 입출력 장치를 연결짓는 슬롯&lt;/p&gt;
&lt;p&gt;슬롯 → 입출력 버스 → 시스템 버스&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/adamschwartz/magic-of-css/assets/74396128/50b5411e-9d17-4757-9de1-4fd77493e52a&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;더욱 발전한 DMA, 입출력 프로세서(입출력 채널) → 입출력장치가 입출력 전용 CPU, RAM을 탑재한 경우도 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[다양한 메모리의 특성]]></title><description><![CDATA[다양한 메모리의 특성에 대해서 배웁니다.]]></description><link>https://dltlaos11.github.io/posts/computer-architecture/characteristics-of-various-memories</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/computer-architecture/characteristics-of-various-memories</guid><pubDate>Mon, 04 Sep 2023 20:35:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ram%EC%9D%98-%ED%8A%B9%EC%84%B1%EA%B3%BC-%EC%A2%85%EB%A5%98&quot;&gt;RAM의 특성과 종류&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ram%EC%9D%98-%ED%8A%B9%EC%A7%95&quot;&gt;RAM의 특징&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ram%EC%9D%98-%EC%A2%85%EB%A5%98&quot;&gt;RAM의 종류&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%9D%98-%EC%A3%BC%EC%86%8C-%EA%B3%B5%EA%B0%84&quot;&gt;메모리의 주소 공간&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AC%BC%EB%A6%AC-%EC%A3%BC%EC%86%8C%EC%99%80-%EB%85%BC%EB%A6%AC-%EC%A3%BC%EC%86%8C&quot;&gt;물리 주소와 논리 주소&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AC%BC%EB%A6%AC-%EC%A3%BC%EC%86%8C&quot;&gt;물리 주소&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%85%BC%EB%A6%AC-%EC%A3%BC%EC%86%8C&quot;&gt;논리 주소&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AC%BC%EB%A6%AC-%EC%A3%BC%EC%86%8C%EC%99%80-%EB%85%BC%EB%A6%AC-%EC%A3%BC%EC%86%8C%EC%9D%98-%EB%B3%80%ED%99%98&quot;&gt;물리 주소와 논리 주소의 변환&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%B3%B4%ED%98%B8&quot;&gt;메모리 보호&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BA%90%EC%8B%9C-%EB%A9%94%EB%AA%A8%EB%A6%AC&quot;&gt;캐시 메모리&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A0%80%EC%9E%A5-%EC%9E%A5%EC%B9%98-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0&quot;&gt;저장 장치 계층 구조&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BA%90%EC%8B%9C-%EB%A9%94%EB%AA%A8%EB%A6%AC&quot;&gt;캐시 메모리&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%B0%B8%EC%A1%B0-%EC%A7%80%EC%97%AD%EC%84%B1%EC%9D%98-%EC%9B%90%EB%A6%AC&quot;&gt;참조 지역성의(Locality of Reference) 원리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8B%A4%EC%96%91%ED%95%9C-%EB%B3%B4%EC%A1%B0-%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98&quot;&gt;다양한 보조기억장치(하드디스크와 플래시 메모리)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%95%98%EB%93%9C-%EB%94%94%EC%8A%A4%ED%81%AC&quot;&gt;하드 디스크&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%95%98%EB%93%9C-%EB%94%94%EC%8A%A4%ED%81%AC%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%91%EA%B7%BC-%EA%B3%BC%EC%A0%95&quot;&gt;하드 디스크의 데이터 접근 과정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%8C%EB%9E%98%EC%8B%9C-%EB%A9%94%EB%AA%A8%EB%A6%AC&quot;&gt;플래시 메모리&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%8C%EB%9E%98%EC%8B%9C-%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%9D%98-%EC%A2%85%EB%A5%98&quot;&gt;플래시 메모리의 종류&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%94%8C%EB%9E%98%EC%8B%9C-%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%9D%98-%EC%A0%80%EC%9E%A5-%EB%8B%A8%EC%9C%84&quot;&gt;플래시 메모리의 저장 단위&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ram의-특성과-종류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ram%EC%9D%98-%ED%8A%B9%EC%84%B1%EA%B3%BC-%EC%A2%85%EB%A5%98&quot; aria-label=&quot;ram의 특성과 종류 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ram의 특성과 종류&lt;/h2&gt;
&lt;p&gt;주기억장치의 종류에는 크게 RAM과 ROM 두 가지가 있고, ‘메모리’라는 용어는 그 중 RAM을 지칭하는 경우가 많다.&lt;/p&gt;
&lt;h3 id=&quot;ram의-특징&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ram%EC%9D%98-%ED%8A%B9%EC%A7%95&quot; aria-label=&quot;ram의 특징 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ram의 특징&lt;/h3&gt;
&lt;p&gt;CPU ↔ RAM(실행할 대상(ex_명령어, 프로그램) → 휘발성 저장 장치) ↔ 보조기억장치(보관할 대상 → 비회발성 저장 장치)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RAM이 클수록 많은 프로그램들을 동시에 실행하는 데에 유리(ROM에서 많이 가져올 수 있으므로)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ram의-종류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#ram%EC%9D%98-%EC%A2%85%EB%A5%98&quot; aria-label=&quot;ram의 종류 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ram의 종류&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DRAM
&lt;ul&gt;
&lt;li&gt;Dynamic(=동적의) RAM
&lt;ul&gt;
&lt;li&gt;저장된 데이터가 &lt;Mark&gt;동적으로 사라지는&lt;/Mark&gt; RAM&lt;/li&gt;
&lt;li&gt;데이터 소멸을 막기 위해 주기적으로 재활성화 해야&lt;/li&gt;
&lt;li&gt;일반적으로 메모리로 사용되는 RAM
&lt;ul&gt;
&lt;li&gt;상대적으로 소비전력이 낮고 저렴하고 &lt;Mark&gt;집적도(=compact)&lt;/Mark&gt;가 높아 &lt;Mark&gt;대용량&lt;/Mark&gt;으로 설계하기 용이하기 때문&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SRAM
&lt;ul&gt;
&lt;li&gt;Static(=정적의) RAM&lt;/li&gt;
&lt;li&gt;저장된 데이터가 정적인(사라지지 않는) RAM&lt;/li&gt;
&lt;li&gt;DRAM보다 일반적으로 I/O가 더 빠름&lt;/li&gt;
&lt;li&gt;일반적으로 &lt;Mark&gt;캐시 메모리&lt;/Mark&gt;에서 사용되는 RAM
&lt;ul&gt;
&lt;li&gt;상대적으로 소비 전력이 높고 가격이 높고 집적도가 낮아 “&lt;Mark&gt;대용량으로 설계할 필요가 없으나&lt;/Mark&gt; 빨라야 하는 장치”에 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/4314c8be-11bb-4323-9793-002d65235ad1&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SDRAM
&lt;ul&gt;
&lt;li&gt;Synchronous(=동기화) DRAM
&lt;ul&gt;
&lt;li&gt;특별한(발전된 형태의) DRAM&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;클럭 신호와 동기화된 DRAM&lt;/li&gt;
&lt;li&gt;SDR(Signle Data Rate) SDRAM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DDR SDRAM
&lt;ul&gt;
&lt;li&gt;Double Data Rate SDRAM
&lt;ul&gt;
&lt;li&gt;특별한 (발전된 형태의)SDRAM&lt;/li&gt;
&lt;li&gt;최근 가장 대중적으로 사용하는 RAM&lt;/li&gt;
&lt;li&gt;대역폭(데이터를 주고받는 길의 너비, 2배)을 넓혀 속도를 빠르게 만든 SDRAM&lt;/li&gt;
&lt;li&gt;DDR2 SDRAM(4배), DDR3 SDRAM(8배), &lt;Mark&gt;DDR4 SDRAM(16배) 가장 대중적&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;메모리의-주소-공간&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%9D%98-%EC%A3%BC%EC%86%8C-%EA%B3%B5%EA%B0%84&quot; aria-label=&quot;메모리의 주소 공간 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리의 주소 공간&lt;/h2&gt;
&lt;p&gt;논리 주소와 물리 주소로 주소 공간을 나눈 이유와 논리 주소 → 물리 주소로 변환하는 방법에 대해 알아보자&lt;/p&gt;
&lt;h3 id=&quot;물리-주소와-논리-주소&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AC%BC%EB%A6%AC-%EC%A3%BC%EC%86%8C%EC%99%80-%EB%85%BC%EB%A6%AC-%EC%A3%BC%EC%86%8C&quot; aria-label=&quot;물리 주소와 논리 주소 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;물리 주소와 논리 주소&lt;/h3&gt;
&lt;p&gt;CPU와 프로세스는 메모리 몇 번지에 무엇이 저장되어 있는지 다 알지 못함&lt;/p&gt;
&lt;p&gt;→ 메모리에 저장된 값들은 시시각각 변하기 떄문&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;새롭게 실행되는 프로그램은 새롭게 메모리에 적재&lt;/li&gt;
&lt;li&gt;실행이 끝난 프로그램은 메모리에서 삭제&lt;/li&gt;
&lt;li&gt;같은 프로그램을 실행하더라도 실행할 때마다 적재되는 주소는 달라짐&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🔥 &lt;Mark&gt;물리주소와 논리주소의 등장&lt;/p&gt;
&lt;h3 id=&quot;물리-주소&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AC%BC%EB%A6%AC-%EC%A3%BC%EC%86%8C&quot; aria-label=&quot;물리 주소 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;물리 주소&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;메모리 입장에서 바라본 주소&lt;/li&gt;
&lt;li&gt;말 그대로 정보가 실제로 저장된 하드웨어상의 주소&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;논리-주소&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%85%BC%EB%A6%AC-%EC%A3%BC%EC%86%8C&quot; aria-label=&quot;논리 주소 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;논리 주소&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CPU와 실행중인 프로그램 입장에서 바라본 주소&lt;/li&gt;
&lt;li&gt;실행 중인 프로그램 각각에게 부여된 0번지부터 시작하는 주소&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/4ff0c4b1-0f20-4881-9686-ae100844ed80&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;물리-주소와-논리-주소의-변환&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AC%BC%EB%A6%AC-%EC%A3%BC%EC%86%8C%EC%99%80-%EB%85%BC%EB%A6%AC-%EC%A3%BC%EC%86%8C%EC%9D%98-%EB%B3%80%ED%99%98&quot; aria-label=&quot;물리 주소와 논리 주소의 변환 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;물리 주소와 논리 주소의 변환&lt;/h3&gt;
&lt;p&gt;&lt;Mark&gt;MMU(메모리 관리 장치)&lt;/Mark&gt;라는 하드웨어에 의해 변환&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/e2f02887-927c-452e-8c00-9eb399b9ffd8&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;MMU는 &lt;Mark&gt;논리 주소&lt;/Mark&gt;와 &lt;Mark&gt;베이스 레지스터 값(프로그램의 기준 주소&lt;/Mark&gt;을 &lt;Mark&gt;더하여&lt;/Mark&gt; 논리 주소를 물리 주소로 변환&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/19568e7b-6331-45b0-b4ac-5b8bc8b1edd6&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;베이스 레지스터: 프로그램의 &lt;Mark&gt;가장 작은 물리 주소(프로그램의 첫 물리 주소)&lt;/Mark&gt;를 저장하는 셈&lt;/p&gt;
&lt;p&gt;논리 주소: 프로그램의 시작점(&lt;Mark&gt;기준 주소&lt;/Mark&gt;)으로부터 &lt;Mark&gt;떨어진 거리&lt;/p&gt;
&lt;p&gt;c.f. ) 페이징: 주소변환방법&lt;/p&gt;
&lt;h3 id=&quot;메모리-보호&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EB%B3%B4%ED%98%B8&quot; aria-label=&quot;메모리 보호 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리 보호&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;한계 레지스터(=Init Register)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램의 영역을 침범할 수 있는 명령어의 실행을 막음&lt;/li&gt;
&lt;li&gt;베이스 레지스터가 실행 중인 프로그램의 가장 작은 물리 주소를 저장한다면, 한계 레지스터는 논리 주소의 최대 크기를 저장&lt;/li&gt;
&lt;li&gt;베이스 레지스터 값 ≤ 프로그램의 물리 주소 범위 &amp;#x3C; 베이스 레지스터 + 한계 레지스터 값&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ &lt;Mark&gt;CPU가 접근하려는 논리 주소는 한계 레지스터가 저장한 값보다 커서는 안됨&lt;/p&gt;
&lt;p&gt;이처럼 CPU는 메모리에 접근하기 전 접근하고자 하는 논리 주소가 한계 레지스터보다 작은지를 항상 검사&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/4d7e8c91-a7f6-4b85-82bf-3ec0818fa18b&quot; alt=&quot;image&quot;&gt;
실행 중인 프로그램의 독립적인 실행 공간을 확보 &amp;#x26; 하나의 프로그램이 다른 프로그램을 침범하지 못하게 메모리 보호&lt;/p&gt;
&lt;h2 id=&quot;캐시-메모리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BA%90%EC%8B%9C-%EB%A9%94%EB%AA%A8%EB%A6%AC&quot; aria-label=&quot;캐시 메모리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;캐시 메모리&lt;/h2&gt;
&lt;p&gt;CPU가 메모리에 접근하는 시간은 CPU 연산 속도보다 느리다  → CPU(ALU포함), 메모리는 외부&lt;/p&gt;
&lt;h3 id=&quot;저장-장치-계층-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%80%EC%9E%A5-%EC%9E%A5%EC%B9%98-%EA%B3%84%EC%B8%B5-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;저장 장치 계층 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;저장 장치 계층 구조&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;memory hierarchy=메모리 계층 구조&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;Mark&gt;CPU와 가까운 저장 장치&lt;/Mark&gt;는 빠르고, 멀리 있는 저장 장치는 느리다.&lt;/li&gt;
&lt;li&gt;속도가 빠른 저장 장치는 저장 용량이 적고, 가격이 비싸다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;→ 낮은 가격대의 대용량 저장 장치를 원한다면 느린 속도는 감수해야 하고(&lt;Mark&gt;USB&lt;/Mark&gt;), 빠른 속도의 저장 장치를 원한다면 작은 용량과 비싼 가격은 감수해야(&lt;Mark&gt;레지스터, RAM&lt;/Mark&gt;)&lt;/p&gt;
&lt;h3 id=&quot;캐시-메모리-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BA%90%EC%8B%9C-%EB%A9%94%EB%AA%A8%EB%A6%AC-1&quot; aria-label=&quot;캐시 메모리 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;캐시 메모리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;CPU와 메모리 사이에 위치한&lt;/Mark&gt;, 레지스터보다 용량이 크고 메모리보다 빠른 SRAM 기반의 저장 장치&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;CPU의 연산 속도와 메모리 접근 속도의 차이를 조금이나마 줄이기 위한 저장 장치&lt;/li&gt;
&lt;li&gt;“CPU가 매번 메모리에 왔다 갔다 하는 건 시간이 오래 걸리니, 메모리에서 CPU가 사용할 일부 데이터를 미리 캐시 메모리로 가지고 와서 쓴다”&lt;/li&gt;
&lt;li&gt;캐시 메모리까지 반영한 저장 장치 계층 구조
&lt;ul&gt;
&lt;li&gt;레지스터 - 캐시 메모리 - 메모리(RAM) - 보조기억장치(USB)&lt;/li&gt;
&lt;li&gt;c.f. ) CPU 내부에 캐시 메모리가 있는 경우도 있지만 &lt;Mark&gt;레지스터가 더 빠름&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SRAM 기반&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;계층적 캐시 메모리(L1-L2-L3 캐시)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/27ce3eee-c0b8-4931-998b-59d35f23ca4e&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;용량 비교

레지스터 &amp;lt; L1 &amp;lt; L2 &amp;lt; L3 &amp;lt; 메모리

- 일반적으로 L1 캐시와 L2 캐시는 코어 내부에, L3 캐시는 코어 외부에 존재&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;멀티코어 프로세서의 캐시 메모리&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/2c4a2723-e58c-4304-be1e-d7a16081d810&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;- 코어별 캐시 메모리가 동일한 메모리를 갖게끔 sync를 맞춰주는 것이 중요
- L3는 공유하는 캐시 메모리로서 존재&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;분리형 캐시&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/1391f38d-a946-4727-bcf2-943b8f38ecef&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;L1D: 데이터만 담기 위한 캐시 메모리

L1I: 명령어만 담기 위한 캐시 메모리&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;참조-지역성의-원리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B0%B8%EC%A1%B0-%EC%A7%80%EC%97%AD%EC%84%B1%EC%9D%98-%EC%9B%90%EB%A6%AC&quot; aria-label=&quot;참조 지역성의 원리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;참조 지역성의 원리&lt;/h3&gt;
&lt;p&gt;캐시 메모리는 메모리보다 용량이 작으므로 메모리의 모든 내용을 저장 ❌&lt;/p&gt;
&lt;p&gt;→ &lt;Mark&gt;캐시 메모리는 CPU가 자주 사용할 법한 내용을 예측해서 저장&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;예측이 들어맞을 경우(CPU가 캐시 메모리에 저장된 값을 활용할 경우)&lt;/p&gt;
&lt;p&gt;⇒ &lt;Mark&gt;캐시 히트&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예측이 틀렸을 경우(CPU가 메모리에 접근해야 하는 경우)&lt;/p&gt;
&lt;p&gt;⇒ &lt;Mark&gt;캐시 미스(성능 하락)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;캐시 적중률: 캐시 히트 횟수 / (캐시 히트 횟수 + 캐시 미스 횟수)&lt;/p&gt;
&lt;p&gt;→ CPU가 사용할 법한 데이터를 잘 예측해야 캐시 적중률을 높아진다.&lt;/p&gt;
&lt;p&gt;캐시 메모리는 참조 지역성의 원리를 바탕으로 CPU가 자주 사용할 법한 대상을 예측하여 캐시 적중률을 높인다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;참조 지역성의 원리
&lt;ul&gt;
&lt;li&gt;CPU가 메모리에 접근할 떄의 주된 경향을 바탕으로 만들어진 원리
&lt;ol&gt;
&lt;li&gt;CPU는 최근에 접근했던 메모리 공간에 다시 접근하려는 경향&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/ef199f0f-b7d3-41bb-9742-61164a9a2b20&quot; alt=&quot;image&quot;&gt;
2. CPU는 접근한 메모리 공간 근처를 접근하려는 경향
&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/7dece4e5-4530-424b-8d9c-e1552b6575dc&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;다양한-보조-기억장치&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%96%91%ED%95%9C-%EB%B3%B4%EC%A1%B0-%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98&quot; aria-label=&quot;다양한 보조 기억장치 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다양한 보조 기억장치&lt;/h2&gt;
&lt;p&gt;하드 디스크, 플래시 메모리(SSD) → ROM(비휘발성)&lt;/p&gt;
&lt;h3 id=&quot;하드-디스크&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%98%EB%93%9C-%EB%94%94%EC%8A%A4%ED%81%AC&quot; aria-label=&quot;하드 디스크 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;하드 디스크&lt;/h3&gt;
&lt;p&gt;자기적인(N극과 S극) 방식으로 데이터 저장&lt;/p&gt;
&lt;p&gt;구성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;플래터: 일반적으로 플래터 양면 모두 사용(겹겹이 존재)&lt;/li&gt;
&lt;li&gt;스핀들 : 플래터를 회전&lt;/li&gt;
&lt;li&gt;RPM: 분당 회전수&lt;/li&gt;
&lt;li&gt;헤드: 플래터를 읽고 쓰는 역할, 플레터는 겹겹이 존재하므로 헤드 또한 겹겹이 존재&lt;/li&gt;
&lt;li&gt;디스크 암: 일반적으로 모든 헤드가 디스크 암에 부착되어 &lt;Mark&gt;함께&lt;/Mark&gt; 이동&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/a3f63c69-8c06-490a-96d2-22bada14a5ed&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기본적으로 트랙과 섹터단위로 데이터 저장
&lt;ul&gt;
&lt;li&gt;섹터의 크기: 512 바이트 ~ 4096 바이트&lt;/li&gt;
&lt;li&gt;하나 이상의 섹터를 묶어 블록이라고 표현하기도&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/72c5ce4b-b050-4970-b396-41762a2b6fc8&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;플래터는 트랙과 섹터로 나뉘고, 같은 트랙이 모여 &lt;Mark&gt;실린더&lt;/Mark&gt;를 이룬다
&lt;ul&gt;
&lt;li&gt;실린더(cylinder)
&lt;ul&gt;
&lt;li&gt;여러 겁의 플래터 상에서 &lt;Mark&gt;같은 트랙이 위치 한 곳&lt;/Mark&gt;을 모아 연결한 논리적 단위&lt;/li&gt;
&lt;li&gt;연속된 정보는 한 실린더(플래터의 앞,뒤)에 기록(디스크 암에 의해 헤드가 함께 이동하므로)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;하드-디스크의-데이터-접근-과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%98%EB%93%9C-%EB%94%94%EC%8A%A4%ED%81%AC%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%91%EA%B7%BC-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;하드 디스크의 데이터 접근 과정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;하드 디스크의 데이터 접근 과정&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;하드 디스크가 저장된 데이터에 접근하는 시간&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;탐색 시간(seek time)
&lt;ul&gt;
&lt;li&gt;접근하려는 데이터가 저장된 트랙까지 헤드를 이동시키는 시간
&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/74e45571-0bf1-41d1-992e-9ca7dcccfed2&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;회전 지연(rotational latency)
&lt;ul&gt;
&lt;li&gt;헤드가 있는 곳으로 플래터를 회전시키는 시간
&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/2960cb8b-3b6c-4975-8e0f-9c8bf3c4e9d8&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;전송 시간(transfer time)
&lt;ul&gt;
&lt;li&gt;하드 디스크와 컴퓨터 간에 데이터를 전송하는 시간
&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/0ec7e8f9-8b81-4804-b303-3f9e993dc2bb&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Jeff Dean - Numbers Every Programmer Should Know&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/e44f8cf5-5e83-49a4-867c-b468f6e9d373&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ns(나노초)는 10^-9초&lt;/li&gt;
&lt;li&gt;패킷(packet)이란 네트워크의 기본적인 전송 단위&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;플래시-메모리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%8C%EB%9E%98%EC%8B%9C-%EB%A9%94%EB%AA%A8%EB%A6%AC&quot; aria-label=&quot;플래시 메모리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;플래시 메모리&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;전기적으로 데이터를 읽고 쓰는 반도체 기반 저장 장치(SSD, SD CARD, USB)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;범용성이 넓기에 보조기억장치에’만’ 속한다고 보기는 어려움&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;플래시-메모리의-종류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%8C%EB%9E%98%EC%8B%9C-%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%9D%98-%EC%A2%85%EB%A5%98&quot; aria-label=&quot;플래시 메모리의 종류 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;플래시 메모리의 종류&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;NAND 플래시 메모리(대부분)&lt;/li&gt;
&lt;li&gt;NOR 플래시 메모리&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;플래시-메모리의-저장-단위&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%94%8C%EB%9E%98%EC%8B%9C-%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%9D%98-%EC%A0%80%EC%9E%A5-%EB%8B%A8%EC%9C%84&quot; aria-label=&quot;플래시 메모리의 저장 단위 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;플래시 메모리의 저장 단위&lt;/h3&gt;
&lt;h4 id=&quot;셀cell&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%85%80cell&quot; aria-label=&quot;셀cell permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;셀(cell)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;플래시 메모리에서 데이터를 저장하는 가장 작은 단위&lt;/li&gt;
&lt;li&gt;이 셀이 모이고 모여 수 MB, GB, TB 저장 장치가 된다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;한 셀에&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;1 비트를 저장할 수 있는 플래시 메모리: SLC&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;2 비트를 저장할 수 있는 플래시 메모리: MLC&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;3 비트를 저장할 수 있는 플래시 메모리: TLC&lt;/li&gt;
&lt;li&gt;4 비트를 저장할 수 있는 플래시 메모리: QLC&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;SLC
&lt;ul&gt;
&lt;li&gt;한 셀로 두 개의 정보 표현&lt;/li&gt;
&lt;li&gt;비트의 빠른 입출력&lt;/li&gt;
&lt;li&gt;긴 &lt;Mark&gt;수명&lt;/li&gt;
&lt;li&gt;플래시 메모리(USB, SSD, SD CARD), 하드디스크에는 수명이 있다&lt;/li&gt;
&lt;li&gt;용량 대비 고가격&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MLC
&lt;ul&gt;
&lt;li&gt;한 셀로 네 개의 정보 표현(대용량화 유리)&lt;/li&gt;
&lt;li&gt;SLC보다 느린 입출력&lt;/li&gt;
&lt;li&gt;SLC보다 짧은 수명&lt;/li&gt;
&lt;li&gt;SLC보다 저렴&lt;/li&gt;
&lt;li&gt;시중에서 많이 사용(MLC, TLC, QLC)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TLC
&lt;ul&gt;
&lt;li&gt;한 셀로 8개의 정보 표현(대용량화 유리)&lt;/li&gt;
&lt;li&gt;MLC보다 느린 입출력&lt;/li&gt;
&lt;li&gt;MLC보다 짧은 수명&lt;/li&gt;
&lt;li&gt;MLC보다 저렵&lt;/li&gt;
&lt;li&gt;시중에서 많이 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;→ &lt;Mark&gt;같은 플래시 메모리라도 수명, 가격, 성능이 다르다
&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/36848c42-a58e-4988-b2e4-730fe5977700&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/23b21cbf-8625-467e-a5e1-2d210a5adf39&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;셀들이 모여 페이지(page)
&lt;ul&gt;
&lt;li&gt;페이지의 상태
&lt;ul&gt;
&lt;li&gt;Free 상태
&lt;ul&gt;
&lt;li&gt;어떠한 데이터도 저장하고 있지 않아 새로운 데이터를 저장할 수 있는 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Valid 상태
&lt;ul&gt;
&lt;li&gt;이미 유효한 데이터를 저장하고 있는 상태&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Invalid 상태
&lt;ul&gt;
&lt;li&gt;유효하지 않은 데이터(쓰레기값)를 저장하고 있는 상태&lt;/li&gt;
&lt;li&gt;c.f. ) &lt;Mark&gt;플레시 메모리는 하드 디스크와 달리 덮어쓰기가 불가능 🔥&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;가비지 컬렉션&lt;/Mark&gt;(삭제는 블록단위 읽/쓰는 페이지 단위)
&lt;ul&gt;
&lt;li&gt;A를 A`로 수정시&lt;/li&gt;
&lt;li&gt;유효한 페이지들만을 새로운 블록으로 복사&lt;/li&gt;
&lt;li&gt;기존의 블록(&lt;Mark&gt;Invalid&lt;/Mark&gt;)을 삭제하여 공간을 정리
&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/f8328c62-f6e6-429b-a2f0-c351b7158b28&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;페이지들이 블록(block)&lt;/li&gt;
&lt;li&gt;블록이 모여 플레인(plane)&lt;/li&gt;
&lt;li&gt;플레인이 모여 다이(die)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;읽기/쓰기 단위와 삭제 단위는 다르다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;읽기와 쓰기&lt;/Mark&gt;는 &lt;Mark&gt;페이지 단위&lt;/Mark&gt;로 이루어짐&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;삭제&lt;/Mark&gt;는 &lt;Mark&gt;블록(페이지보다 큰) 단위&lt;/Mark&gt;로 이루어짐&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[명령어 집합구조, CISC와 RISC]]></title><description><![CDATA[명령어 집합구조, CISC와 RISC에 대해서 배웁니다.]]></description><link>https://dltlaos11.github.io/posts/computer-architecture/instruction-set-architecture-cisc-and-risc</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/computer-architecture/instruction-set-architecture-cisc-and-risc</guid><pubDate>Fri, 01 Sep 2023 20:35:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A7%91%ED%95%A9%EA%B5%AC%EC%A1%B0,-CISC%EC%99%80-RISC&quot;&gt;명령어 집합구조, CISC와 RISC&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A7%91%ED%95%A9&quot;&gt;명령어 집합&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cisc&quot;&gt;CISC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#risc&quot;&gt;RISC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;명령어-집합구조-cisc와-risc&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A7%91%ED%95%A9%EA%B5%AC%EC%A1%B0-cisc%EC%99%80-risc&quot; aria-label=&quot;명령어 집합구조 cisc와 risc permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;명령어 집합구조, CISC와 RISC&lt;/h2&gt;
&lt;p&gt;명령어 파이프라이닝에 유리한 명령어의 구조에 대해서 배워보자&lt;/p&gt;
&lt;h3 id=&quot;명령어-집합&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A7%91%ED%95%A9&quot; aria-label=&quot;명령어 집합 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;명령어 집합&lt;/h3&gt;
&lt;p&gt;CPU는 명령어를 실행 → 모든 CPU가 똑같은 구조의 명령어를 실행하진 ❌ → 명령어의 세세한 생김새, 연산, 주소 지정 방식 등은 CPU마다 다름&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;명령어 집합(구조)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU가 이해할 수 있는 명령어들의 모음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;각 CPU의 언어라고 봐도 무방&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인텔 CPU 컴퓨터에서 만든 실행 파일(명령어 들의 모음)을 그대로 아이폰에 옮겨 특별한 설정 없이 바로 실행하면 실행 ❌&lt;/p&gt;
&lt;p&gt;c.f. ) 인텔의 CPU는 일반적으로 “X86(X86-64)” 명령어 집합을, 애플의 CPU는 일반적으로 “ARM” 명령어 집합을 따름&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/5b2915a5-311d-4352-847d-913bbdc7f468&quot; alt=&quot;image&quot;&gt;
명령어 집합이 다르기 때문에 같은 소스를 컴파일하더라도 어셈블리어, 기계어의 종류가 다름&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;명령어가 달라지면 명령어 해석 방식, 레지스터의 종류와 개수, 파이프라이닝의 용이성 등이 달라지며 CPU의 구조 나아가서 컴퓨터의 구조까지 달라진다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;명령어의 구조_ISA(Instruction Set Architecture)
&lt;ul&gt;
&lt;li&gt;CPU의 언어이자 하드웨어가 소프트웨어를 어떻게 이해할지에 대한 약속&lt;/li&gt;
&lt;li&gt;하드웨어별 용이한 명령어가 있다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ 명령어 집합의 두 축: &lt;Mark&gt;CISC &amp;#x26; RISC&lt;/Mark&gt;&lt;/p&gt;
&lt;h3 id=&quot;cisc&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cisc&quot; aria-label=&quot;cisc permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;cisc&lt;/h3&gt;
&lt;p&gt;CISC(Complex Instruction Set Computer)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;복잡한 명령어 집합을 활용하는 컴퓨터(CPU)
&lt;ul&gt;
&lt;li&gt;x86, x86-64는 CISC 기반 명령어 집합 구조&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;복잡하고 다양한 명령어 활용
&lt;ul&gt;
&lt;li&gt;명령어의 형태와 크기가 다양한 &lt;Mark&gt;가변 길이 명령어&lt;/Mark&gt;를 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;다양하고 강력한 명령어를 활용
&lt;ul&gt;
&lt;li&gt;상대적으로 적은 수의 명령어로도 프로그램을 실행&lt;/li&gt;
&lt;li&gt;소스코드를 컴파일하면 강력하고 적은 수의 가변 길이의 명령어가 나옴&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;메모리를 최대한 아끼며 개발해야 했던 시절에 인기가 높았으나 &lt;Mark&gt;명령어 파이프라이닝이 불리하다&lt;/Mark&gt;는 치명적인 단점이 존재&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;명령어가 워낙 복잡하고 다양한 기능을 제공하는 탓에 &lt;Mark&gt;명령어의 크기와 실행되기까지의 시간&lt;/Mark&gt;이 일정하지 않음&lt;/li&gt;
&lt;li&gt;복잡한 명령어 때문에 &lt;Mark&gt;명령어 하나를 실행하는 데에 여러 클럭 주기&lt;/Mark&gt; 필요&lt;/li&gt;
&lt;li&gt;복잡한 명령어의 사용 빈도가 낮음, 자주 쓰이는 명령어의 빈도수가 높다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;risc&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#risc&quot; aria-label=&quot;risc permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;risc&lt;/h3&gt;
&lt;p&gt;RISC(Reduced Instruction Set Computer)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;명령어의 종류가 적고, 짧고 규격화된 명령어 사용&lt;/li&gt;
&lt;li&gt;단순하고 적은 수의 고정 길이 명령어 집합을 활용(&lt;Mark&gt;주로 1클럭 내에&lt;/Mark&gt;) → 파이프라이닝에 유리&lt;/li&gt;
&lt;li&gt;메모리 접근 최소화(load, store), 레지스터 십분 활용 → CISC에 비해서 범용 레지스터의 종류가 더 많은 경우가 많음&lt;/li&gt;
&lt;li&gt;다만, 명령어의 종류가 CISC보다 적기에 컴파일 했을 때 &lt;Mark&gt;더 많은 명령어로&lt;/Mark&gt; 프로그램을 동작 시킴(ex_ARM)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;summary&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#summary&quot; aria-label=&quot;summary permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Summary&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/f15253b0-64e9-4923-85c8-b3fc803cfd4a&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;c.f. ) 현대 CISC의 활용: 마이크로 명령어, 가급적 명령어의 실행을 1 클럭 내로 잘게 쪼개서 실행하므로, 내부적으로는 RISC처럼 실행&lt;/p&gt;</content:encoded></item><item><title><![CDATA[명령어 병렬 처리 기법]]></title><description><![CDATA[명령어 병렬 처리 기법에 대해서 배웁니다.]]></description><link>https://dltlaos11.github.io/posts/computer-architecture/instruction-parallel-processing-technique</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/computer-architecture/instruction-parallel-processing-technique</guid><pubDate>Fri, 01 Sep 2023 18:35:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%B3%91%EB%A0%AC-%EC%B2%98%EB%A6%AC%EA%B8%B0%EB%B2%95&quot;&gt;명령어 병렬 처리기법&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8&quot;&gt;명령어 파이프라인&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%EC%9C%84%ED%97%98&quot;&gt;파이프라인 위험&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8A%88%ED%8D%BC%EC%8A%A4%EC%B9%BC%EB%9D%BC-%EA%B8%B0%EB%B2%95&quot;&gt;슈퍼스칼라 기법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B9%84%EC%88%9C%EC%B0%A8%EC%A0%81-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%B2%98%EB%A6%AC&quot;&gt;비순차적 명령어 처리&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;명령어-병렬-처리기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%B3%91%EB%A0%AC-%EC%B2%98%EB%A6%AC%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;명령어 병렬 처리기법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;명령어 병렬 처리기법&lt;/h2&gt;
&lt;h3 id=&quot;명령어-파이프라인&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8&quot; aria-label=&quot;명령어 파이프라인 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;명령어 파이프라인&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;여러개의 명령어를 겹처서 실행하는 방법&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;실행을 여러 단계로 나누는 CPU 내의 &lt;Mark&gt;하드웨어&lt;/Mark&gt; 메커니즘을 구체적으로 의미&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;명령어가 처리되는 과정을 비슷한 시간 간격으로 나눈다면 다음과 같이 나눌 수 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;명령어 인출(Instruction Fetch)&lt;/li&gt;
&lt;li&gt;명령어 해석(Instruction Decode)&lt;/li&gt;
&lt;li&gt;명령어 실행(Execute Instruction)&lt;/li&gt;
&lt;li&gt;결과 저장(Write Back)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;c.f. ) &lt;code class=&quot;language-text&quot;&gt;인출 → 실행&lt;/code&gt; 혹은 &lt;code class=&quot;language-text&quot;&gt;명령어 해석 → 명령어 실행 → 명령어 접근 → 결과 저장&lt;/code&gt;으로 나누기도
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/adfcc9c2-fc58-4625-8aa3-c538d661816f&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;명령어-파이프라이닝&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B4%EB%8B%9D&quot; aria-label=&quot;명령어 파이프라이닝 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;명령어 파이프라이닝&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;같은 단계가 겹치지만 않는다면 CPU는 &lt;Mark&gt;‘각 단계를 동시에 실행할 수 있다’&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;명령 실행의 효율성과 성능을 향상시키는 데 사용되는 &lt;Mark&gt;하드웨어 및 소프트웨어 기술&lt;/Mark&gt;을 포함하는 보다 포괄적인 개념&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/5bc5a29d-5582-424e-bb28-30394ede3670&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;명령어 파이프라인을 사용하지 않는다면 각 명령어를 하나씩 처리해야 하므로 비효율적&lt;/p&gt;
&lt;h4 id=&quot;파이프라인-위험&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%EC%9C%84%ED%97%98&quot; aria-label=&quot;파이프라인 위험 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파이프라인 위험&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;명령어 파이프라인이 성능 향상에 실패(병렬로 파이프라인이 제대로 동작하지 않는)하는 경우&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/b0e69632-7be5-4428-864a-2dff706f166c&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;데이터 위험&lt;/p&gt;
&lt;p&gt;명령어 간의 의존성에 의해 야기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 명령어를 동시에 처리할 수는 없다&lt;/li&gt;
&lt;li&gt;이전 명령어를 끝까지 실행해야만 비로소 실행할 수 있는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/c10a674d-1ee9-4dd5-9758-6300b5e128de&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;제어 위험&lt;/p&gt;
&lt;p&gt;프로그램 카운터의 갑작스러운 변화&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PC가 갑작스럽게 특정 메모리 주소로 변화되는 상황에서 파이프라이닝이 성능 향상에 실패하는 경우&lt;/li&gt;
&lt;li&gt;기본적으로 명령어는 순차적인 흐름을 가지고 있음, 겹쳐서 실행하고 있던 다음 명령어가 헛수고&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;c.f. ) 위 상황을 방지하기 위해서 PC가 어디로 점프할 것인지 미리 예측하는 분기 예측(branch prediction) 기술이 존재&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/76215680-bf7c-4c45-bfd0-86e005f0c835&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;구조적 위험&lt;/p&gt;
&lt;p&gt;서로 다른 명령어가 같은 CPU 부품(ALU, 레지스터)를 쓰려고 할 떄, 프로세서의 자원 부족&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;슈퍼스칼라-기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%88%ED%8D%BC%EC%8A%A4%EC%B9%BC%EB%9D%BC-%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;슈퍼스칼라 기법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;슈퍼스칼라 기법&lt;/h3&gt;
&lt;p&gt;CPU 내부에 여러 개의 명령어 파이프라인을 포함한 구조&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;오늘날의 멀티스레드 프로세서&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;멀티스레드 프로세서&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;하드웨어적 스레드(각각의 코어가 동시에 수행할 수 있는 명령어의 단위)가 여러개 있는 스레드&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;8 Core 16 Threads CPU 한번에 16개의 명령어를 실행&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/fd06c96c-6ede-42dd-89f4-5b89d44bda1d&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이론적으로는 파이프라인 개수에 비례하여 처리 속도 증가&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만, &lt;Mark&gt;파이프라인 위험도&lt;/Mark&gt;의 증가로 인해 파이프라인 개수에 비례하여 처리 속도가 증가하진 ❌&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;비순차적-명령어-처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B9%84%EC%88%9C%EC%B0%A8%EC%A0%81-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;비순차적 명령어 처리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;비순차적 명령어 처리&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;파이프라인의 중단을 방지하기 위해 명령어를 순차적으로 처리하지 않는 명령어 병렬 처리 기법&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/3c720d3b-5ead-48c0-9a07-d5858228603a&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;의존성이 없는(전체 프로그램 실행 흐름에 영향❌) 명령어의 순서를 바꿈으로 인해 파이프라이닝의 중단을 방지할 수 있다.&lt;/p&gt;
&lt;h4 id=&quot;summary&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#summary&quot; aria-label=&quot;summary permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Summary&lt;/h4&gt;
&lt;p&gt;명령어 병렬 처리기법&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;명령어 파이프라이닝: 명령어를 겹처서(병렬) 실행시키는 방식
&lt;ul&gt;
&lt;li&gt;파이프라인 위험: 파이프라이닝을 해도 성능향상에 실패
&lt;ul&gt;
&lt;li&gt;데이터 위험&lt;/li&gt;
&lt;li&gt;제어 위험&lt;/li&gt;
&lt;li&gt;구조 위험&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;슈퍼스칼라 기법: 명령어 파이프라인을 여러개 두는 방식&lt;/li&gt;
&lt;li&gt;비순차적 명령어 처리: 의존성이 없는 명령어간 순서를 바꿔서 실행하는 방식&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[명령어 사이클과 인터럽트]]></title><description><![CDATA[명령어 사이클과 인터럽트에 대해서 배웁니다.]]></description><link>https://dltlaos11.github.io/posts/computer-architecture/instruction-cycles-and-interrupts</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/computer-architecture/instruction-cycles-and-interrupts</guid><pubDate>Mon, 28 Aug 2023 23:40:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%82%AC%EC%9D%B4%ED%81%B4&quot;&gt;명령어 사이클&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%97%90-%EC%A0%80%EC%9E%A5%EB%90%9C-%EB%AA%85%EB%A0%B9%EC%96%B4%EB%A5%BC-%EC%8B%A4%ED%96%89%ED%95%98%EB%A0%A4%EB%A9%B4&quot;&gt;메모리에 저장된 명령어를 실행하려면?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%98%88%EC%99%B8&quot;&gt;예외&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8&quot;&gt;인터럽트&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8%EC%9D%98-%EC%A2%85%EB%A5%98&quot;&gt;인터럽트의 종류&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4-%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8%EC%9D%98-%EC%88%9C%EC%84%9C&quot;&gt;하드웨어 인터럽트의 순서&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cpu%EB%82%B4%EB%B6%80%EC%97%90-%EC%A0%80%EC%9E%A5%EB%90%98%EC%96%B4-%EC%9E%88%EB%8A%94-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0%EC%9D%98-%EC%A3%BC%EC%86%8C-%EB%B3%80%ED%99%94-%EA%B3%BC%EC%A0%95&quot;&gt;CPU내부에 저장되어 있는 레지스터의 주소 변화 과정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%9C-%EC%83%81%ED%99%A9%EA%B9%8C%EC%A7%80-%EC%B6%94%EA%B0%80%ED%95%9C-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%82%AC%EC%9D%B4%ED%81%B4&quot;&gt;인터럽트가 발생한 상황까지 추가한 명령어 사이클&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/1546e876-331e-4d5a-a779-d2139a0fad07&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU는 메모리로부터 명령어나 데이터들을 갖고와서 실행, 필요하다면 값을 저장하기도&lt;/li&gt;
&lt;li&gt;CPU는 메모리 안의 프로그램을 &lt;Mark&gt;정해진 흐름&lt;/Mark&gt;대로 처리, 여기서 정해진 흐름이 &lt;Mark&gt;명령어 사이클&lt;/li&gt;
&lt;li&gt;간혹 그 정해진 흐름을 방해하는 신호가 CPU한테 발생할 수 있는데, 그 신호는 &lt;Mark&gt;인터럽트&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;명령어-사이클&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%82%AC%EC%9D%B4%ED%81%B4&quot; aria-label=&quot;명령어 사이클 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;명령어 사이클&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;프로그램 속 명령어들은 일정한 주기가 반복되며 실행, 이 주기가 &lt;Mark&gt;명령어 사이클&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;메모리에-저장된-명령어를-실행하려면&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%97%90-%EC%A0%80%EC%9E%A5%EB%90%9C-%EB%AA%85%EB%A0%B9%EC%96%B4%EB%A5%BC-%EC%8B%A4%ED%96%89%ED%95%98%EB%A0%A4%EB%A9%B4&quot; aria-label=&quot;메모리에 저장된 명령어를 실행하려면 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리에 저장된 명령어를 실행하려면&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/f292c621-d975-41f1-bac3-727386686959&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;메모리에 저장되어 있는 값을 CPU 내부(레지스터)로 갖고 와야함 → &lt;Mark&gt;인출&lt;/Mark&gt;
&lt;ul&gt;
&lt;li&gt;인출하는 주기: &lt;Mark&gt;인출사이클&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/1b9d4dcb-7730-4e71-87fb-d59d2f09f7e8&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인출했다면 저장되어 있는 값(명령어)을 &lt;Mark&gt;실행&lt;/Mark&gt;해야
&lt;ul&gt;
&lt;li&gt;실행하는 주기: &lt;Mark&gt;실행사이클&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/c363469c-c5b1-4209-90f0-2b4f425df23a&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;일반적으로 CPU는 인출-실행-인출-실행-… 인출사이클과 실행사이클의 반복되면서 실행 → 명령어 사이클의 일부&lt;/p&gt;
&lt;h3 id=&quot;예외&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%99%B8&quot; aria-label=&quot;예외 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예외&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://dltlaos11.github.io/posts/%EB%AA%85%EB%A0%B9%EC%96%B4%EC%9D%98%20%EA%B5%AC%EC%A1%B0%EC%99%80%20%EC%A3%BC%EC%86%8C%20%EC%A7%80%EC%A0%95%20%EB%B0%A9%EC%8B%9D&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;명령어의 구조와 주소 지정 방식&lt;/a&gt;&lt;/strong&gt; 에서 언급했듯이 &lt;Mark&gt;인출&lt;/Mark&gt;을 하면 바로 실행이 가능한 명령어도 있지만, 인출을 하더라도 바로 실행이 &lt;Mark&gt;불가능한&lt;/Mark&gt; 경우도 존재, 추가적으로 메모리에 접근해야 하는 경우가 존재 → &lt;Mark&gt;간접주소지정방식&lt;/Mark&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/9de315a6-d1e8-4309-a688-3042fd262fb1&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;몇 번더 메모리 접근을 해야하는 경우를 위해서&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/46d0e437-3c57-4a93-9889-2975399188bd&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;Mark&gt;간접 사이클&lt;/Mark&gt;이 추가 될 수 있다.&lt;/p&gt;
&lt;p&gt;→ 어떤 명령어는 &lt;Mark&gt;인출-실행&lt;/Mark&gt; 사이클만으로 실행, 어떤 명령어는 &lt;Mark&gt;인출-간접-실행&lt;/Mark&gt; 사이클을 거쳐 실행(&lt;Mark&gt;인터럽트&lt;/Mark&gt; 라는 개념이 없다면 CPU는 위 주기를 따름)&lt;/p&gt;
&lt;h2 id=&quot;인터럽트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8&quot; aria-label=&quot;인터럽트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인터럽트&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU가 &lt;Mark&gt;정해진 흐름&lt;/Mark&gt;대로 프로그램을 실행하고 있는데, 그 흐름을 끊는 주체를 &lt;Mark&gt;인터럽트&lt;/Mark&gt;라고 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;실제 프로그래밍을 하면서 겪는 키보드 인터럽트&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/f5bf20f6-0f90-4eb7-81b8-2e355cbc83a8&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPU가 급하게 처리해야 할 다른 작업이 우선시 되었을 떄 발생&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;인터럽트의-종류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8%EC%9D%98-%EC%A2%85%EB%A5%98&quot; aria-label=&quot;인터럽트의 종류 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인터럽트의 종류&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/e0d45a10-f644-47e1-88ee-416bd21f7b74&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;동기 인터럽트(&lt;Mark&gt;예외&lt;/Mark&gt;): CPU가 예기치 못한 상황을 접했을 떄 발생
&lt;ul&gt;
&lt;li&gt;c.f.) CPU가 접근하고자 하는 메모리에 데이터가 없다든지, 디버깅, x/0, …&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/ed4acc25-1d86-4f2a-b4b3-8d4d44282677&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;비동기 인터럽트(&lt;Mark&gt;하드웨어 인터럽트&lt;/Mark&gt;): 주로 입출력장치에 의해 발생&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;알림과 같은 인터럽트&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;Mark&gt;입출력 작업 도중에도 효율적으로 명령어를 처리&lt;/Mark&gt;하기 위해 하드웨어 인터럽트 사용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;입출력장치의 &lt;Mark&gt;I/O작업&lt;/Mark&gt;은 CPU에 비해 &lt;Mark&gt;느리다.&lt;/Mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;인터럽트가 &lt;Mark&gt;없다면&lt;/Mark&gt; CPU는 프린트 완료 여부를 확인하기 위해 주기적으로 확인해야
&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/1031762c-9ead-433e-8162-5b3c9943eb55&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인터럽트가 &lt;Mark&gt;있다면&lt;/Mark&gt; I/O작업 동안 CPU는 다른 작업이 가능&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;하드웨어-인터럽트의-순서&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%95%98%EB%93%9C%EC%9B%A8%EC%96%B4-%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8%EC%9D%98-%EC%88%9C%EC%84%9C&quot; aria-label=&quot;하드웨어 인터럽트의 순서 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;하드웨어 인터럽트의 순서&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;인터럽트의 종류를 막론하고 인터럽트 처리 순서는 대동소이&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;입출력장치는 CPU에 &lt;Mark&gt;인터럽트 요청 신호&lt;/Mark&gt;를 보냄
&lt;ul&gt;
&lt;li&gt;인터럽트 요청 신호
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;CPU의 작업을 방해하는 인터럽트에 대한 요청&lt;/Mark&gt;&lt;/li&gt;
&lt;li&gt;인터럽트는 CPU의 &lt;Mark&gt;정상적인 흐름&lt;/Mark&gt;을 끊는 것이기 때문에 인터럽트를 보내는 주체는 인터럽트 요청 신호를 보낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU는 실행 사이클이 끝나고 명령어를 인출하기 전 항상 인터럽트 여부를 확인&lt;/li&gt;
&lt;li&gt;CPU는 인터럽트 요청을 확인하고 &lt;Mark&gt;인터럽트 플래그(플래그 레지스터)&lt;/Mark&gt;를 통해 현재 인터럽트를 받아들일 수 있는지 여부를 확인
&lt;ul&gt;
&lt;li&gt;인터럽트 프래그
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;인터럽트 요청 신호를 받아들일지 무시할지를 결정하는 비트&lt;/Mark&gt;&lt;/li&gt;
&lt;li&gt;모든 인터럽트를 인터럽트 플래그로 막을 수 있지는 않다(ex_정전..)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;인터럽트를 받아들일 수 있다면 CPU는 지금까지의 작업을 백업&lt;/li&gt;
&lt;li&gt;CPU는 &lt;Mark&gt;인터럽트 벡터&lt;/Mark&gt;를 참조하여 &lt;Mark&gt;인터럽트 서비스 루틴&lt;/Mark&gt;을 실행
&lt;ul&gt;
&lt;li&gt;인터럽트 서비스 루틴
&lt;ul&gt;
&lt;li&gt;인터럽트가 발생했을 때 &lt;Mark&gt;해당 인터럽트를 처리하는 프로그램(메모리에 저장)&lt;/Mark&gt;&lt;/li&gt;
&lt;li&gt;CPU가 인터럽트를 받아들이기로 했다면 &lt;Mark&gt;인터럽트 서비스 루틴&lt;/Mark&gt; 실행
&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/2843fb8e-504e-4e09-8ab5-e3a8b34862e6&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;li&gt;인터럽트 벡터: &lt;Mark&gt;인터럽트 서비스 루틴의 시작 주소를 포함하는 인터럽트 서비스 루틴의 식별 정보&lt;/Mark&gt;
&lt;ul&gt;
&lt;li&gt;인터럽트마다 &lt;Mark&gt;고유한 인터럽트 서비스 루틴의 시작 주소&lt;/Mark&gt;를 가지고 있다.&lt;/li&gt;
&lt;li&gt;c.f.) 인터럽트 벡터 테이블(in 메모리)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;인터럽트 주체가 보내는 신호&lt;/Mark&gt; ⇒ 인터럽트 요청 신호 B + 인터럽트 벡터(데이터 버스를 통해서)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;인터럽트 서비스 루틴 실행이 끝나면 &lt;Mark&gt;4&lt;/Mark&gt;에서 백업해 둔 작업을 복구하여 실행을 재개&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;‘CPU가 인터럽트를 처리’ → ‘인터럽트 서비스 루틴을 실행하고, 본래 수행하던 작업으로 다시 되돌아온다’(+ 그리고 인터럽트의 시작 주소는 인터럽트 벡터를 통해 알 수 있다.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;cpu내부에-저장되어-있는-레지스터의-주소-변화-과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cpu%EB%82%B4%EB%B6%80%EC%97%90-%EC%A0%80%EC%9E%A5%EB%90%98%EC%96%B4-%EC%9E%88%EB%8A%94-%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0%EC%9D%98-%EC%A3%BC%EC%86%8C-%EB%B3%80%ED%99%94-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;cpu내부에 저장되어 있는 레지스터의 주소 변화 과정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;cpu내부에 저장되어 있는 레지스터의 주소 변화 과정&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/32bead51-b9af-41d1-9539-76ea919d914a&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;인터럽트가 발생하면 기존에 있던 CPU의 내부 정보를 메모리의 &lt;Mark&gt;스택 영역&lt;/Mark&gt;에 &lt;Mark&gt;백업&lt;/Mark&gt;하고&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/7477fd17-dfd8-47d8-92f6-721833b61223&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;해당 인터럽트에 해당하는 인터럽트 서비스 루틴을 CPU로 가지고 와서 실행하며, 프로그램이 끝나면 CPU에서 스택 영역의 데이터를 &lt;Mark&gt;복구&lt;/Mark&gt;&lt;/p&gt;
&lt;h3 id=&quot;인터럽트가-발생한-상황까지-추가한-명령어-사이클&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8%EA%B0%80-%EB%B0%9C%EC%83%9D%ED%95%9C-%EC%83%81%ED%99%A9%EA%B9%8C%EC%A7%80-%EC%B6%94%EA%B0%80%ED%95%9C-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%82%AC%EC%9D%B4%ED%81%B4&quot; aria-label=&quot;인터럽트가 발생한 상황까지 추가한 명령어 사이클 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인터럽트가 발생한 상황까지 추가한 명령어 사이클&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/3ab3ad96-f1a3-455d-889e-b136c0e9d951&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실행 사이클이 끝나고 인터럽트 여부를 확인했을 떄 인터럽트가 발생했을 경우&lt;/li&gt;
&lt;li&gt;결국 CPU는 메모리에 있는 프로그램을 위와 같은 &lt;Mark&gt;정형화된 흐름&lt;/Mark&gt;에 따라서 처리&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[빠른 CPU를 위한 설계 기법]]></title><description><![CDATA[빠른 CPU를 위한 설계 기법에 대해서 배웁니다.]]></description><link>https://dltlaos11.github.io/posts/computer-architecture/design-techniques-for-fast-cpus</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/computer-architecture/design-techniques-for-fast-cpus</guid><pubDate>Mon, 28 Aug 2023 18:40:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%81%B4%EB%9F%AD&quot;&gt;클럭&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#cpu-%EC%86%8D%EB%8F%84%EB%A5%BC-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot;&gt;CPU 속도를 빠르게 하는 방법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9F%BC-%EC%A0%95%EB%A7%90-%ED%81%B4%EB%9F%AD-%EC%8B%A0%ED%98%B8%EA%B0%80-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EB%B0%98%EB%B3%B5%EB%90%98%EB%A9%B4-cpu%EC%9D%98-%EC%84%B1%EB%8A%A5%EC%9D%80-%EC%A2%8B%EC%95%84%EC%A7%88%EA%B9%8C&quot;&gt;그럼 정말 클럭 신호가 빠르게 반복되면 CPU의 성능은 좋아질까&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%81%B4%EB%9F%AD-%EC%86%8D%EB%8F%84&quot;&gt;클럭 속도&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%81%B4%EB%9F%AD-%EC%8B%A0%ED%98%B8%EB%A5%BC-%EB%A7%88%EB%83%A5-%EB%86%92%EC%9D%B4%EB%A9%B4-cpu%EA%B0%80-%EC%97%84%EC%B2%AD-%EB%B9%A8%EB%9D%BC%EC%A7%88%EA%B9%8C&quot;&gt;클럭 신호를 마냥 높이면 CPU가 엄청 빨라질까&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%ED%81%B4%EB%9F%AD-%EC%86%8D%EB%8F%84%EB%A5%BC-%EB%8A%98%EB%A6%AC%EB%8A%94-%EB%B0%A9%EB%B2%95-%EC%9D%B4%EC%99%B8%EC%97%90%EB%8A%94&quot;&gt;클럭 속도를 늘리는 방법 이외에는&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BD%94%EC%96%B4%EC%99%80-%EB%A9%80%ED%8B%B0%EC%BD%94%EC%96%B4&quot;&gt;코어와 멀티코어&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BD%94%EC%96%B4&quot;&gt;코어&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BD%94%EC%96%B4%EB%A5%BC-100%EA%B0%9C-%EB%8A%98%EB%A6%AC%EB%A9%B4-%EC%97%B0%EC%82%B0-%EC%86%8D%EB%8F%84%EB%8F%84-%EA%B7%B8%EC%97%90-%EB%B9%84%EB%A1%80%ED%95%A0%EA%B9%8C&quot;&gt;코어를 100개 늘리면 연산 속도도 그에 비례할까&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8A%A4%EB%A0%88%EB%93%9C%EC%99%80-%EB%A9%80%ED%8B%B0%EC%8A%A4%EB%A0%88%EB%93%9C&quot;&gt;스레드와 멀티스레드&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8A%A4%EB%A0%88%EB%93%9C&quot;&gt;스레드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;클럭&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9F%AD&quot; aria-label=&quot;클럭 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클럭&lt;/h2&gt;
&lt;h3 id=&quot;cpu-속도를-빠르게-하는-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cpu-%EC%86%8D%EB%8F%84%EB%A5%BC-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;cpu 속도를 빠르게 하는 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CPU 속도를 빠르게 하는 방법&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;컴퓨터 부품들은 ‘클럭 신호’에 맞춰 일사불란하게 움직인다 → &lt;Mark&gt;클럭 신호를 빠르게 한다면
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;클럭신호&lt;/Mark&gt;: 컴퓨터의 모든 부품을 일사불란하게 움직일 수 있게 하는 시간 단위&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU는 ‘명령어 사이클’이라는 정해진 흐름에 맞춰 명령어들을 실행한다 → &lt;Mark&gt;명령어 사이클 또한 빠르게 반복 될 것&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;그럼-정말-클럭-신호가-빠르게-반복되면-cpu의-성능은-좋아질까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9F%BC-%EC%A0%95%EB%A7%90-%ED%81%B4%EB%9F%AD-%EC%8B%A0%ED%98%B8%EA%B0%80-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EB%B0%98%EB%B3%B5%EB%90%98%EB%A9%B4-cpu%EC%9D%98-%EC%84%B1%EB%8A%A5%EC%9D%80-%EC%A2%8B%EC%95%84%EC%A7%88%EA%B9%8C&quot; aria-label=&quot;그럼 정말 클럭 신호가 빠르게 반복되면 cpu의 성능은 좋아질까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그럼 정말 클럭 신호가 빠르게 반복되면 cpu의 성능은 좋아질까&lt;/h3&gt;
&lt;p&gt;=&gt; 꼭 그런건 아니지만 일반적으로 Yes&lt;/p&gt;
&lt;h3 id=&quot;클럭-속도&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9F%AD-%EC%86%8D%EB%8F%84&quot; aria-label=&quot;클럭 속도 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클럭 속도&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/dc0f7a32-f81b-4783-8de0-baf8fba14125&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;클럭 속도: 헤르츠(Hz) 단위로 측정&lt;/li&gt;
&lt;li&gt;헤르츠(Hz): 1초에 클럭이 반복되는 횟수&lt;/li&gt;
&lt;li&gt;클럭이 ‘똑-딱-’하고 1초에 한 번 반복되면 &lt;Mark&gt;1Hz&lt;/li&gt;
&lt;li&gt;클럭이 1초에 100번 반복되면 &lt;Mark&gt;100Hz&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/8eff3334-daf7-4a88-81d6-cc26dddb65e7&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1초에 클럭이 기본적으로 25억번(2.5 * 4109)번&lt;/li&gt;
&lt;li&gt;순간적으로 최대 49억(4.9 * 109)번 반복 → 기본, 최대가 있는 것처럼 클럭은 일정하지 않다. &lt;Mark&gt;선택적&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;클럭-신호를-마냥-높이면-cpu가-엄청-빨라질까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9F%AD-%EC%8B%A0%ED%98%B8%EB%A5%BC-%EB%A7%88%EB%83%A5-%EB%86%92%EC%9D%B4%EB%A9%B4-cpu%EA%B0%80-%EC%97%84%EC%B2%AD-%EB%B9%A8%EB%9D%BC%EC%A7%88%EA%B9%8C&quot; aria-label=&quot;클럭 신호를 마냥 높이면 cpu가 엄청 빨라질까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클럭 신호를 마냥 높이면 cpu가 엄청 빨라질까&lt;/h3&gt;
&lt;p&gt;꼭 그런건 아니다 → 필요 이상으로 클럭을 높이면 &lt;Mark&gt;발열&lt;/Mark&gt;이 심해짐&lt;/p&gt;
&lt;h3 id=&quot;클럭-속도를-늘리는-방법-이외에는&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9F%AD-%EC%86%8D%EB%8F%84%EB%A5%BC-%EB%8A%98%EB%A6%AC%EB%8A%94-%EB%B0%A9%EB%B2%95-%EC%9D%B4%EC%99%B8%EC%97%90%EB%8A%94&quot; aria-label=&quot;클럭 속도를 늘리는 방법 이외에는 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클럭 속도를 늘리는 방법 이외에는&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;코어 수&lt;/Mark&gt;를 늘리는 방법(’듀얼 코어’, ‘멀티 코어’, …)&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;스레드 수&lt;/Mark&gt;를 늘리는 방법(’멀티 스레드’, ..)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;코어와-멀티코어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BD%94%EC%96%B4%EC%99%80-%EB%A9%80%ED%8B%B0%EC%BD%94%EC%96%B4&quot; aria-label=&quot;코어와 멀티코어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;코어와 멀티코어&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/8f712274-8871-42fd-8dc4-3c83a23e787e&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;코어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BD%94%EC%96%B4&quot; aria-label=&quot;코어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;코어&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;현대적인 관점에서 “CPU”라는 용어에 대한 재해석 필요&lt;/li&gt;
&lt;li&gt;“명령어를 실행하는 부품” ??&lt;/li&gt;
&lt;li&gt;전통적으로 ‘명령어를 실행하는 부품’은 원칙적으로 하나만 존재&lt;/li&gt;
&lt;li&gt;그러나 오늘날 CPU에는 “명령어를 실행하는 부품”이 여러 개 존재&lt;/li&gt;
&lt;li&gt;“명령어를 실행하는 부품”을 &lt;Mark&gt;코어&lt;/Mark&gt;라는 용어로 사용&lt;/li&gt;
&lt;li&gt;c.f.) ”&lt;Mark&gt;코어&lt;/Mark&gt;“는 명령을 실행할 수 있는 &lt;Mark&gt;CPU 내의 처리 장치&lt;/Mark&gt;이고, ”&lt;Mark&gt;프로세서&lt;/Mark&gt;“는 &lt;Mark&gt;하나 이상의 코어로 구성될 수 있는 전체 CPU 칩&lt;/Mark&gt;을 의미&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/b972b6ed-baac-4db2-8e66-c120a2976590&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;Mark&gt;멀티코어 프로세서&lt;/Mark&gt;: 여러 개의 코어를 포함한 CPU&lt;/p&gt;
&lt;h3 id=&quot;코어를-100개-늘리면-연산-속도도-그에-비례할까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BD%94%EC%96%B4%EB%A5%BC-100%EA%B0%9C-%EB%8A%98%EB%A6%AC%EB%A9%B4-%EC%97%B0%EC%82%B0-%EC%86%8D%EB%8F%84%EB%8F%84-%EA%B7%B8%EC%97%90-%EB%B9%84%EB%A1%80%ED%95%A0%EA%B9%8C&quot; aria-label=&quot;코어를 100개 늘리면 연산 속도도 그에 비례할까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;코어를 100개 늘리면 연산 속도도 그에 비례할까&lt;/h3&gt;
&lt;p&gt;꼭 코어 수 에 비례하여 증가하지는 않는다. 조별과제와 비유하면 된다.
여러개의 코어를 두는 설계방식은 명령어를 각각의 코어에 적절하게 분배하느냐가 중요하다.&lt;/p&gt;
&lt;h2 id=&quot;스레드와-멀티스레드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%EB%A0%88%EB%93%9C%EC%99%80-%EB%A9%80%ED%8B%B0%EC%8A%A4%EB%A0%88%EB%93%9C&quot; aria-label=&quot;스레드와 멀티스레드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스레드와 멀티스레드&lt;/h2&gt;
&lt;p&gt;간단하게는 스레드란 ‘&lt;Mark&gt;실행 흐름의 단위&lt;/Mark&gt;’&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/cc9f3e19-a283-400c-8e12-b93a4e0eb318&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;스레드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8A%A4%EB%A0%88%EB%93%9C&quot; aria-label=&quot;스레드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;스레드&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;하드웨어 스레드&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하나의 코어가 동시에 처리하는 명령어 단위&lt;/li&gt;
&lt;li&gt;멀티 스레드 프로세서, 멀티 스레드 CPU(2코어 4스레드 CPU)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/81171e90-9971-4aae-80aa-637bc67394b4&quot; alt=&quot;image&quot;&gt;
&lt;/br&gt;
&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/0c522fd1-f30b-4294-9407-61d8c67fdc14&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;명령어를 실행하고 해석하는 부품이 8개 있고 각각의 부품이 2개씩의 명령어를 동시에 실행해서 처리할 수 있음 → &lt;Mark&gt;16개의 명령어가 동시에 처리 가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;c.f. ) 하이퍼스레딩: 인텔의 멀티스레드 기술&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;멀티스레드 프로세서를 설계하는 일은 매우 복잡하지만 가장 큰 핵심은 &lt;Mark&gt;레지스터&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/d0663fd6-3ce2-424e-8bb5-6cc1be81bca4&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하나의 명령어를 실행하기 위해서 꼭 필요한 레지스터들을 편의상 ‘레지스터 세트’라고 표기&lt;/li&gt;
&lt;li&gt;레지스터 세트가 하나의 코어 내부에 여러개 존재한다면 하나의 코어가 여러개의 명령어를 동시에 처리 가능&lt;/li&gt;
&lt;li&gt;에를 들어 하나의 코어가 &lt;Mark&gt;PC&lt;/Mark&gt;(메모리에서 다음으로 인출할 명령어의 주소가 저장되는 공간)를 2개들고 있다면 &lt;Mark&gt;다음으로 실행할 명령어의 주소를 2개 지정 가능&lt;/Mark&gt; 혹은 &lt;Mark&gt;스택 포인터(스택의 꼭대기)&lt;/Mark&gt;가 2개 있다고 가정한다면 2개의 스택의 꼭대기를 가리키고 &lt;Mark&gt;2개의 스택 관리 가능.&lt;/li&gt;
&lt;li&gt;이처럼 하나의 명령어를 실행하기 위해서 꼭 필요한 레지스터들을 하나의 코어가 여러개 갖고 있다면 멀티 스레드 프로세서를 설계할 수 있다.
&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/7ce18bfb-bb36-458d-81c5-5e901badf598&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;소프트웨어 스레드&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;하나의 프로그램에서 독립적으로 실행되는 단위&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/7866cfe4-bf27-4b88-93f2-2e33c9472c5c&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;싱글스레드: 한 프로그램이 하나의 실행 흐름만 가지고 순차적으로 실행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;멀티스레드: 하나의 프로그램에서 동시에 2개 이상의 영역이 실행&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/CodeSolving/assets/74396128/85158dd1-ca4e-486e-bf50-9f2c4b7528b1&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하나의 프로그램의 독립적으로 실행되는 단위가 여러개 만들어져서 하나의 프로그램에서 동시에 여러가지 기능을 수행 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;Mark&gt;1코어 1스레드 CPU도 여러 소프트웨어적 스레드를 만들 수 있다, 위 사진처럼&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[CPU의 내부 구성]]></title><description><![CDATA[컴퓨터 구조의 CPU의 내부 구성 - ALU&제어장치&레지스터에 대해서 배웁니다.]]></description><link>https://dltlaos11.github.io/posts/computer-architecture/cpu-internal-structure-of-computer-structure</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/computer-architecture/cpu-internal-structure-of-computer-structure</guid><pubDate>Fri, 25 Aug 2023 23:40:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#CPU%EC%9D%98-%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%84%B1&quot;&gt;CPU의 내부 구성&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ALU&quot;&gt;ALU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A0%9C%EC%96%B4%EC%9E%A5%EC%B9%98&quot;&gt;제어장치&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0&quot;&gt;레지스터&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cpu의-내부-구성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cpu%EC%9D%98-%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;cpu의 내부 구성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CPU의 내부 구성&lt;/h2&gt;
&lt;img width=&quot;303&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/7df1be91-c769-4a5f-98e6-8abb03225dbd&quot;&gt;
&lt;p&gt;&lt;strong&gt;ALU: 계산하는 장치&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;제어장치: 제어 신호를 발생시키고 명령어를 해석하는 장치&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;레지스터&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU 내부의 작은 임시저장장치&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프로그램 속 명령어 &amp;#x26; 데이터는 실행 전후로 레지스터에 저장&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPU 내부에는 다양한 레지스터들이 있고, 각기 다른 역할을 가진다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;alu&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#alu&quot; aria-label=&quot;alu permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ALU&lt;/h3&gt;
&lt;img width=&quot;583&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/df985fec-ae7c-420a-ad76-76650e4870a9&quot;&gt;
&lt;p&gt;&lt;strong&gt;ALU가 받아들이는 정보&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ALU가 레지스터로부터 &lt;Mark&gt;피연산자&lt;/Mark&gt;를 받아들이고 제어장치로부터 &lt;Mark&gt;제어신호&lt;/Mark&gt;를 받아들인다.&lt;/p&gt;
&lt;p&gt;계산을 위해서는 &lt;Mark&gt;피연산자&lt;/Mark&gt;와 &lt;Mark&gt;수행할 연산&lt;/Mark&gt;이 필요&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;피연산자 - 데이터(from 레지스터)&lt;/li&gt;
&lt;li&gt;수행할 연산 - 제어 신호(from 제어장치)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ALU가 내보내는 정보&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;게산의 &lt;Mark&gt;결괏 값&lt;/Mark&gt;은 레지스터에 저장한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU가 레지스터에 접근하는 속도가 메모리 접근하는 속도보다 빠르기 때문&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;연산 결과에 대한 부가정보인 &lt;Mark&gt;플래그&lt;/Mark&gt;를 플래그 레지스터에 저장&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;플래그 종류&lt;/li&gt;
&lt;/ul&gt;
&lt;img width=&quot;628&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/466474dc-8129-4937-9a45-64fdd9e3bb9a&quot;&gt;
&lt;/br&gt;
&lt;img width=&quot;535&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/e086d1e4-b066-4378-a7b4-142e936e9e20&quot;&gt;
&lt;h3 id=&quot;제어장치&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%9C%EC%96%B4%EC%9E%A5%EC%B9%98&quot; aria-label=&quot;제어장치 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;제어장치&lt;/h3&gt;
&lt;img width=&quot;611&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/22954f3e-c120-44a6-bb67-96521de3dbe4&quot;&gt;
&lt;p&gt;&lt;strong&gt;받아들이는(입력) 정보&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;Mark&gt;클럭 신호&lt;/Mark&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;img width=&quot;557&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/8dcf5727-19d0-4a0f-a674-12d94f744bf0&quot;&gt;
&lt;p&gt;클럭 주기에 맞춰서 컴퓨터의 모든 부품을 일사불란하게 움직일 수 있게 하는 시간 단위&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;명령어 레지스터로부터 받아들인 &lt;Mark&gt;해석할 명령어&lt;/Mark&gt;, 제어장치는 그 명령어를 해석해서 제어 신호를 내보냄&lt;/li&gt;
&lt;li&gt;플래그 레지스터로부터 &lt;Mark&gt;플래그&lt;/Mark&gt; 값도 받아들임&lt;/li&gt;
&lt;li&gt;외부로부터 받아들인 &lt;Mark&gt;제어신호&lt;/Mark&gt;를 받아들임&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;내보내는(출력) 정보&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CPU 내부에 전달하는 제어신호
&lt;ul&gt;
&lt;li&gt;레지스터(레지스터 명령어)&lt;/li&gt;
&lt;li&gt;ALU(수행할 연산을 지시)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU 외부에 전달하는 제어신호
&lt;ul&gt;
&lt;li&gt;메모리(메모리 I/O)&lt;/li&gt;
&lt;li&gt;입출력장치(입출력 I/O Test)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;레지스터&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A0%88%EC%A7%80%EC%8A%A4%ED%84%B0&quot; aria-label=&quot;레지스터 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;레지스터&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; 프로그램 카운터(PC): 메모리에서 가져올 명령어의 주소(메모리에서 읽어 들일 명령어의 주소, Instruction Pointor라고 부르는 CPU도 있음)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt; 명령어 레지스터: 해석할 명령어(방금 메모리에서 읽어 들인 명령어 - 제어장치가 해석)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3)&lt;/strong&gt; 메모리 주소 레지스터: 메모리의 주소를 저장(CPU가 읽어 들이고자 하는 주소를 주소 버스로 보낼 떄 거치는 레지스터)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4)&lt;/strong&gt; 메모리 버퍼 레지스터: 메모리와 주고받을 값(데이터와 명령어, CPU가 정보를 데이터 버스로 주고받을 떄 거치는 레지스터)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;메모리에 실행될 프로그램(명령어)이 저장되었을 떄 CPU가 실행할 떄 위 4가지의 레지스터에 담기는 값을 알아보자(&lt;Mark&gt;a~e&lt;/Mark&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;img width=&quot;596&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/7da5a616-42b3-473c-9511-d65e5d20e399&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;a.&lt;/em&gt;&lt;/strong&gt; &lt;Mark&gt;프로그램 카운터(PC)&lt;/Mark&gt;에 다음으로 실행할 메모리로부터 가져올 명령어의 주소(1000)가 저장된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;b.&lt;/em&gt;&lt;/strong&gt; 주소 버스를 통해서 읽고자 하는 주소를 메모리로 보내야한다. &lt;Mark&gt;메모리 주소 레지스터&lt;/Mark&gt;를 거치므로 PC에 저장되어 있는 주소값(다음으로 실행할 명령어의 주소) 메모리 주소 레지스터로 복사&lt;/p&gt;
&lt;img width=&quot;546&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/62fedcf1-76c5-4c6c-862f-a6569f0857dc&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;c.&lt;/em&gt;&lt;/strong&gt; 제어신호(&lt;Mark&gt;메모리 읽기 신호&lt;/Mark&gt;)와 함께 알고싶은 &lt;Mark&gt;메모리 주소&lt;/Mark&gt;(1000번지)를 보낸다.
&lt;img width=&quot;542&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/bdf1b58a-60b0-43a4-9799-66ec04aa59c1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;d.&lt;/em&gt;&lt;/strong&gt; 메모리는 1000번지에 저장된 값(1101)을 &lt;Mark&gt;데이터 버스&lt;/Mark&gt;를 통해서 &lt;Mark&gt;메모리 버퍼 레지스터&lt;/Mark&gt;로 보낸다. 그리고 &lt;Mark&gt;프로그램 카운터&lt;/Mark&gt;는 1이 증가, 1000번지의 명령어를 수행완료 했으니 그 다음 명령어의 주소인 1001번지로 PC가 바뀜
&lt;img width=&quot;503&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/4353e645-926f-430a-883a-c11ae7bb224e&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;메모리에서 갖고오고자 하는 주소를 CPU(메모리 버퍼 레지스터)로 가져왔다면, PC는 1이 증가&lt;/p&gt;
&lt;p&gt;→ 이는 프로그램을 순차적으로 실행할 수 있는 원리가 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;순차적인 실행 흐름이 끊기는 경우
&lt;ul&gt;
&lt;li&gt;특정 메모리 주소로 실행 흐름을 이동하는 명령어 실행 시(e.g. JUMP, CONDITIONAL JUMP, CALL, RET)&lt;/li&gt;
&lt;li&gt;인터럽트 발생 시&lt;/li&gt;
&lt;li&gt;ETC …&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img width=&quot;604&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/0bff4676-fcae-4147-a0c2-23477e76f7ad&quot;&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;e.&lt;/em&gt;&lt;/strong&gt; 메모리 버퍼 레지스터에 저장된 1101명령어를 제어장치가 해석하기 위해서 &lt;Mark&gt;명령어 레지스터(방금 메모리에서 읽어 들인 명령어)&lt;/Mark&gt;에 복사하게 된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5)&lt;/strong&gt; 플래그 레지스터: 연산 결과 또는 CPU 상태에 대한 부가적인 정보&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6)&lt;/strong&gt; 범용 레지스터: 다양하고 일반적인 상황에서 자유롭게(주소, 명령어, 데이터…) 사용&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7)&lt;/strong&gt; 스택 포인터: 스택의 꼭대기를 가리킴
스택과 스택 포인터를 이용한 주소 지정 방식(&lt;Mark&gt;스택 주소 지정 방식&lt;/Mark&gt;)에서 사용되며, 스택의 꼭대기를 가리키는 레지스터(스택이 어디까지 차 있는지에 대한 표시)&lt;/p&gt;
&lt;img width=&quot;599&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/1559c7ad-9738-478e-b87b-eac292eea783&quot;&gt;
&lt;p&gt;c.f.) 참고로 스택은 메모리 안에 스택 영역이 따로 존재&lt;/p&gt;
&lt;img width=&quot;606&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/8e85af34-91bf-493a-9792-a98f758a1238&quot;&gt;
&lt;p&gt;&lt;strong&gt;8)&lt;/strong&gt; 베이스 레지스터: 기준 주소 저장
오퍼랜드 필드의 값(변위)과 &lt;Mark&gt;특정 레지스터&lt;/Mark&gt;의 값을 더하여 유효 주소를 얻는 &lt;Mark&gt;변위 주소 지정 방식&lt;/Mark&gt;에서 사용&lt;/p&gt;
&lt;img width=&quot;631&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/7b9f6897-d693-4558-99f1-72dc51a83750&quot;&gt;
&lt;p&gt;변위 주소 지정 방식을 사용하는 명령어는 다음과 같은 형태를 갖고 있다.&lt;/p&gt;
&lt;img width=&quot;638&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/c09ae0f5-5c23-4c73-8076-a6d51d8654bf&quot;&gt;
&lt;p&gt;&lt;Mark&gt;특정 레지스터의 종류&lt;/Mark&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;프로그램 카운터&lt;/p&gt;
&lt;p&gt;상대 주소 지정 방식: 오퍼랜드 필드의 값(변위)과 프로그램 카운터의 값을 더하여 유효 주소 얻기&lt;/p&gt;
&lt;img width=&quot;585&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/81104484-089c-42b3-86dd-50f7800a3651&quot;&gt;
&lt;p&gt;C에는 CPU가 메모리로부터 읽어올 메모리의 주소가 담기는데 읽어올 메모리로부터 3번지 이전에 명령어를 실행하는 명령어의 구조(&lt;Mark&gt;오퍼랜드 필드의 값&lt;/Mark&gt;)와 프로그램 카운터(다음으로 읽어들일 메모리 주소) 값을 더하는 경우&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;베이스 레지스터&lt;/p&gt;
&lt;p&gt;베이스 레지스터 주소 지정 방식: 오퍼랜드 필드의 값(변위)과 베이스 레지스터의 값을 더하여 유효 주소 얻기&lt;/p&gt;
&lt;img width=&quot;587&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/179c46d9-a6de-47c0-9664-1a5547cff7ab&quot;&gt;
&lt;p&gt;베이스 레지스터는 &lt;Mark&gt;기준 주소 저장&lt;/Mark&gt; 역할&lt;/p&gt;
&lt;p&gt;c.f.) 메모리에 저장되어 있는 주소(200, 250번지)와 CPU가 인식하는 주소는 다르다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[C 언어의 컴파일 과정]]></title><description><![CDATA[컴퓨터 구조, C 언어의 컴파일 과정에 대해서 배웁니다.]]></description><link>https://dltlaos11.github.io/posts/c/compile-process</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/c/compile-process</guid><pubDate>Fri, 25 Aug 2023 22:40:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A0%84%EC%B2%98%EB%A6%AC&quot;&gt;전처리 과정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BB%B4%ED%8C%8C%EC%9D%BC&quot;&gt;컴파일 과정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%96%B4%EC%85%88%EB%B8%94&quot;&gt;어셈블 과정&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A7%81%ED%82%B9&quot;&gt;링킹&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img width=&quot;674&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/771d17f8-8265-4ebe-9c96-968bd38efa64&quot;&gt;
&lt;p&gt;컴파일 언어는 컴파일러에 의해 컴파일 되고 목적코드가 된다&lt;/p&gt;
&lt;p&gt;전처리 → 컴파일 → 어셈블 → 링킹의 과정을 거쳐서 실행파일이 된다.&lt;/p&gt;
&lt;h2 id=&quot;전처리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%84%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;전처리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;전처리&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;전처리 과정(preprocessing)&lt;/strong&gt;&lt;/p&gt;
&lt;img width=&quot;662&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/46cca75c-34fe-4aeb-9558-e4f6b52cddce&quot;&gt;
&lt;ul&gt;
&lt;li&gt;본격적으로 컴파일하기 전에 처리할 작업들&lt;/li&gt;
&lt;li&gt;외부에 선언된 다양한 소스 코드, 라이브러리 포함 (e.f. #include)&lt;/li&gt;
&lt;li&gt;프로그래밍의 편의를 위해 작성된 매크로 변환(e.g. #define)&lt;/li&gt;
&lt;li&gt;컴파일할 영역 표시&lt;/li&gt;
&lt;/ul&gt;
&lt;img width=&quot;349&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/a8ab648d-2bf6-4cd0-a534-6ecc52f3cf6f&quot;&gt;
&lt;br&gt;
&lt;img width=&quot;321&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/8c6530c1-4440-429a-8b7c-982922549f2c&quot;&gt;
&lt;br&gt;
&lt;img width=&quot;650&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/b4cdec3a-5d7b-4e8f-9cd5-b5df3dc9042a&quot;&gt;
&lt;p&gt;c.f.) gcc(컴파일러)&lt;/p&gt;
&lt;p&gt;→ 외부에서 사용되는 소스코드를 가져오는 과정은 전처리 과정의 일부이며 컴파일할 준비를 하는 단계&lt;/p&gt;
&lt;h2 id=&quot;컴파일&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%8C%8C%EC%9D%BC&quot; aria-label=&quot;컴파일 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴파일&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;컴파일 과정(compiling)&lt;/strong&gt;&lt;/p&gt;
&lt;img width=&quot;661&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/d7e39da7-5770-4168-b207-f08e88e7d523&quot;&gt;
&lt;ul&gt;
&lt;li&gt;전처리가 완료 되어도 여전히 소스 코드&lt;/li&gt;
&lt;li&gt;전처리 완료된 소스 코드를 저급 언어(어셈블리 언어)로 변환&lt;/li&gt;
&lt;/ul&gt;
&lt;img width=&quot;341&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/a0c18fda-39c3-419c-8db1-d93a1621d25b&quot;&gt;
&lt;br&gt;
&lt;img width=&quot;676&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/ededd508-c3d5-4d1e-b592-cca280ad8b72&quot;&gt;
&lt;h2 id=&quot;어셈블&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%96%B4%EC%85%88%EB%B8%94&quot; aria-label=&quot;어셈블 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;어셈블&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;어셈블 과정(assembling)&lt;/strong&gt;&lt;/p&gt;
&lt;img width=&quot;663&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/55b67bcb-9b56-4e32-8ac3-ad981513cc48&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;어셈블리어를 기계어로 변환&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;목적 코드(object file)를 포함하는 목적 파일이 됨&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;목적 파일 vs 실행 파일&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;목적 파일과 실행 파일은 둘 다 기계어로 이루어진 파일&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하지만 목적 파일과 실행 파일은 다르다&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;목적 파일은 링킹(linking)을 거친 후에야 실행 파일이 된다.&lt;/p&gt;
&lt;img width=&quot;296&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/36eb5b31-19aa-4622-bf25-33bd9c41952e&quot;&gt;
&lt;/br&gt;
&lt;img width=&quot;676&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/ddb0c9d4-8582-48d4-b9c3-4f26072e2f1b&quot;&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ print 하고자 했던 문자들도 0과 1로 표현되어 있음.&lt;/p&gt;
&lt;h2 id=&quot;링킹&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A7%81%ED%82%B9&quot; aria-label=&quot;링킹 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;링킹&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;링킹(linking)&lt;/strong&gt;&lt;/p&gt;
&lt;img width=&quot;670&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/8b339d06-ddfa-4823-990f-c68c1a235474&quot;&gt;
&lt;/br&gt;
&lt;img width=&quot;653&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/9ee1e23d-270c-4a3f-b146-ed960efb0959&quot;&gt;
&lt;/br&gt;
&lt;img width=&quot;662&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/d0c535dc-77b9-4ea6-aca3-477bf316c512&quot;&gt;
&lt;p&gt;→ main.o와 helper.o의 목적코드를 하나의 실행파일로 연결시켜주는 링킹 작업이 필요&lt;/p&gt;</content:encoded></item><item><title><![CDATA[배열과 연결리스트]]></title><description><![CDATA[자바스크립트에서 사용되는 배열과 연결리스트에 대해서 배웁니다.]]></description><link>https://dltlaos11.github.io/posts/algorithms/array&amp;linked-list</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/algorithms/array&amp;linked-list</guid><pubDate>Fri, 25 Aug 2023 21:40:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B0%B0%EC%97%B4&quot;&gt;배열&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A0%95%EC%9D%98%EC%99%80-%EC%84%B1%EC%A7%88&quot;&gt;정의와 성질&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B8%B0%EB%8A%A5%EA%B3%BC-%EA%B5%AC%ED%98%84&quot;&gt;기능과 구현&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%99%80-%EB%B0%B0%EC%97%B4&quot;&gt;자바스크립트와 배열&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%8D%94%EB%B8%94%EB%A7%81&quot;&gt;더블링&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8&quot;&gt;연결리스트&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A0%95%EC%9D%98%EC%99%80-%EC%84%B1%EC%A7%88&quot;&gt;정의와 성질&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B0%B0%EC%97%B4-vs-%EC%97%B0%EA%B2%B0-%EB%A6%AC%EC%8A%A4%ED%8A%B8&quot;&gt;배열 vs 연결 리스트&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B8%B0%EB%8A%A5%EA%B3%BC-%EA%B5%AC%ED%98%84&quot;&gt;기능과 구현&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;배열&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%B0%EC%97%B4&quot; aria-label=&quot;배열 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;배열&lt;/h2&gt;
&lt;h4 id=&quot;정의와-성질&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EC%9D%98%EC%99%80-%EC%84%B1%EC%A7%88&quot; aria-label=&quot;정의와 성질 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정의와 성질&lt;/h4&gt;
&lt;img width=&quot;677&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/efe26000-5fe5-405f-b6aa-512812ecf53c&quot;&gt;
&lt;h4 id=&quot;배열-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%B0%EC%97%B4-1&quot; aria-label=&quot;배열 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;배열&lt;/h4&gt;
&lt;p&gt;메모리 상에 원소를 연속해서 배치한 자료구조&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;배열의 성질&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; O(1)에 k번째 원소를 확인/변경 가능&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; 추가적으로 소모되는 메모리의 양(=overhead)가 거의 없음&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; 메모리 상에 데이터들이 붙어있으므로 Cache hit rate가 높음&lt;/p&gt;
&lt;p&gt;Cache hit rate&lt;/p&gt;
&lt;p&gt;간단히 “적중률”이라고도 하는 Cache hit rate은 원본 데이터 소스에서 데이터를 가져올 필요 없이 요청된 데이터를 제공하는 캐시 시스템의 효율성을 측정하는 지표. 이는 요청된 항목이 캐시에서 얼마나 자주 발견(또는 “적중”)되는지를 총 요청의 백분율로 수량화한다.&lt;/p&gt;
&lt;p&gt;캐시(Cache)&lt;/p&gt;
&lt;p&gt;컴퓨팅에서 &lt;Mark&gt;캐시는&lt;/Mark&gt; 주 메모리(RAM) 또는 디스크 저장소와 같이 더 크고 느린 저장 매체에서 자주 액세스하는 데이터의 복사본을 저장하는 더 작고 빠른 저장 메커니즘.&lt;/p&gt;
&lt;p&gt;캐시의 목적&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;Mark&gt;자주 사용하는 데이터를 프로세서나 이를 필요로 하는 기타 구성 요소에 더 가깝게 저장하여 자주 사용하는 데이터에 액세스하는 데 걸리는 시간을 줄이는 것&lt;Mark&gt;이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로세서(&lt;strong&gt;Processor&lt;/strong&gt;), 프로세스(&lt;strong&gt;Process&lt;/strong&gt;)
&lt;ul&gt;
&lt;li&gt;“프로세서”(CPU)는 컴퓨터 프로그램의 명령을 실행하는 하드웨어 구성 요소입니다. 컴퓨터 시스템의 주요 계산 단위이다.&lt;/li&gt;
&lt;li&gt;“프로세스”는 실행 중인 프로그램의 인스턴스를 나타내는 소프트웨어 개념입니다. 자체 메모리와 리소스가 있으며 여러 프로세스가 단일 프로세서 또는 여러 프로세서에서 동시에 실행될 수 있다.
멀티태스킹 운영 체제에서는 시간 공유 및 스케줄링 메커니즘 덕분에 여러 프로세스가 단일 프로세서에서 동시에 실행될 수 있습니다. 각 프로세스는 실행할 시간 조각을 가져오므로 프로세서가 한 번에 하나의 명령만 실행할 수 있더라도 동시 실행이 가능한 것처럼 보인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;캐시 적중률이 높은경우&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;요청된 데이터 중 더 많은 부분이 캐시에서 효율적으로 처리되고 있음을 의미하므로 데이터 액세스 시간이 빨라지고 시스템 성능이 향상된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;캐시 적중률이 낮은 경우&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;캐시가 요청된 데이터를 처리하는 데 덜 효과적이라는 것을 의미하며, 이로 인해 느린 데이터 소스에 더 자주 액세스하게 되어 잠재적으로 성능이 저하될 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; 메모리 상에 연속한 구간을 잡아야 해서 할당에 제약이 걸림&lt;/p&gt;
&lt;h4 id=&quot;기능과-구현&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EB%8A%A5%EA%B3%BC-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;기능과 구현 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기능과 구현&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;임의의 위치에 있는 원소를 확인/변경 = O(1)&lt;/li&gt;
&lt;li&gt;원소를 끝에 추가 = O(1)&lt;/li&gt;
&lt;li&gt;마지막 원소를 제거 = O(1)&lt;/li&gt;
&lt;li&gt;임의의 위치에 원소를 추가,제거 = &lt;Mark&gt;O(N)&lt;/Mark&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;idx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;erase&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;idx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;erase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;70&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; len2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;idx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; len2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; idx&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;idx&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 배열의 오른쪽에서부터 왼쪽 항을 오른쪽으로 옮기기&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// i &gt;= idx -&gt; arr[0] = arr[-1] 런타임 에러&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// console.log(arr, len2);&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;erase&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;idx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; idx&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; len2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// 왼쪽으로 옮기기&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; len2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;erase&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; len2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;push, pop ⇒ O(1)의 시간복잡도를 갖는다.&lt;/p&gt;
&lt;h2 id=&quot;자바스크립트와-배열&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%99%80-%EB%B0%B0%EC%97%B4&quot; aria-label=&quot;자바스크립트와 배열 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자바스크립트와 배열&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; myArray &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 빈 배열 생성&lt;/span&gt;
myArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 요소 추가&lt;/span&gt;
myArray&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JavaScript의 배열은 &lt;Mark&gt;동적 배열(dynamic array)&lt;/Mark&gt;의 개념을 기반으로 구현되어 있다. 동적 배열은 크기가 동적으로 조정되는 배열로, 고정 크기의 배열과는 달리 요소를 추가하거나 제거할 때 자동으로 크기를 조절한다.&lt;/p&gt;
&lt;p&gt;JavaScript 배열의 동적 배열 특징:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;크기 조정:&lt;/strong&gt; JavaScript 배열은 내부적으로 요소를 저장하는 버퍼와 인덱스를 관리한다. 요소를 추가하거나 삭제할 때, 필요에 따라 자동으로 내부 버퍼의 크기를 조절하여 데이터를 저장한다&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;편리한 삽입과 삭제:&lt;/strong&gt; 배열의 중간에 요소를 삽입하거나 삭제하는 경우, 배열은 이전 요소를 뒤로 옮기거나 삭제된 요소 이후의 요소를 당겨오는 등의 작업을 내부적으로 처리한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;인덱스를 통한 빠른 접근:&lt;/strong&gt; 배열은 각 요소가 인덱스로 접근 가능하므로, 인덱스를 알고 있다면 빠르게 요소에 접근할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;메모리 관리:&lt;/strong&gt; 동적 배열은 메모리를 효율적으로 사용하기 위해 요소가 실제로 저장되는 버퍼 크기를 조절한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;하지만 JavaScript 배열의 동적 배열 특성 때문에, 요소를 추가하거나 삭제할 때마다 내부적으로 크기를 조절하거나 버퍼를 재할당하는 작업이 발생할 수 있다. 이는 대부분의 상황에서는 성능에 큰 문제가 없지만, 매우 큰 배열이나 많은 요소를 처리하는 경우에는 성능 상의 고려가 필요할 수 있다.&lt;/p&gt;
&lt;h4 id=&quot;더블링&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%94%EB%B8%94%EB%A7%81&quot; aria-label=&quot;더블링 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;더블링&lt;/h4&gt;
&lt;p&gt;동적 배열에서 &lt;Mark&gt;“더블링”(doubling)&lt;/Mark&gt;은 배열의 크기를 효율적으로 확장하기 위한 일반적인 전략 중 하나이다. 더블링 전략은 배열이 꽉 찼을 때(즉, 버퍼가 다 찼을 때) 배열의 크기를 두 배로 늘리는 방식&lt;/p&gt;
&lt;p&gt;더블링 전략의 장점&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;효율적인 크기 조정:&lt;/strong&gt; 더블링을 사용하면 배열이 계속해서 요소를 추가해도 상대적으로 적은 크기의 재할당 작업이 발생하므로, 성능 향상을 도모할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Amortized(&lt;Mark&gt;분할 상환&lt;/Mark&gt;) O(1) 삽입 시간:&lt;/strong&gt; 더블링을 활용한 동적 배열은 각 삽입 작업에 대해, &lt;Mark&gt;모든 요소를 새로운 크기의 배열로 각 요소를 복사해야 하므로 O(N)의 시간 복잡도를 갖지만&lt;/Mark&gt;, 평균적으로 상수 시간(O(1))을 보장합니다. → &lt;Mark&gt;분할 상환 분석&lt;/Mark&gt;이라 한다&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;더블링 전략의 단점&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;메모리 사용 증가:&lt;/strong&gt; 더블링은 배열이 커질 때마다 두 배로 메모리를 할당하므로, 크기가 큰 배열일수록 메모리 사용량도 크게 증가할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;미리 할당되는 메모리 양:&lt;/strong&gt; 배열 크기를 늘릴 때마다 두 배로 늘리는 것이기 때문에, 작은 크기의 배열에도 비교적 큰 메모리가 미리 할당될 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;연결리스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%B0%EA%B2%B0%EB%A6%AC%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;연결리스트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;연결리스트&lt;/h2&gt;
&lt;h4 id=&quot;정의와-성질-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EC%9D%98%EC%99%80-%EC%84%B1%EC%A7%88-1&quot; aria-label=&quot;정의와 성질 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정의와 성질&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;연결리스트의 성질&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;k번째 원소를 확인/변경하기 위해 O(k)가 필요함
&lt;ul&gt;
&lt;li&gt;배열과 다르게 공간에 원소들이 연속해서 위치하고 있지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;임의의 위치에 원소를 추가/임의 위치의 원소 제거는 O(1)&lt;/li&gt;
&lt;li&gt;원소들이 메모리 상에 연속해있지 않아 Cache hit rate가 낮지만 할당이 다소 쉽다&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;연결리스트의 종류&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;단일 연결 리스트(Singly Linked List)
&lt;img width=&quot;650&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/ec942403-edd9-4e0b-a3c9-41c51aa5bda4&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;이중 연결 리스트(Doubly Linked List)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단일 연결 리스트에서는 이전 원소를 몰랐지만, 알 수 있다. 다만 원소가 가지고 있어야 하는 정보가 1개 더 추가되니 메모리를 더 쓴다는 단점이 존재
&lt;img width=&quot;651&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/5aae2c15-383d-4ab0-bd85-4d5b2d15a590&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;원형 연결 리스트(Circular Linked List)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;각 원소가 이전과 다음 원소의 주소를 모두 가지고 있어도 상관❌
&lt;img width=&quot;645&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/73d3e1f4-a039-49e9-9109-81bcd75fb697&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;배열-vs-연결-리스트&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%B0%EC%97%B4-vs-%EC%97%B0%EA%B2%B0-%EB%A6%AC%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;배열 vs 연결 리스트 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;배열 vs 연결 리스트&lt;/h4&gt;
&lt;p&gt;배열과 연결 리스트는 메모리 상에 원소를 놓는 방법이 다르다 해도 원소들 사이의 선후 관계가 일대일로 정의
→ 원소들 사이의 순서가 존재, &lt;Mark&gt;선형 자료구조&lt;/Mark&gt;라 한다. c.f.) 트리, 그래프, 해쉬 등은 &lt;Mark&gt;비선형 자료구조&lt;/Mark&gt;&lt;/p&gt;
&lt;img width=&quot;679&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/bd5bdc96-02ec-4ece-aa7d-27cc6ecbe9f1&quot;&gt;
&lt;ul&gt;
&lt;li&gt;연결 리스트에서는 각 원소가 다음 원소, 혹은 이전과 다음 원소의 주소값을 가지고 있어야 함. 그래서 32비트 컴퓨터면 주소값이 32비트(=4바이트)단위이니 4N바이트가 추가로 필요, 64비트 컴퓨터면 주소값이 64비트(=8바이트) 8N 바이트가 추가로 필요. 즉 N에 비례하는 만큼의 메모리를 추가로 사용
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;32bit Computer Architecture&lt;/Mark&gt;
32비트 컴퓨터 아키텍처에서 “워드”라고 알려진 메모리 저장의 기본 단위는 일반적으로 32비트이며 이는 4바이트에 해당. 각 메모리 주소는 32비트 값을 보유하는 위치를 가리킵니다. 이는 컴퓨터의 메모리가 각각 4바이트의 개별 단위로 나누어져 있음을 의미&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;기능과-구현-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EB%8A%A5%EA%B3%BC-%EA%B5%AC%ED%98%84-1&quot; aria-label=&quot;기능과 구현 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기능과 구현&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; 임의의 위치에 있는 원소를 확인/변경, O(N)
&lt;img width=&quot;649&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/b3cbfce7-3cc8-4c27-9933-32b71c1f97fb&quot;&gt;
k번쨰 원소를 보기 위해서는 O(k)의 시간이 필요하고, 전체에 N개의 원소가 있다고 하면 평균적으로 N/2의 시간이 필요할테니 O(N)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; 임의의 위치에 원소를 추가, O(1)
&lt;img width=&quot;649&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/5277e0aa-de21-4072-a1ce-3314148a8d27&quot;&gt;
21뒤에 84를 추가하는 작업은 배열처럼 그 뒤의 원소들을 모두 옮길 필요가 없고, 21과 84에 다음원소의 주소만 바꾸어 주면 된다. 단, 추가하고 싶은 위치의 주소를 알고 있을 경우에만 O(1). 만약 21의 주소를 주는 것이 아니라 3번쨰 원소 뒤에 84를 추가하는 경우에는 3번쨰 원소까지 찾아가야하는 시간이 걸리므로 O(1)이라 할 수 없음.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; 임의 원소를 제거, O(1)
&lt;img width=&quot;644&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/62f8b2fc-637c-4d08-b9fd-e66bddc92e72&quot;&gt;
21을 지우고 65의 주소를 17로 변경하면 된다. 단, 21이 들어있는 원소는 메모리 누수를 막기 위해 메모리에서 없애줘야 한다.&lt;/p&gt;
&lt;p&gt;임의의 위치에 있는 원소를 확인/변경 = O(N)
임의의 위치에 원소를 추가/임의 위치의 원소 제거 = O(1)&lt;/p&gt;
&lt;p&gt;→ 임의의 위치에서 원소를 추가하거나 임의 위치의 원소를 제거하는 연산을 많이 해야하는 경우에는 연결 리스트의 사용을 고려해보는 것이 좋다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;연결리스트의 구현&lt;/strong&gt;
보통 연결리스트의 정석적인 구현은 NODE 구조체나 클래스를 만들어서 원소가 생성될 떄 동적할당을 하는 방식.
&lt;img width=&quot;471&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/61083722-f7ce-44b4-934b-2f8917987e87&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Linkedlist &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token literal-property property&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token literal-property property&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token literal-property property&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token literal-property property&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token literal-property property&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;1. 노드(Node): 연결리스트에서 하나의 데이터 단위&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data field와 link field로 구성되어 있음&lt;/li&gt;
&lt;li&gt;vertex(버텍스, 꼭지점의 의미)이라고 부르기도 함&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. Data Field: 노드의 값이 저장된 곳&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;element라는 변수 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. Link Field: 다음 노드의 주소가 저장된 곳&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;next 변수 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4. Head: 첫 노드&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Tail: 마지막 노드(null)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;element &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; element&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LinkedList&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;head &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;head&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;newElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; newNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newElement&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//새로운 노드 생성&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; current &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;head&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 시작 노드&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token comment&quot;&gt;// 맨 끝 노드 찾기&lt;/span&gt;
      current &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; newNode&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;newElement&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; newNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;newElement&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//새로운 노드 생성&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; current &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 삽입할 위치의 노드 찾기&lt;/span&gt;
    newNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 찾은 노드가 가리키는 노드를 새로은 노드가 가리키기&lt;/span&gt;
    current&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; newNode&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 찾은 노드는 이제부터 새로운 노드를 가리키도록 하기&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; preNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;findPrevious&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 삭제할 노드를 가리키는 노드 찾기&lt;/span&gt;
    preNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; preNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 삭제할 노드 다음 노드를 가리키도록 하기&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; currNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;head&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Node의 head 부터 탐색&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;element &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      currNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; currNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; currNode&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;findPrevious&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; currNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;head&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Node의 head 부터 탐색&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; currNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;element &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; item&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      currNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; currNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; currNode&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; currNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;head&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;element&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      currNode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; currNode&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; linkedList &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
linkedList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;head&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
linkedList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
linkedList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
linkedList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;B&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
linkedList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;D&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

linkedList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;E&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;linkedList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// [&apos;A&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&quot;reference&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#reference&quot; aria-label=&quot;reference permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reference&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=C6MX5u7r72E&amp;#x26;list=PLtqbFd2VIQv4O6D6l9HcD732hdrnYb6CY&amp;#x26;index=5&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;[바킹독의 실전 알고리즘] 0x04강 - 연결 리스트&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=dvKuG3gfLFQ&amp;#x26;t=752s&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;[2022 JS 알고리즘] 002. 연결리스트&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[명령어의 구조와 주소 지정 방식]]></title><description><![CDATA[컴퓨터 구조의 명령어의 구조와 주소 지정 방식에 대해서 배웁니다.]]></description><link>https://dltlaos11.github.io/posts/computer-architecture/instruction-structure-and-addressing-method</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/computer-architecture/instruction-structure-and-addressing-method</guid><pubDate>Thu, 24 Aug 2023 23:40:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%97%B0%EC%82%B0-%EC%BD%94%EB%93%9C&quot;&gt;연산 코드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%98%A4%ED%8D%BC%EB%9E%9C%EB%93%9C&quot;&gt;오퍼랜드&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A3%BC%EC%86%8C-%EC%A7%80%EC%A0%95-%EB%B0%A9%EC%8B%9D&quot;&gt;명령어 주소 지정 방식&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img width=&quot;655&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/97930271-9ee6-4c31-a3b8-678ce9a78ade&quot;&gt;
&lt;p&gt;명령어는 연산 코드와 오퍼랜드로 구성된다.&lt;/p&gt;
&lt;h2 id=&quot;연산-코드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%97%B0%EC%82%B0-%EC%BD%94%EB%93%9C&quot; aria-label=&quot;연산 코드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;연산 코드&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;연산 코드: 수행할 연산&lt;/p&gt;
&lt;p&gt;대표적인 연산 코드의 종류&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;데이터 전송
CPU마다 연산코드의 종류가 다르므로 유형을 파악
&lt;ul&gt;
&lt;li&gt;MOVE: 데이터 옮겨라(레지스터에서 다른 레지스터의 데이터 이동)&lt;/li&gt;
&lt;li&gt;STORE: 메모리에 저장&lt;/li&gt;
&lt;li&gt;LOAD(FETCH): 메모리에서 CPU로 데이터를 가져와라&lt;/li&gt;
&lt;li&gt;PUSH: 스택에 데이터를 저장하라&lt;/li&gt;
&lt;li&gt;POP: 스택의 최상단 데이터를 가져와라&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;산술/논리 연산
&lt;img width=&quot;630&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/8ed6ff54-8c07-4522-b337-171ad8358c75&quot;&gt;&lt;/li&gt;
&lt;li&gt;제어 흐름 변경
&lt;img width=&quot;626&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/a6f47f37-faa7-4364-a373-c067a3e5e9b9&quot;&gt;&lt;/li&gt;
&lt;li&gt;입출력 제어
&lt;img width=&quot;629&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/37450662-4e37-4e11-bd4f-67a253bb066a&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;c.f.) 연산 코드의 종류 &amp;#x26; 생김새는 &lt;Mark&gt;CPU&lt;/Mark&gt; 마다 다르다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;오퍼랜드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%98%A4%ED%8D%BC%EB%9E%9C%EB%93%9C&quot; aria-label=&quot;오퍼랜드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;오퍼랜드&lt;/h2&gt;
&lt;p&gt;오퍼랜드: 연산에 사용될 데이터 혹은 &lt;Mark&gt;연산에 사용될 데이터가 저장된 위치&lt;/Mark&gt;(주로 저장되는 정보), 오퍼랜드 필드를 &lt;Mark&gt;주소 필드(메모리 주소, 레지스터)&lt;/Mark&gt;라고 하기도 한다.&lt;/p&gt;
&lt;p&gt;어셈블리어나 기계어는 저급언어들은 &lt;Mark&gt;명령어&lt;/Mark&gt;로 이루어져 있다.&lt;/p&gt;
&lt;img width=&quot;656&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/9777e2f1-87ed-4dff-9d51-aa5a1a43bf6c&quot;&gt;
&lt;img width=&quot;654&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/c52148c4-bb51-4f96-b5b6-6e86652de234&quot;&gt;
&lt;p&gt;붉은색 글자가 연산코드이고, 우측에 있는 글자가 오퍼랜드이다. 오퍼랜드가 없는 경우, 1개 이상인 경우도 존재&lt;/p&gt;
&lt;h4 id=&quot;명령어-주소-지정-방식&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%A3%BC%EC%86%8C-%EC%A7%80%EC%A0%95-%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;명령어 주소 지정 방식 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;명령어 주소 지정 방식&lt;/h4&gt;
&lt;h5 id=&quot;왜-굳이-오퍼랜드에-저장된-위치를-사용할까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%99%9C-%EA%B5%B3%EC%9D%B4-%EC%98%A4%ED%8D%BC%EB%9E%9C%EB%93%9C%EC%97%90-%EC%A0%80%EC%9E%A5%EB%90%9C-%EC%9C%84%EC%B9%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%A0%EA%B9%8C&quot; aria-label=&quot;왜 굳이 오퍼랜드에 저장된 위치를 사용할까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;왜 굳이 오퍼랜드에 저장된 위치를 사용할까?&lt;/h5&gt;
&lt;p&gt;=&gt; 명령어 내에서 표현할 수 있는 데이터의 크기가 제한되기 때문
&lt;img width=&quot;657&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/96d41a2c-ea11-4de1-b76a-01fb548863b3&quot;&gt;
&lt;img width=&quot;657&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/96439245-45ab-4236-a676-ce62d4af6513&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;유효 주소(effective address)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;연산에 사용할 데이터가 저장된 위치&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;명령어 주소 지정 방식(addressing modes)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;연산에 사용할 데이터가 저장된 위치를 찾는 방법&lt;/li&gt;
&lt;li&gt;유효 주소를 찾는 방법&lt;/li&gt;
&lt;li&gt;다양한 명령어 주소 지정 방식들 존재
&lt;ul&gt;
&lt;li&gt;즉지 주소 지정 방식(immediate addressing mode)
&lt;ul&gt;
&lt;li&gt;연산에 사용할 데이터를 오퍼랜드 필드에 직접 명시&lt;/li&gt;
&lt;li&gt;가장 간단한 형태의 주소 지정 방식&lt;/li&gt;
&lt;li&gt;연산에 사용할 데이터의 크기가 작아질 수 있지만, 빠름
&lt;img width=&quot;599&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/a5770823-f552-4040-9e56-d615eb2fb5b6&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;직접 주소 지정 방식(direct addressing mode)
&lt;ul&gt;
&lt;li&gt;오퍼랜드 필드에 유효 주소 직접적으로 명시&lt;/li&gt;
&lt;li&gt;유효 주소를 표현할 수 있는 크기가 연산 코드만큼 줄어듦
&lt;img width=&quot;601&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/0e023bcd-a385-483a-bc9f-3b37c74bb605&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;간접 주소 지정 방식(indirect addressing mode)
&lt;ul&gt;
&lt;li&gt;오퍼랜드 필드에 유효 주소의 주소를 명시&lt;/li&gt;
&lt;li&gt;앞선 주소 지정 방식들에 비해 속도가 느림
&lt;img width=&quot;602&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/64f0631e-b2e0-4574-8dd0-7a38fd7635ed&quot;&gt;
&lt;Mark&gt;c.f.) CPU가 메모리를 찾아가는 과정은 속도가 느리다, 메모리 접근을 최소화 해야함.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;레지스터 주소 지정 방식(register addressing mode)
&lt;ul&gt;
&lt;li&gt;연산에 사용할 데이터가 저장된 레지스터 명시&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;CPU가 메모리에 접근하는 속도보다 레지스터에 접근하는 것이 빠름🔥 - 레지스터는 CPU안에 존재
&lt;img width=&quot;601&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/61bb3663-00a5-439d-b020-150dda7629ce&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;레지스터 간접 주소 지정 방식(register indirect addressing mode)
&lt;ul&gt;
&lt;li&gt;연산에 사용할 데이터를 메모리에 저장&lt;/li&gt;
&lt;li&gt;그 주소를 저장한 레지스터를 오퍼랜드 필드에 명시
&lt;img width=&quot;597&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/12bdfefa-dfbb-403f-a610-c494d1e1f434&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[JS 인터프리터 언어, 컴파일 언어🤔]]></title><description><![CDATA[자바스크립트 코드 실행 동작 원리: 엔진, 가상머신, 인터프리터, AST 기초 등에 대해서 배웁니다.]]></description><link>https://dltlaos11.github.io/posts/javascript/how-javascript-code-execution-works</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/javascript/how-javascript-code-execution-works</guid><pubDate>Thu, 24 Aug 2023 21:40:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B3%A0%EA%B8%89%EC%96%B8%EC%96%B4%EC%99%80-%EC%A0%80%EA%B8%89%EC%96%B8%EC%96%B4&quot;&gt;고급언어와 저급언어&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B3%A0%EA%B8%89%EC%96%B8%EC%96%B4&quot;&gt;고급언어&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B0%94%EC%9D%B4%ED%8A%B8%EC%BD%94%EB%93%9C&quot;&gt;바이트코드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A0%80%EA%B8%89%EC%96%B8%EC%96%B4&quot;&gt;저급언어&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B5%AC%EB%8F%99-%EC%9B%90%EB%A6%AC&quot;&gt;자바스크립트 구동 원리&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%97%94%EC%A7%84&quot;&gt;자바스크립트 엔진&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EC%9D%98-%EB%93%B1%EC%9E%A5&quot;&gt;자바스크립트 컴파일의 등장&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%BB%B4%ED%8C%8C%EC%9D%BC-%EC%96%B8%EC%96%B4%EC%9D%98-%EC%84%B1%EB%8A%A5%EC%9D%B4-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0-%EC%96%B8%EC%96%B4%EC%9D%98-%EC%84%B1%EB%8A%A5%EB%B3%B4%EB%8B%A4-%EC%A2%8B%EC%9D%84%EA%B9%8C&quot;&gt;그렇다면 컴파일 언어의 성능이 인터프리터 언어의 성능보다 좋을까?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EC%BB%B4%ED%8C%8C%EC%9D%BC&quot;&gt;자바스크립트의 컴파일&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9E%98%EC%84%9C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0-%EC%96%B8%EC%96%B4%EC%9D%BC%EA%B9%8C&quot;&gt;그래서 자바스크립트는 인터프리터 언어일까?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;고급언어와-저급언어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B3%A0%EA%B8%89%EC%96%B8%EC%96%B4%EC%99%80-%EC%A0%80%EA%B8%89%EC%96%B8%EC%96%B4&quot; aria-label=&quot;고급언어와 저급언어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;고급언어와 저급언어&lt;/h2&gt;
&lt;h4 id=&quot;고급언어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B3%A0%EA%B8%89%EC%96%B8%EC%96%B4&quot; aria-label=&quot;고급언어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;고급언어&lt;/h4&gt;
&lt;img width=&quot;702&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/chan-study/assets/74396128/cccc8092-8864-4af2-9ed3-c793c9298db3&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;고급언어: 개발자가 이해하기 쉽게 만든언어
&lt;img width=&quot;680&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/chan-study/assets/74396128/0a92504f-f9ef-4a1d-8947-5d9ae5a4f462&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;컴파일
&lt;img width=&quot;455&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/chan-study/assets/74396128/0b7ef389-5f0c-422d-8f4d-215ef6c7b04a&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 전처리기&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;C언어로 예를 들자면, #으로 시작되는 소스코드를 처리하는 단계.&lt;/p&gt;
&lt;p&gt;stdio.h와 같은 &lt;strong&gt;헤더 파일&lt;/strong&gt;을 불러와 코드 상으로 필요한 내용으로 채워주고 define으로 먼저 정의된 상수를 symbol table에 저장하는 등 &lt;strong&gt;매크로를 확장&lt;/strong&gt;한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 컴파일&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;High Level Language인 소스코드를 기계언어에 가까운 Low Level Launguage인 &lt;strong&gt;어셈블리 언어로 변환&lt;/strong&gt;한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 어셈블러&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;결국 컴퓨팅하는 주체는 CPU이므로 소스코드를 아무리 잘 작성했더라도 CPU 입장에서도 그게 잘 작성된 코드인지 들어봐야한다. 어셈블리어는 인간이 이해할 수 있는 기계 언어에 가장 가까운 언어로, 컴퓨터가 연산하는 블랙박스 안을 들여다볼 수 있는 창구의 역할을 한다. 따라서 컴퓨터의 동작 방식을 이해하고 더 가까이서 문제를 해결하기 위해 어셈블리어로 중간 변환 과정을 거친다.&lt;/p&gt;
&lt;p&gt;실제로 어셈블리 언어에는 집합, 배열, 객체와 같은 개념이 없고 모두 정수(int)로 변환된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 링커&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;만약 프로그램이 여러개의 파일로 이루어져있다면 하나의 오브젝트 파일로 이어주고 라이브러리들을 연결하는 링크 단계가 필요하다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;컴파일 언어
&lt;img width=&quot;651&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/chan-study/assets/74396128/a57f0f32-469d-47c5-aef1-707dc5e4a0c6&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;컴파일 언어로 작성된 소스 코드는 컴파일러에 의해 저급 언어(어셈블리어)로 변환되고(&lt;Mark&gt;컴파일&lt;/Mark&gt;), 컴파일 결과로 저급 언어인 목적(원시) 코드가 생성&lt;/li&gt;
&lt;li&gt;컴파일러가 소스코드 &lt;Mark&gt;전체를 훑어보면서&lt;/Mark&gt;(한줄씩❌) 오류는 없는지, 사용되지 않는 변수, 최적화 여부 등을 따져본 뒤 목적 코드로 컴파일&lt;/li&gt;
&lt;li&gt;소스 코드 컴파일 중 오류가 발생하면 소스 코드 전체가 실행되지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인터프리트 언어&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인터프리터에 의해 &lt;Mark&gt;한 줄씩&lt;/Mark&gt; 실행&lt;/li&gt;
&lt;li&gt;소스 코드 전체가 저급 언어로 변환되기까지 기다릴 필요 ❌&lt;/li&gt;
&lt;li&gt;소스 코드 인터프리트 중 오류가 발생하면 오류 발생 전까지의 코드는 실행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;바이트코드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B0%94%EC%9D%B4%ED%8A%B8%EC%BD%94%EB%93%9C&quot; aria-label=&quot;바이트코드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;바이트코드&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;바이트코드(Bytecode)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사람이 작성한 고급언어(Javascript등)를 가상머신이 이해할 수 있도록 변환한 코드.&lt;/li&gt;
&lt;li&gt;가상머신은 바이트코드를 다양한 종류의 CPU에 맞게 기계어로 컴파일 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Add r0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; LdaSmi &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;저급언어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%80%EA%B8%89%EC%96%B8%EC%96%B4&quot; aria-label=&quot;저급언어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;저급언어&lt;/h4&gt;
&lt;p&gt;저급언어: 컴퓨터가 이해하고 실행하는 언어&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기계어: 0과 1로 이루어진 명령어로 구성된 저급언어
&lt;img width=&quot;590&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/chan-study/assets/74396128/46b53e0d-8f56-47de-a08b-f23ea260a863&quot;&gt;&lt;/li&gt;
&lt;li&gt;어셈블리어: 0과 1로 이루어진 기계어를 읽기 편한 형태로 번역한 저급 언어(기계어보다 한단계 위의 저급언어)
&lt;img width=&quot;678&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/chan-study/assets/74396128/ae576538-3f7f-462a-8bef-3ef083ba1172&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ 자바는 컴파일 언어와 인터프리터 언어의 경계가 모호. 양분되는 개념이라 생각하지 말고 컴파일 방식과 인터프리터 방식이 있는데 고급언어가 저급언로 변환되는 대표적인 방식 중 하나라는 개념으로 이해하는 것이 좋다.&lt;/p&gt;
&lt;h2 id=&quot;자바스크립트-구동-원리&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B5%AC%EB%8F%99-%EC%9B%90%EB%A6%AC&quot; aria-label=&quot;자바스크립트 구동 원리 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자바스크립트 구동 원리&lt;/h2&gt;
&lt;p&gt;자바스크립트 뿐만 아니라 모든 고급언어들은 컴퓨터에서 구동되기 위해서 기본적으로 컴퓨터가 이해가능한 기계어로 변환되어질 필요가 있다.
&lt;img width=&quot;683&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/674408b1-3b84-4776-ac17-e10effadcb04&quot;&gt;
자바스크립트는 컴퓨터에게 전달되기전에 바이트 코드로 변환되고, 이를 받아 가상머신에 의해 기계어로 변환된다. 이러한 일련의 변환 과정은 아래와 같이 진행된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1) 바이트 코드로의 변환&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;Mark&gt;자바스크립트 엔진&lt;/Mark&gt;에 의해 바이트코드로 변환된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2) 기계어로 변환&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CPU 종류에 따라(x86-64(&lt;Mark&gt;cpu종류&lt;/Mark&gt;) gcc 12.2(&lt;Mark&gt;컴파일러종류&lt;/Mark&gt;)) 기계어를 다르게 해석하기에 &lt;Mark&gt;가상 머신&lt;/Mark&gt;은 최적화된 기계어를 제작해낸다. 이 가상머신 덕분에 개발자는 따로 CPU별로 최적화된 기계어를 만들어낼 필요는 없다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3) CPU 코드 실행&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;기계어를 실행하여 데이터 저장 및 연산 작업을 진행한다.&lt;/p&gt;
&lt;h2 id=&quot;자바스크립트-엔진&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%97%94%EC%A7%84&quot; aria-label=&quot;자바스크립트 엔진 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자바스크립트 엔진&lt;/h2&gt;
&lt;p&gt;JS가 자바스크립트 엔진에 의해 어떻게 바이트 코드로 변환되는지 알아보자&lt;/p&gt;
&lt;p&gt;이는 엔진 내 인터프리터가 진행한다. 인터프리터에게 전달되기 전에 &lt;Mark&gt;Tokenizer&lt;/Mark&gt;, &lt;Mark&gt;Parser&lt;/Mark&gt;를 거쳐 &lt;Mark&gt;AST&lt;/Mark&gt;가 되는 일련의 과정이 필요하다.
&lt;img width=&quot;680&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/ba953273-db5c-4e00-af5c-5db7ac722cbe&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Tokenizing&lt;/code&gt; : 주어진 소스코드를 의미있는 단위로 나누는 과정이다. 이렇게 나누어진 것을 Token이라고도 한다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Parser&lt;/code&gt; : &lt;code class=&quot;language-text&quot;&gt;Tokenizer&lt;/code&gt; 로부터 생성된 토큰들의 배열을 바탕으로 이를 자바스크립트 문법에 알맞은 방식으로 &lt;code class=&quot;language-text&quot;&gt;AST(Abstract Syntax Tree)&lt;/code&gt; 로 변화 시킨다.&lt;/li&gt;
&lt;li&gt;이렇게 생성된 &lt;code class=&quot;language-text&quot;&gt;AST&lt;/code&gt; 는 인터프리터를 거쳐 기계가 알아볼 수 있는 바이트 코드롤 변환되게 되는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;자바스크립트-컴파일의-등장&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EC%9D%98-%EB%93%B1%EC%9E%A5&quot; aria-label=&quot;자바스크립트 컴파일의 등장 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자바스크립트 컴파일의 등장&lt;/h2&gt;
&lt;p&gt;이러한 자바스크립트는 인터프리터 언어로서 기능을 해왔지만, 점차 웹에서도 다양한 요구사항들이 추가되면서 더 많은 기능들을 갖추어야 했고 이는 자바스크립트가 점차 성능상 무거워지는 계기가 되었다. 한편, 2009년 당시 구글은 웹에서 이용가능한 지도인 구글맵스를 개발하려고 있었는데 지도 어플리케이션은 사용자 상호작용이 많이 필요한 만큼 성능상 개선이 필요했고 이를 개선하고자 내놓은 것이 바로 &lt;Mark&gt;Chrome V8&lt;/Mark&gt; 엔진이다. 이를 통해 자바스크립트 언어에서도 컴파일을 진행하게 된 계기가 되었다.&lt;/p&gt;
&lt;h2 id=&quot;그렇다면-컴파일-언어의-성능이-인터프리터-언어의-성능보다-좋을까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%BB%B4%ED%8C%8C%EC%9D%BC-%EC%96%B8%EC%96%B4%EC%9D%98-%EC%84%B1%EB%8A%A5%EC%9D%B4-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0-%EC%96%B8%EC%96%B4%EC%9D%98-%EC%84%B1%EB%8A%A5%EB%B3%B4%EB%8B%A4-%EC%A2%8B%EC%9D%84%EA%B9%8C&quot; aria-label=&quot;그렇다면 컴파일 언어의 성능이 인터프리터 언어의 성능보다 좋을까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그렇다면 컴파일 언어의 성능이 인터프리터 언어의 성능보다 좋을까&lt;/h2&gt;
&lt;p&gt;컴파일 언어와 인터프리터 언의 가장 큰 차이점은 바로 실행전 미리 기계어로 바꾸어 놓는다는 점이다. 인터프리터처럼 고급언어를 기계어로 번역하는 것이 아니라 미리 변경해놓기에 빠르다.&lt;/p&gt;
&lt;h2 id=&quot;자바스크립트의-컴파일&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EC%BB%B4%ED%8C%8C%EC%9D%BC&quot; aria-label=&quot;자바스크립트의 컴파일 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자바스크립트의 컴파일&lt;/h2&gt;
&lt;p&gt;V8 엔진에 의해서 어떻게 자바스크립트도 컴파일과정을 알아보자
&lt;img width=&quot;676&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/16db5fa2-023b-485f-a299-fbd57d910b91&quot;&gt;
&lt;img width=&quot;680&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/051cc73b-d208-4856-ad52-13e65a50a7f7&quot;&gt;&lt;/p&gt;
&lt;p&gt;위 그림에서 자바스크립트가 Parser, AST, Interpreter를 거쳐 ByteCode(중간언어)로 변모하는 것은 V8 엔진이 등장하기 전까지의 JS의 모습이다. 이에 추가적으로 &lt;code class=&quot;language-text&quot;&gt;Profiler&lt;/code&gt; 라는게 등장한다. 이 &lt;code class=&quot;language-text&quot;&gt;Profiler&lt;/code&gt; 는 인터프리터를 관찰하며 실행되는 코드를 계속해서 모니터링 한다. 모니터링하는 과정에 코드내에 반복 실행되는 것이 있다면 이를 &lt;code class=&quot;language-text&quot;&gt;JIT(Just-In-Time)&lt;/code&gt; 컴파일러에게 넘겨 실시간으로 컴파일 하도록 한다. 이를 통해 최적화된 바이트 코드를 생성해낸다.&lt;/p&gt;
&lt;p&gt;이처럼 필요할때 마다 런타임 내에서 빠르게 컴파일 하는 컴파일러를 &lt;code class=&quot;language-text&quot;&gt;JIT(Just-In-Time)&lt;/code&gt; 컴파일러라고 부른다. 또한 필요할 경우 &lt;code class=&quot;language-text&quot;&gt;Deoptimize&lt;/code&gt; 과정을 진행하는데 프로파일러의 판단(이 코드 컴파일하는게 낫겠네!)이 틀렸을 수도 있기 때문에 컴파일하는 비용을 다시 줄이기 위함이다.&lt;/p&gt;
&lt;h2 id=&quot;그래서-자바스크립트는-인터프리터-언어일까&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9E%98%EC%84%9C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0-%EC%96%B8%EC%96%B4%EC%9D%BC%EA%B9%8C&quot; aria-label=&quot;그래서 자바스크립트는 인터프리터 언어일까 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그래서 자바스크립트는 인터프리터 언어일까&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;때에 따라 다르다. 현 시점에서의 자바스크립트는 실질적으로 컴파일이 되지만 편의 및 문맥상 인터프리터 언어로 분류된다. 모던 자바스크립트 컴파일러는 거의 런타임 내에서 빠르게 컴파일(&lt;code class=&quot;language-text&quot;&gt;JITC&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;Just-In-Time Compilation&lt;/code&gt;)을 수행한다.&lt;/li&gt;
&lt;li&gt;기본적으로는 &lt;code class=&quot;language-text&quot;&gt;Interpreter&lt;/code&gt; 언어로서의 성질을 가지지만, 성능상의 최적화를 위해 &lt;code class=&quot;language-text&quot;&gt;Compiler&lt;/code&gt; 언어의 특성도 같이 가진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;참고자료&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C&quot; aria-label=&quot;참고자료 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;참고자료&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://velog.io/@seungchan__y/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-Compiler-Interpreter-%EC%96%B8%EC%96%B4%EB%8B%A4#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B5%AC%EB%8F%99%EC%9B%90%EB%A6%AC&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;자바스크립트는 Compiler / Interpreter 언어다?&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://devlog-of-yein.tistory.com/m/6&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;컴파일이란 무엇이며, 자바스크립트는 인터프리터 언어인가?&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[0과1로 문자,숫자를 표현하는 방법]]></title><description><![CDATA[컴퓨터 구조의 0과1로 문자,숫자를 표현하는 방법에 대해서 배웁니다.]]></description><link>https://dltlaos11.github.io/posts/computer-architecture/expression-letters-and-numbers-with-0&amp;1</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/computer-architecture/expression-letters-and-numbers-with-0&amp;1</guid><pubDate>Thu, 24 Aug 2023 20:40:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#0%EA%B3%BC-1%EB%A1%9C-%EC%88%AB%EC%9E%90%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot;&gt;0과 1로 숫자를 표현하는 방법&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A0%95%EB%B3%B4-%EB%8B%A8%EC%9C%84&quot;&gt;정보 단위&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9D%B4%EC%A7%84%EB%B2%95&quot;&gt;이진법: 0과 1로 숫자 표현하기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8B%AD%EC%9C%A1%EC%A7%84%EB%B2%95&quot;&gt;십육진법&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8B%AD%EC%9C%A1%EC%A7%84%EB%B2%95%EA%B3%BC-%EC%9D%B4%EC%A7%84%EB%B2%95%EC%9D%98-%EA%B4%80%EA%B3%84&quot;&gt;십육진법과 이진법의 관계&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#0%EA%B3%BC-1%EB%A1%9C-%EB%AC%B8%EC%9E%90%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot;&gt;0과 1로 문자를 표현하는 방법&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%AC%B8%EC%9E%90-%EC%A7%91%ED%95%A9%EA%B3%BC-%EC%9D%B8%EC%BD%94%EB%94%A9&quot;&gt;문자 집합과 인코딩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%9C%A0%EB%8B%88%EC%BD%94%EB%93%9C-%EB%AC%B8%EC%9E%90-%EC%A7%91%ED%95%A9%EA%B3%BC-utf-8&quot;&gt;유니코드 문자 집합과 utf-8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;0과-1로-숫자를-표현하는-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#0%EA%B3%BC-1%EB%A1%9C-%EC%88%AB%EC%9E%90%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;0과 1로 숫자를 표현하는 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;0과 1로 숫자를 표현하는 방법&lt;/h2&gt;
&lt;h4 id=&quot;정보-단위&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EB%B3%B4-%EB%8B%A8%EC%9C%84&quot; aria-label=&quot;정보 단위 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정보 단위&lt;/h4&gt;
&lt;p&gt;비트(bit): 0과 1을 표현하는 가장 작은 정보 단위&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;n비트로 2^n가지의 정보 표현 가능&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프로그램은 수 많은 비트로 이루어져 있음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;비트보다 더 큰 단위를 주로 사용&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;바이트, 킬로바이트, 메가바이트, 기가바이트. 테라바이트 …
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/d95e95af-ae06-45ed-9a78-eff7181c92d0&quot; alt=&quot;image&quot;&gt;
c.f.) 이전 단위를 1024개씩 묶은 단위는 kiB, MiB, GiB, …&lt;/p&gt;
&lt;p&gt;최근에는 정보 단위가 커지면서 1000개씩 묶은 단위와 1024개씩 묶은 단위를 구분해서 사용&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;워드word&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9B%8C%EB%93%9Cword&quot; aria-label=&quot;워드word permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;워드(word)&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;CPU가 한 번에 처리할 수 있는 정보의 크기 단위(ex_CPU가 한번에 32bit처리 → 1word = 32bit)&lt;/li&gt;
&lt;li&gt;하프 워드(half word): 워드의 절반 크기&lt;/li&gt;
&lt;li&gt;풀 워드(full word): 워드 크기&lt;/li&gt;
&lt;li&gt;더블 워드(double word): 워드의 두 배 크기&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;이진법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EC%A7%84%EB%B2%95&quot; aria-label=&quot;이진법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이진법&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;이진법(binary)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;0과 1로 수를 표현하는 방법&lt;/li&gt;
&lt;li&gt;숫자가 1을 넘어가는 시점에 자리올림&lt;/li&gt;
&lt;li&gt;우리가 일상적으로 사용하는 진법은 숫자가 9를 넘어갈 떄 자리올림하는 십진법&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;이진수 8 표기&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;1000 &lt;mark&gt;(2)&lt;/li&gt;
&lt;li&gt;&lt;Mark&gt;0b&lt;/Mark&gt;1000&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;0과 1로 음수 표현하기: 2의 보수(현대 컴퓨터에서 가장 많이 사용되는 방법)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;어떤 수를 그보다 큰 2^n에서 뺸 값 - 11(2)을 음수로 표현한 값 구하는 &lt;Mark&gt;어려운&lt;/Mark&gt; 방법&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;11(2)보다 큰 2^n = 100(2) - 100(2)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;11(2) = 01(2) - 11(2)을 음수로 표현한 값 구하는 &lt;Mark&gt;쉬운&lt;/Mark&gt; 방법&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;모든 0과 1을 뒤집고 1 더한 값 - 11(2) → 01(2)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“ -1011(2)를 표현하기 위한 0101(2)과 십진수 5를 표현하기 위한 0101(2)은 유사 같다. 어떻게 구분해야 할까?”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;→ CPU 내부에 &lt;Mark&gt;플러그(flug)&lt;/Mark&gt; 레지스터로 구분&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;십육진법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%AD%EC%9C%A1%EC%A7%84%EB%B2%95&quot; aria-label=&quot;십육진법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;십육진법&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;십육진법(hexadecimal)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;이진법으로는 숫자가 너무 길어지는 단점이 존재&lt;/li&gt;
&lt;li&gt;컴퓨터의 데이터를 표현할 떄 16진법도 많이 사용
&lt;ul&gt;
&lt;li&gt;15를 넘어가는 시점에 자리올림&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;십육진수 15표기&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;15(16) - 수학적 표기 방식&lt;/li&gt;
&lt;li&gt;0x15 - 코드상 표기 방식
&lt;img width=&quot;677&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/bd16e350-dfe2-4098-84bd-a0c07aa90f82&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;십육진법과-이진법의-관계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%AD%EC%9C%A1%EC%A7%84%EB%B2%95%EA%B3%BC-%EC%9D%B4%EC%A7%84%EB%B2%95%EC%9D%98-%EA%B4%80%EA%B3%84&quot; aria-label=&quot;십육진법과 이진법의 관계 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;십육진법과 이진법의 관계&lt;/h4&gt;
&lt;p&gt;16진수와 2진수간 변환이 쉬우므로 많이 사용된다.&lt;/p&gt;
&lt;p&gt;2진수 → 16진수
&lt;img width=&quot;677&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/c1c4260f-90d5-40d6-b181-93b2a1a21b9d&quot;&gt;
16진수 → 2진수
&lt;img src=&quot;https://github.com/boost-library/yong-study/assets/74396128/1326355a-985c-4181-b03e-bbb5817d388a&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;0과-1로-문자를-표현하는-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#0%EA%B3%BC-1%EB%A1%9C-%EB%AC%B8%EC%9E%90%EB%A5%BC-%ED%91%9C%ED%98%84%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;0과 1로 문자를 표현하는 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;0과 1로 문자를 표현하는 방법&lt;/h2&gt;
&lt;h4 id=&quot;문자-집합과-인코딩&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%9E%90-%EC%A7%91%ED%95%A9%EA%B3%BC-%EC%9D%B8%EC%BD%94%EB%94%A9&quot; aria-label=&quot;문자 집합과 인코딩 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문자 집합과 인코딩&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;인코딩(encoding)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;코드화하는 과정&lt;/li&gt;
&lt;li&gt;문자를 0과 1로 이루어진 문자 코드로 변환하는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;디코딩(decoding)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;코드를 해석하는 과정&lt;/li&gt;
&lt;li&gt;0과 1로 표현된 문자 코드로 문자로 변환하는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;문자 집합(character set)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터가 이해할 수 있는 문자의 모음&lt;/li&gt;
&lt;li&gt;아스키 코드
&lt;ul&gt;
&lt;li&gt;초창기 문자 집합 중 하나&lt;/li&gt;
&lt;li&gt;알파벳, 아라비아 숫자, 일부 특수 문자 및 제어 문자&lt;/li&gt;
&lt;li&gt;7비트로 하나의 문자 표현(2^7= 128개의 문자 표현)
&lt;ul&gt;
&lt;li&gt;8비트 중 1비트는 오류 검출을 위해 사용되는 패리티 비트(parity bit)&lt;/li&gt;
&lt;li&gt;A는 65로 인코딩, a는 97로 인코딩&lt;/li&gt;
&lt;li&gt;c.f.) 65, 97 → 코드 포인트(code point)라고 하기도 == 문자에 부여된 값&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;간단한 인코딩&lt;/li&gt;
&lt;li&gt;But 한글을 포함한 다른 언어 문자, 다양한 특수 문자 표현 불가
&lt;ul&gt;
&lt;li&gt;아스키 코드는 7비트로 하나의 문자를 표현하기에 128개보다 많은 문자를 표현할 수 없음&lt;/li&gt;
&lt;li&gt;8비트 확장 아스키(expected ASCII)의 등장, 여전히 부족
⇒ &lt;Mark&gt;언어별 인코딩 방식의 등장&lt;/Mark&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;한글 인코딩: 완성형 vs 조합형 인코딩&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;한글을 위한 인코딩이 필요
&lt;ul&gt;
&lt;li&gt;알파벳을 이어 쓰면 단어가 되는 영어&lt;/li&gt;
&lt;li&gt;초성, 중성, 종성의 조합으로 이루어진 한글&lt;/li&gt;
&lt;li&gt;완성형 인코딩 방식과 조합형 인코딩 방식이 존재
&lt;img width=&quot;648&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/925b4227-9e47-4039-9bab-880daccc8aa3&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;EUC-KR
&lt;ul&gt;
&lt;li&gt;KS X 1001 KS X 1003 문자집합 기반의 한글 인코딩 방식&lt;/li&gt;
&lt;li&gt;완성형 인코딩&lt;/li&gt;
&lt;li&gt;글자 하나 하나에 2바이트 크기의 코드 부여 - 2바이트 == 16비트 == 4자리 16진수로 표현
&lt;img width=&quot;619&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/699029a1-2580-4a9e-ac0d-dfddd1ad634b&quot;&gt;&lt;/li&gt;
&lt;li&gt;2300여개의 한글 표현 가능&lt;/li&gt;
&lt;li&gt;여전히 모든 한글을 표현하기에는 부족한 수&lt;/li&gt;
&lt;li&gt;쀏, 뙠, 훽같은 한글은 표현 불가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다국어를 지원하는 프로그램을 개발하는 경우 언어별 인코딩 방식을 모두 이해해야하는 번거로움&lt;/p&gt;
&lt;p&gt;→ &lt;Mark&gt;유니코드 문자 집합과 utf-8의 등장&lt;/p&gt;
&lt;h4 id=&quot;유니코드-문자-집합과-utf-8&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9C%A0%EB%8B%88%EC%BD%94%EB%93%9C-%EB%AC%B8%EC%9E%90-%EC%A7%91%ED%95%A9%EA%B3%BC-utf-8&quot; aria-label=&quot;유니코드 문자 집합과 utf 8 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;유니코드 문자 집합과 utf-8&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;유니코드&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;통일된 문자 집합&lt;/li&gt;
&lt;li&gt;한글, 영어, 화살표와 같은 특수 문자, 심지어 이모티콘까지&lt;/li&gt;
&lt;li&gt;현대 문자 표현에 있어 매우 중요한 위치&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;유니코드의 인코딩 방식&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;utf-8, utf-16, utf-32
&lt;img width=&quot;261&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/6e98311c-aba3-4bca-afbc-2dd25c587a93&quot;&gt;
고유한 16진수 값: U+219B(=유니코드 코드 포인트)&lt;/p&gt;
&lt;p&gt;코드 포인트 그대로 문자 인코딩 값으로 삼지 않고 다양한 인코딩 방식으로(utf-8, 16, …) 0과 1로 만든다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;utf-8 인코딩&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;UTF(Unicode Transformation Format) == 유니코드 인코딩 방법&lt;/li&gt;
&lt;li&gt;가변 길이 인코딩: 인코딩 결과가 1바이트~4바이트&lt;/li&gt;
&lt;li&gt;인코딩 결과가 몇 바이트가 될지는 유니코드에 부여된 값(&lt;Mark&gt;유니코드 코드 포인트&lt;/Mark&gt;)에 따라 다름
&lt;img width=&quot;705&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/3d746a61-4e43-4b3f-b7d7-963007aa7479&quot;&gt;
&lt;img width=&quot;702&quot; alt=&quot;image&quot; src=&quot;https://github.com/boost-library/yong-study/assets/74396128/125a4af8-837d-45cd-a3f0-e512f7c46441&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⇒ utf-8은 유니코드 문자를 인코딩하는 방법, utf-8로 인코딩한 값은 &lt;Mark&gt;가변길이 인코딩&lt;/Mark&gt;이기 떄문에 1바이트~4바이트가 될 수 있다. 어떤 식으로 인코딩이 진행되는지는 &lt;Mark&gt;유니코드 문자에 부여된 코드 포인트의 범위&lt;/Mark&gt;에 따라서 코드 포인트를 형식에 맞게 넣어주면 인코딩 된 결과.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[알고리즘 기초 코드 작성 요령]]></title><description><![CDATA[알고리즘의 기초 코드 작성 요령에 대해서 배웁니다.]]></description><link>https://dltlaos11.github.io/posts/algorithms/basic-code-writing-tips</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/algorithms/basic-code-writing-tips</guid><pubDate>Thu, 24 Aug 2023 17:40:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84&quot;&gt;시간복잡도&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%B9%85%EC%98%A4%ED%91%9C%EA%B8%B0%EB%B2%95&quot;&gt;빅오표기법(Big-O)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B3%B5%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84&quot;&gt;공간복잡도&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%A0%95%EC%88%98-%EC%9E%90%EB%A3%8C%ED%98%95&quot;&gt;정수자료형&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%8B%A4%EC%88%98-%EC%9E%90%EB%A3%8C%ED%98%95&quot;&gt;실수자료형&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EA%B8%B0%EC%B4%88-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%EC%9A%94%EB%A0%B9&quot;&gt;기초 코드 작성요령&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;시간복잡도&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84&quot; aria-label=&quot;시간복잡도 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시간복잡도&lt;/h2&gt;
&lt;h5 id=&quot;입력의-크기와-문제를-해결하는데-걸리는-시간의-상관관계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%85%EB%A0%A5%EC%9D%98-%ED%81%AC%EA%B8%B0%EC%99%80-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94%EB%8D%B0-%EA%B1%B8%EB%A6%AC%EB%8A%94-%EC%8B%9C%EA%B0%84%EC%9D%98-%EC%83%81%EA%B4%80%EA%B4%80%EA%B3%84&quot; aria-label=&quot;입력의 크기와 문제를 해결하는데 걸리는 시간의 상관관계 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;입력의 크기와 문제를 해결하는데 걸리는 시간의 상관관계&lt;/h5&gt;
&lt;p&gt;다음 코드에서 함수가 몇 번의 연산을 하는지 시간복잡도를 구해보자&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;c&quot;&gt;&lt;pre class=&quot;language-c&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;func1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; cnt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;초깃값 설정 cnt&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; n번&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;대소비교&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;작을경우&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; cnt&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt; n번&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;나머지 연산&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;같다면&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cnt &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; cnt&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cnt 반환&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;n&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; n에 비례&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또 다른 예제를 보자&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;대회장에 N명의 사람들이 일렬로 서있다. 거기서 당신은 이름이 ‘가나다’인 사람을 찾기 위해 사람들에게 이름을 물어볼 것이다. 이 떄 사람들은 이름 순으로 서있다. 이름을 물어보고 대답을 듣는데까지 1초가 걸린다면 얼마만큼의 시간이 필요할까?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;details&gt;
&lt;summary&gt;정답
&lt;/summary&gt;
업다운게임을 하듯이 중간 사람에게 계속 물어보면된다. 반씩 줄여나가면서 ‘가나다’의 사람의 위치를 유추. 최선의 경우 1초, 최악의 경우 lg N초, 평균적으로 lg N초가 필요하다. 걸리는 시간은 lg N에 비례한다.
&lt;ul&gt;
&lt;li&gt;lg 2= 1, lg 4= 2 ,lg 8 =3&lt;/li&gt;
&lt;li&gt;반씩 줄여나가면서 찾는 경우 평균적 log N에 비례&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;h4 id=&quot;빅오표기법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B9%85%EC%98%A4%ED%91%9C%EA%B8%B0%EB%B2%95&quot; aria-label=&quot;빅오표기법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;빅오표기법&lt;/h4&gt;
&lt;h5 id=&quot;주어진-식을-값이-가장-큰-대포항만-남겨서-나타내는-방법&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%96%B4%EC%A7%84-%EC%8B%9D%EC%9D%84-%EA%B0%92%EC%9D%B4-%EA%B0%80%EC%9E%A5-%ED%81%B0-%EB%8C%80%ED%8F%AC%ED%95%AD%EB%A7%8C-%EB%82%A8%EA%B2%A8%EC%84%9C-%EB%82%98%ED%83%80%EB%82%B4%EB%8A%94-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;주어진 식을 값이 가장 큰 대포항만 남겨서 나타내는 방법 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;주어진 식을 값이 가장 큰 대포항만 남겨서 나타내는 방법&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;O(N^): 6N^ + 20N+10lgN&lt;/li&gt;
&lt;li&gt;상수 O(1): 1, 5, ..&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;대표적인 시간복잡도의 그래프
&lt;img width=&quot;704&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/2fef7205-1fc8-41ca-91d7-a2784bb1d63d&quot;&gt;
O(1)&amp;#x3C;O(lgN)-로그시간&amp;#x3C;O(N)-선형시간&amp;#x3C;O(NlgN)&amp;#x3C;&lt;Mark&gt;O(N^) &amp;#x3C; O(N!) N이 25이하로 작은게 아니면 시간제한 통과하기 힘듦&lt;/p&gt;
&lt;p&gt;N의 크기에 따른 허용 시간복잡도
&lt;img width=&quot;703&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/6cf7d5e4-1641-43e1-b70d-3544d32959ee&quot;&gt;
→ 주어진 문제를 보고 풀이를 떠올린 후에 무턱대고 바로 그걸 짜는게 아니라, 내 풀이가 이 문제를 제한 시간 내로 통과할 수 있는지, 즉 내 알고리즘의 시간복잡도가 올바른지 먼저 생각해봐야 한다.&lt;/p&gt;
&lt;h6 id=&quot;1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#1&quot; aria-label=&quot;1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1&lt;/h6&gt;
&lt;img width=&quot;704&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/fe26d75d-690a-44a2-8c01-9aecca41151d&quot;&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;func1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; cnt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; cnt&lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; cnt&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6 id=&quot;2&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#2&quot; aria-label=&quot;2 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2&lt;/h6&gt;
&lt;img width=&quot;705&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/b3e1bd26-eaf7-44d8-b186-18cd66826abb&quot;&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;func2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; j &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; j&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;j&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6 id=&quot;3&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#3&quot; aria-label=&quot;3 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3&lt;/h6&gt;
&lt;img width=&quot;706&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/c1b9b2e9-da23-4e91-a637-c9103d3b44c9&quot;&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;func3&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt;n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;√&lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h6 id=&quot;4&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#4&quot; aria-label=&quot;4 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4&lt;/h6&gt;
&lt;img width=&quot;706&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/ca6b3771-491a-42f0-8437-0583de92b133&quot;&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;func4&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; n&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token constant&quot;&gt;N&lt;/span&gt;이 &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;^&lt;/span&gt;k이상 &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;^&lt;/span&gt;k&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;미만이라고 할떄 &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;문 안에서 i는 최대 k번만 &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;배로 커짐
val은 &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;^&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; so&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;lgN&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;공간복잡도&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B3%B5%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84&quot; aria-label=&quot;공간복잡도 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;공간복잡도&lt;/h2&gt;
&lt;h5 id=&quot;입력의-크기와-문제를-해결하는데-필요한-공간의-상관관계&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%9E%85%EB%A0%A5%EC%9D%98-%ED%81%AC%EA%B8%B0%EC%99%80-%EB%AC%B8%EC%A0%9C%EB%A5%BC-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94%EB%8D%B0-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B3%B5%EA%B0%84%EC%9D%98-%EC%83%81%EA%B4%80%EA%B4%80%EA%B3%84&quot; aria-label=&quot;입력의 크기와 문제를 해결하는데 필요한 공간의 상관관계 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;입력의 크기와 문제를 해결하는데 필요한 공간의 상관관계&lt;/h5&gt;
&lt;p&gt;메모리 제한이 512MB일떄 int변수(4byte)를 대략 1.2억개 정도 선언할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;512MB = 1.2억개의 int&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ 떠올린 크기가 5억인 배열을 필요로 한다면 해당 풀이는 메모리제한을 만족하지 못하므로 틀림&lt;/p&gt;
&lt;h2 id=&quot;정수-자료형&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EC%88%98-%EC%9E%90%EB%A3%8C%ED%98%95&quot; aria-label=&quot;정수 자료형 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정수 자료형&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;char: -2^7 ~ 2^7-1 (-128 ~ 127)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unsigend char: 2^8-1 (0~255)
&lt;img width=&quot;703&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/21f83750-da80-4657-b16a-e89a345ef63f&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;short: 2(2^15-1=32767)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;int: 4(2^31-1 = 2.1*10^9)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;long: 8(2^63-1 = 9.2*10^18)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;iteger-overflow&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#iteger-overflow&quot; aria-label=&quot;iteger overflow permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Iteger Overflow&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;127(01111111)+1(00000001) = -128(10000000)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;해결법 ⇒ 강제형변환&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;char ⇒ int&lt;/li&gt;
&lt;li&gt;int ⇒ long&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;실수-자료형&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%EC%88%98-%EC%9E%90%EB%A3%8C%ED%98%95&quot; aria-label=&quot;실수 자료형 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실수 자료형&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;float: 4byte(32)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;double: 8byte(64)
&lt;img width=&quot;705&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/9eb4d652-0ddc-4f70-81bc-f472d5eb4c8b&quot;&gt;
&lt;img width=&quot;705&quot; alt=&quot;image&quot; src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/e5be8aaf-331d-479c-9482-b985b388c81a&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;실수를 나타날떄 칸은 sign(음수인지, 양수인지), exponent(지수), fraction field(유효숫자)로 나누어짐&lt;/p&gt;
&lt;p&gt;=&gt; IEEE-754 format&lt;/p&gt;
&lt;p&gt;&lt;em&gt;실수 자료형 정리&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;실수의 저장/연산 과정에서 반드시 오차가 발생할 수 밖에 없음&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;hi&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;bye&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; bye&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;→ 유효숫자가 들어가는 fraction field가 유한하기 떄문에 2진수 기준으로 무한소수인걸 저장하려고 할 떄 에는 어쩔 수 없이 float은 앞 23 bit, double은 앞 52bit까지만 잘라서 저장할 수 밖에 없다. 0.1은 이진수로 나타내면 무한소수여서 애초에 오차가 있는 채로 저장, 그걸 3번 더하다보니 오차가 더 커져서 bye가 출력.&lt;/p&gt;
&lt;p&gt;fraction filed를 가진 각 자료형의 표현 범위&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;float: 유효숫자 6자리(상대오차 10^-6)&lt;/li&gt;
&lt;li&gt;double: 유효숫자 15자리(상대오차 10^-15)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;상대 오차의 허용 범위에서 두 자료형끼리 차이가 크므로 float &amp;#x3C; double 지향&lt;br&gt;
실수 자료형 필요한 문제면 힌트를 준다. 절대/상대 10^-6까지 허용&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;double에 long long 범위의 정수를 함부로 담으면 안됨&lt;/li&gt;
&lt;li&gt;실수를 비교할 떄는 등호를 사용하면 안됨&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;1e-12 = 10^-12&lt;/li&gt;
&lt;li&gt;10^9 = 1e9&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;기초-코드-작성요령&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EC%B4%88-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1%EC%9A%94%EB%A0%B9&quot; aria-label=&quot;기초 코드 작성요령 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기초 코드 작성요령&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vector: 일종의 가변배열로 크기를 마음대로 늘였다 줄였다 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BOJ 10871&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; input &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;fs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/dev/stdin&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; num &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; answer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; num&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    answer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;answer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;-&gt; 결국 남이 읽기 좋은 코드보다는 빠른 풀이를 위한 코드를 작성해야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;출력 맨 마지막 공백 혹은 줄바꿈이 추가로 있어도 상관이 없다.&lt;/li&gt;
&lt;li&gt;디버거는 굳이 사용하지 않아도 된다. log 사용 권장&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[컴퓨터 구조의 큰 그림]]></title><description><![CDATA[컴퓨터 구조의 큰 그림에 대해서 배웁니다.]]></description><link>https://dltlaos11.github.io/posts/computer-architecture/purpose</link><guid isPermaLink="false">https://dltlaos11.github.io/posts/computer-architecture/purpose</guid><pubDate>Wed, 23 Aug 2023 17:40:32 GMT</pubDate><content:encoded>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot;&gt;컴퓨터 구조를 알아야 하는 이유&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0&quot;&gt;컴퓨터 구조&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0%EA%B0%80-%EC%9D%B4%ED%95%B4%ED%95%98%EB%8A%94-%EC%A0%95%EB%B3%B4&quot;&gt;컴퓨터가 이해하는 정보&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0%EC%9D%98-%EB%84%A4-%EA%B0%80%EC%A7%80-%ED%95%B5%EC%8B%AC-%EB%B6%80%ED%92%88&quot;&gt;컴퓨터의 네 가지 핵심 부품&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%EB%A9%94%EC%9D%B8%EB%B3%B4%EB%93%9C&quot;&gt;ETC_메인보드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;컴퓨터-구조를-알아야-하는-이유&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;컴퓨터 구조를 알아야 하는 이유 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴퓨터 구조를 알아야 하는 이유&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;문제 해결 능력 → 분석
&lt;ul&gt;
&lt;li&gt;컴퓨터 구조를 분석하여 이해하며 문제를 해결할 수 있는 개발자&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;성능, 용량, 비용 고려한 개발 가능
&lt;ul&gt;
&lt;li&gt;클라우드 서비스도 직접 CPU, 메모리, 저장 용량을 고려해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/d9e26639-a87c-480f-ac69-09159220029b&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;결론&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;컴퓨터 구조는 결국 성능, 용량, 비용에 대한 이야기&lt;/li&gt;
&lt;li&gt;프로그래밍 언어의 문법만으로는 해결하기 어려운 문제들을 해결할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;컴퓨터-구조&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;컴퓨터 구조 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴퓨터 구조&lt;/h1&gt;
&lt;h2 id=&quot;컴퓨터가-이해하는-정보&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0%EA%B0%80-%EC%9D%B4%ED%95%B4%ED%95%98%EB%8A%94-%EC%A0%95%EB%B3%B4&quot; aria-label=&quot;컴퓨터가 이해하는 정보 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴퓨터가 이해하는 정보&lt;/h2&gt;
&lt;h4 id=&quot;데이터&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%9D%B4%ED%84%B0&quot; aria-label=&quot;데이터 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데이터&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;숫자, 문자, 이미지, 동영상과 같은 정적인 정보&lt;/li&gt;
&lt;li&gt;컴퓨터와 주고받는/내부에 저장된 정보를 데이터라 통칭하기도&lt;/li&gt;
&lt;li&gt;0과 1로 숫자를 표현하는 방법&lt;/li&gt;
&lt;li&gt;0과 1로 문자를 표현하는 방법&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;명령어&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%AA%85%EB%A0%B9%EC%96%B4&quot; aria-label=&quot;명령어 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;명령어&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;Mark&gt;컴퓨터는 결국 명령어를 처리하는 기계&lt;/li&gt;
&lt;li&gt;명령어
&lt;ul&gt;
&lt;li&gt;컴퓨터를 실질적으로 움직이는 정보&lt;/li&gt;
&lt;li&gt;데이터는 명령어를 위한 일종의 재료&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;명령어의 생김새와 동작 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;컴퓨터의-네-가지-핵심-부품&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%93%A8%ED%84%B0%EC%9D%98-%EB%84%A4-%EA%B0%80%EC%A7%80-%ED%95%B5%EC%8B%AC-%EB%B6%80%ED%92%88&quot; aria-label=&quot;컴퓨터의 네 가지 핵심 부품 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴퓨터의 네 가지 핵심 부품&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/9ce1051b-2518-43db-a546-51e30d9a4699&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;cpu&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cpu&quot; aria-label=&quot;cpu permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CPU&lt;/h4&gt;
&lt;h5 id=&quot;구성요소&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C&quot; aria-label=&quot;구성요소 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;구성요소&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;산술논리연산장치(ALU): 계산기&lt;/li&gt;
&lt;li&gt;제어장치: &lt;code class=&quot;language-text&quot;&gt;제어 신호&lt;/code&gt;를 &lt;code class=&quot;language-text&quot;&gt;내보내고&lt;/code&gt;, 명령어를 &lt;code class=&quot;language-text&quot;&gt;해석&lt;/code&gt;하는 장치
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;제어신호&lt;/code&gt;: 컴퓨터 부품들을 관리하고 작동시키기 위한 전기 신호(&lt;code class=&quot;language-text&quot;&gt;메모리 읽기(메모리-&gt;CPU), 쓰기 신호(CPU → 메모리)&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/76cc95ce-09b4-4ca9-b2f4-c0929e98daf4&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;h5 id=&quot;cpu메모리에-저장된-명령어를-실행하는-일련의-과정&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#cpu%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%97%90-%EC%A0%80%EC%9E%A5%EB%90%9C-%EB%AA%85%EB%A0%B9%EC%96%B4%EB%A5%BC-%EC%8B%A4%ED%96%89%ED%95%98%EB%8A%94-%EC%9D%BC%EB%A0%A8%EC%9D%98-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;cpu메모리에 저장된 명령어를 실행하는 일련의 과정 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CPU&amp;#x26;메모리에 저장된 명령어를 실행하는 일련의 과정:&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;제어장치(메모리 읽기 제어 신호 내보내기)&lt;/li&gt;
&lt;li&gt;메모리(1번지 명령어를 CPU의 레지스터에 저장, 제어장치가 레지스터의 명령어를 해석)&lt;/li&gt;
&lt;li&gt;한번더 메모리 읽기 신호 내보냄&lt;/li&gt;
&lt;li&gt;제어 장치가 해석하고 ALU한테 120, 100(레지스터에 저장)을 전달해주고 ALU가 명령어를 수행한(더하기) 뒤에 레지스터에 더한 값을 저장하고(&lt;Mark&gt;레지스터&lt;/Mark&gt;) 제어장치가 메모리 읽기 신호 내보낸 뒤(&lt;Mark&gt;명령어도 레지스터에 저장&lt;/Mark&gt;) &lt;Mark&gt;메모리 쓰기 신호&lt;/Mark&gt;와 함께 레지스터에 저장된 값(220)을 메모리에 저장&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU는 메모리에 저장된 값을 읽어 들이고, 해석하고, 실행하는 장치&lt;/li&gt;
&lt;li&gt;CPU 내부에는 ALU, 레지스터, 제어장치가 있다.
&lt;ul&gt;
&lt;li&gt;ALU는 계산하는 장치&lt;/li&gt;
&lt;li&gt;레지스터는 임시 저장 장치&lt;/li&gt;
&lt;li&gt;제어장치는 제어 신호를 발생시키고 명령어를 해석하는 장치&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;!-- &lt;figure&gt;
	&lt;blockquote&gt;
        dsdas
		&lt;footer&gt;
			&lt;cite&gt;— Josef Mueller-Brockmann&lt;/cite&gt;
		&lt;/footer&gt;
	&lt;/blockquote&gt;
&lt;/figure&gt; --&gt;
&lt;h4 id=&quot;메모리메인메모리-주기억장치&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC%EB%A9%94%EC%9D%B8%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%A3%BC%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98&quot; aria-label=&quot;메모리메인메모리 주기억장치 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리(메인메모리, 주기억장치)&lt;/h4&gt;
&lt;h5 id=&quot;구성요소-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C-1&quot; aria-label=&quot;구성요소 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;구성요소&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;RAM&lt;/li&gt;
&lt;li&gt;ROM
&lt;blockquote&gt;
&lt;p&gt;summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램이 실행되기 위해서는 메모리에 저장되어 있어야, 메모리는 실행되는 프로그램의 명령어와 데이터를 저장&lt;/li&gt;
&lt;li&gt;주소를 통해 내가 원하는 명령어 혹은 데이터가 어디에 위치해 있는지 알 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;보조기억장치ssd-벡업용&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%B3%B4%EC%A1%B0%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98ssd-%EB%B2%A1%EC%97%85%EC%9A%A9&quot; aria-label=&quot;보조기억장치ssd 벡업용 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;보조기억장치(ssd, 벡업용)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;메모리는 &lt;code class=&quot;language-text&quot;&gt;실행할&lt;/code&gt; 정보를 저장하고 보조기억장치는 &lt;code class=&quot;language-text&quot;&gt;보관할 정보&lt;/code&gt;를 저장&lt;/li&gt;
&lt;li&gt;메모리를 보조하는 특별한 입출력장치&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;메모리메인메모리-주기억장치-1&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC%EB%A9%94%EC%9D%B8%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%A3%BC%EA%B8%B0%EC%96%B5%EC%9E%A5%EC%B9%98-1&quot; aria-label=&quot;메모리메인메모리 주기억장치 1 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리(메인메모리, 주기억장치)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;보조기억장치, 입출력장치 block device라고 하기도&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;메인보드&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EC%9D%B8%EB%B3%B4%EB%93%9C&quot; aria-label=&quot;메인보드 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메인보드&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;메인보드에 연결된 컴퓨터의 4가지 핵심 부품끼리 &lt;code class=&quot;language-text&quot;&gt;시스템 버스&lt;/code&gt;를 통해서 정보를 주고받음&lt;/li&gt;
&lt;li&gt;버스는 컴퓨터의 부품끼리 정보를 주고받는 일종의 통로&lt;/li&gt;
&lt;li&gt;다양한 종류의 버스가 있다&lt;/li&gt;
&lt;li&gt;컴퓨터의 핵심 부품을 연결하는 버스는 시스템 버스&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;시스템-버스&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EB%B2%84%EC%8A%A4&quot; aria-label=&quot;시스템 버스 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시스템 버스&lt;/h3&gt;
&lt;h4 id=&quot;내부-구성&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;내부 구성 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;내부 구성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;주소 버스: 주소를 주고받는 통로&lt;/li&gt;
&lt;li&gt;데이터 버스: 명령어와 데이터를 주고받는 통로&lt;/li&gt;
&lt;li&gt;제어 버스: 제어신호를 주고받는 통로&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;메모리-값-읽어들이기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B0%92-%EC%9D%BD%EC%96%B4%EB%93%A4%EC%9D%B4%EA%B8%B0&quot; aria-label=&quot;메모리 값 읽어들이기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리 값 읽어들이기&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/dfd8354a-913c-4aab-b0c5-b155351f192d&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;Mark&gt;제어 버스&lt;/Mark&gt;를 통해서 메모리 읽기 신호(&lt;Mark&gt;제어 신호&lt;/Mark&gt;)를 내보내고&lt;/li&gt;
&lt;li&gt;어떤 몇 번지 주소를 읽고싶은지에 해당하는 주소 번지(&lt;Mark&gt;읽고자 하는 주소&lt;/Mark&gt;)를 &lt;Mark&gt;주소 버스&lt;/Mark&gt;를 통해서 메모리로 전달&lt;/li&gt;
&lt;li&gt;1번지에 해당햐는 데이터를 &lt;Mark&gt;데이터 버스&lt;/Mark&gt;를 통해서 CPU로 전달&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;메모리-값-쓰기&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B0%92-%EC%93%B0%EA%B8%B0&quot; aria-label=&quot;메모리 값 쓰기 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메모리 값 쓰기&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/dltlaos11/dltlaos11.github.io/assets/74396128/91676f45-bb0b-4d4d-a8e3-fe5a19f36658&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;어디에 저장할 건지(&lt;Mark&gt;저장할 주소&lt;/Mark&gt;) → &lt;Mark&gt;주소 버스&lt;/Mark&gt;&lt;/li&gt;
&lt;li&gt;무엇을 할건지(&lt;Mark&gt;제어 신호&lt;/Mark&gt;) → &lt;Mark&gt;제어 버스&lt;/Mark&gt;&lt;/li&gt;
&lt;li&gt;무엇을 저장할 건지(&lt;Mark&gt;저장할 데이터&lt;/Mark&gt;) → &lt;Mark&gt;데이터 버스&lt;/Mark&gt;를 통해서 메모리에 저장&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;… OS에서 페이징, 프로세스의 모든 데이터와 명령어가 저장될 필요는 없음&lt;/p&gt;</content:encoded></item></channel></rss>