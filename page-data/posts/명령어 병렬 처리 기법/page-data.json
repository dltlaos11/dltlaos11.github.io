{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/명령어 병렬 처리 기법","result":{"data":{"markdownRemark":{"id":"ba0420b1-cb4f-508f-a8d0-3b1f61a0d3bc","html":"<ul>\n<li><a href=\"#%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%B3%91%EB%A0%AC-%EC%B2%98%EB%A6%AC%EA%B8%B0%EB%B2%95\">명령어 병렬 처리기법</a>\n<ul>\n<li><a href=\"#%EB%AA%85%EB%A0%B9%EC%96%B4-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8\">명령어 파이프라인</a>\n<ul>\n<li><a href=\"#%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%EC%9C%84%ED%97%98\">파이프라인 위험</a></li>\n</ul>\n</li>\n<li><a href=\"#%EC%8A%88%ED%8D%BC%EC%8A%A4%EC%B9%BC%EB%9D%BC-%EA%B8%B0%EB%B2%95\">슈퍼스칼라 기법</a></li>\n<li><a href=\"#%EB%B9%84%EC%88%9C%EC%B0%A8%EC%A0%81-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%B2%98%EB%A6%AC\">비순차적 명령어 처리</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"명령어-병렬-처리기법\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EB%A0%B9%EC%96%B4-%EB%B3%91%EB%A0%AC-%EC%B2%98%EB%A6%AC%EA%B8%B0%EB%B2%95\" aria-label=\"명령어 병렬 처리기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명령어 병렬 처리기법</h2>\n<h3 id=\"명령어-파이프라인\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EB%A0%B9%EC%96%B4-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8\" aria-label=\"명령어 파이프라인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명령어 파이프라인</h3>\n<p><strong>여러개의 명령어를 겹처서 실행하는 방법</strong></p>\n<p><strong>실행을 여러 단계로 나누는 CPU 내의 <Mark>하드웨어</Mark> 메커니즘을 구체적으로 의미</strong></p>\n<p>명령어가 처리되는 과정을 비슷한 시간 간격으로 나눈다면 다음과 같이 나눌 수 있다.</p>\n<ol>\n<li>명령어 인출(Instruction Fetch)</li>\n<li>명령어 해석(Instruction Decode)</li>\n<li>명령어 실행(Execute Instruction)</li>\n<li>결과 저장(Write Back)</li>\n</ol>\n<p>c.f. ) <code class=\"language-text\">인출 → 실행</code> 혹은 <code class=\"language-text\">명령어 해석 → 명령어 실행 → 명령어 접근 → 결과 저장</code>으로 나누기도\n<img src=\"https://github.com/boost-library/yong-study/assets/74396128/adfcc9c2-fc58-4625-8aa3-c538d661816f\" alt=\"image\"></p>\n<h4 id=\"명령어-파이프라이닝\" style=\"position:relative;\"><a href=\"#%EB%AA%85%EB%A0%B9%EC%96%B4-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B4%EB%8B%9D\" aria-label=\"명령어 파이프라이닝 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>명령어 파이프라이닝</h4>\n<p><strong>같은 단계가 겹치지만 않는다면 CPU는 <Mark>‘각 단계를 동시에 실행할 수 있다’</strong></p>\n<p><strong>명령 실행의 효율성과 성능을 향상시키는 데 사용되는 <Mark>하드웨어 및 소프트웨어 기술</Mark>을 포함하는 보다 포괄적인 개념</strong></p>\n<p><img src=\"https://github.com/boost-library/yong-study/assets/74396128/5bc5a29d-5582-424e-bb28-30394ede3670\" alt=\"image\"></p>\n<p>명령어 파이프라인을 사용하지 않는다면 각 명령어를 하나씩 처리해야 하므로 비효율적</p>\n<h4 id=\"파이프라인-위험\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%EC%9C%84%ED%97%98\" aria-label=\"파이프라인 위험 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이프라인 위험</h4>\n<p><strong>명령어 파이프라인이 성능 향상에 실패(병렬로 파이프라인이 제대로 동작하지 않는)하는 경우</strong></p>\n<p><img src=\"https://github.com/boost-library/yong-study/assets/74396128/b0e69632-7be5-4428-864a-2dff706f166c\" alt=\"image\"></p>\n<ol>\n<li>\n<p>데이터 위험</p>\n<p>명령어 간의 의존성에 의해 야기</p>\n<ul>\n<li>모든 명령어를 동시에 처리할 수는 없다</li>\n<li>이전 명령어를 끝까지 실행해야만 비로소 실행할 수 있는 경우</li>\n</ul>\n<p><img src=\"https://github.com/boost-library/yong-study/assets/74396128/c10a674d-1ee9-4dd5-9758-6300b5e128de\" alt=\"image\"></p>\n</li>\n<li>\n<p>제어 위험</p>\n<p>프로그램 카운터의 갑작스러운 변화</p>\n<ul>\n<li>PC가 갑작스럽게 특정 메모리 주소로 변화되는 상황에서 파이프라이닝이 성능 향상에 실패하는 경우</li>\n<li>기본적으로 명령어는 순차적인 흐름을 가지고 있음, 겹쳐서 실행하고 있던 다음 명령어가 헛수고</li>\n</ul>\n<p>c.f. ) 위 상황을 방지하기 위해서 PC가 어디로 점프할 것인지 미리 예측하는 분기 예측(branch prediction) 기술이 존재</p>\n<p><img src=\"https://github.com/boost-library/yong-study/assets/74396128/76215680-bf7c-4c45-bfd0-86e005f0c835\" alt=\"image\"></p>\n</li>\n<li>\n<p>구조적 위험</p>\n<p>서로 다른 명령어가 같은 CPU 부품(ALU, 레지스터)를 쓰려고 할 떄, 프로세서의 자원 부족</p>\n</li>\n</ol>\n<h3 id=\"슈퍼스칼라-기법\" style=\"position:relative;\"><a href=\"#%EC%8A%88%ED%8D%BC%EC%8A%A4%EC%B9%BC%EB%9D%BC-%EA%B8%B0%EB%B2%95\" aria-label=\"슈퍼스칼라 기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>슈퍼스칼라 기법</h3>\n<p>CPU 내부에 여러 개의 명령어 파이프라인을 포함한 구조</p>\n<ul>\n<li>\n<p>오늘날의 멀티스레드 프로세서</p>\n<ul>\n<li>\n<p>멀티스레드 프로세서</p>\n<ul>\n<li>\n<p>하드웨어적 스레드(각각의 코어가 동시에 수행할 수 있는 명령어의 단위)가 여러개 있는 스레드</p>\n</li>\n<li>\n<p>8 Core 16 Threads CPU 한번에 16개의 명령어를 실행</p>\n<p><img src=\"https://github.com/boost-library/yong-study/assets/74396128/fd06c96c-6ede-42dd-89f4-5b89d44bda1d\" alt=\"image\"></p>\n</li>\n<li>\n<p>이론적으로는 파이프라인 개수에 비례하여 처리 속도 증가</p>\n</li>\n<li>\n<p>하지만, <Mark>파이프라인 위험도</Mark>의 증가로 인해 파이프라인 개수에 비례하여 처리 속도가 증가하진 ❌</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"비순차적-명령어-처리\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EC%88%9C%EC%B0%A8%EC%A0%81-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%B2%98%EB%A6%AC\" aria-label=\"비순차적 명령어 처리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비순차적 명령어 처리</h3>\n<p><strong>파이프라인의 중단을 방지하기 위해 명령어를 순차적으로 처리하지 않는 명령어 병렬 처리 기법</strong></p>\n<p><img src=\"https://github.com/boost-library/yong-study/assets/74396128/3c720d3b-5ead-48c0-9a07-d5858228603a\" alt=\"image\"></p>\n<p>의존성이 없는(전체 프로그램 실행 흐름에 영향❌) 명령어의 순서를 바꿈으로 인해 파이프라이닝의 중단을 방지할 수 있다.</p>\n<h4 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h4>\n<p>명령어 병렬 처리기법</p>\n<ul>\n<li>명령어 파이프라이닝: 명령어를 겹처서(병렬) 실행시키는 방식\n<ul>\n<li>파이프라인 위험: 파이프라이닝을 해도 성능향상에 실패\n<ul>\n<li>데이터 위험</li>\n<li>제어 위험</li>\n<li>구조 위험</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>슈퍼스칼라 기법: 명령어 파이프라인을 여러개 두는 방식</li>\n<li>비순차적 명령어 처리: 의존성이 없는 명령어간 순서를 바꿔서 실행하는 방식</li>\n</ul>","fields":{"slug":"/posts/2023-09-01---명령어 병렬 처리 기법//posts/명령어 병렬 처리 기법","tagSlugs":["/tag/cs/"]},"frontmatter":{"date":"2023-09-01T18:35:32.169Z","description":"명령어 병렬 처리 기법에 대해서 배웁니다.","tags":["CS"],"title":"명령어 병렬 처리 기법","socialImage":null}}},"pageContext":{"slug":"/posts/2023-09-01---명령어 병렬 처리 기법//posts/명령어 병렬 처리 기법"}},"staticQueryHashes":["2236276093","251939775","401334301"]}