{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/javaScript","result":{"data":{"markdownRemark":{"id":"3ad2e4b4-239f-5170-a432-88e485794611","html":"<ul>\n<li><a href=\"#%EA%B3%A0%EA%B8%89%EC%96%B8%EC%96%B4%EC%99%80-%EC%A0%80%EA%B8%89%EC%96%B8%EC%96%B4\">고급언어와 저급언어</a>\n<ul>\n<li><a href=\"#%EA%B3%A0%EA%B8%89%EC%96%B8%EC%96%B4\">고급언어</a></li>\n<li><a href=\"#%EB%B0%94%EC%9D%B4%ED%8A%B8%EC%BD%94%EB%93%9C\">바이트코드</a></li>\n<li><a href=\"#%EC%A0%80%EA%B8%89%EC%96%B8%EC%96%B4\">저급언어</a></li>\n</ul>\n</li>\n<li><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B5%AC%EB%8F%99-%EC%9B%90%EB%A6%AC\">자바스크립트 구동 원리</a></li>\n<li><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%97%94%EC%A7%84\">자바스크립트 엔진</a></li>\n<li><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EC%9D%98-%EB%93%B1%EC%9E%A5\">자바스크립트 컴파일의 등장</a></li>\n<li><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%BB%B4%ED%8C%8C%EC%9D%BC-%EC%96%B8%EC%96%B4%EC%9D%98-%EC%84%B1%EB%8A%A5%EC%9D%B4-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0-%EC%96%B8%EC%96%B4%EC%9D%98-%EC%84%B1%EB%8A%A5%EB%B3%B4%EB%8B%A4-%EC%A2%8B%EC%9D%84%EA%B9%8C\">그렇다면 컴파일 언어의 성능이 인터프리터 언어의 성능보다 좋을까?</a></li>\n<li><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EC%BB%B4%ED%8C%8C%EC%9D%BC\">자바스크립트의 컴파일</a></li>\n<li><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0-%EC%96%B8%EC%96%B4%EC%9D%BC%EA%B9%8C\">그래서 자바스크립트는 인터프리터 언어일까?</a></li>\n</ul>\n<h2 id=\"고급언어와-저급언어\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EA%B8%89%EC%96%B8%EC%96%B4%EC%99%80-%EC%A0%80%EA%B8%89%EC%96%B8%EC%96%B4\" aria-label=\"고급언어와 저급언어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고급언어와 저급언어</h2>\n<h4 id=\"고급언어\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EA%B8%89%EC%96%B8%EC%96%B4\" aria-label=\"고급언어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고급언어</h4>\n<img width=\"702\" alt=\"image\" src=\"https://github.com/boost-library/chan-study/assets/74396128/cccc8092-8864-4af2-9ed3-c793c9298db3\">\n<ol>\n<li>\n<p>고급언어: 개발자가 이해하기 쉽게 만든언어\n<img width=\"680\" alt=\"image\" src=\"https://github.com/boost-library/chan-study/assets/74396128/0a92504f-f9ef-4a1d-8947-5d9ae5a4f462\"></p>\n</li>\n<li>\n<p>컴파일\n<img width=\"455\" alt=\"image\" src=\"https://github.com/boost-library/chan-study/assets/74396128/0b7ef389-5f0c-422d-8f4d-215ef6c7b04a\"></p>\n<p><strong>1. 전처리기</strong></p>\n<p>C언어로 예를 들자면, #으로 시작되는 소스코드를 처리하는 단계.</p>\n<p>stdio.h와 같은 <strong>헤더 파일</strong>을 불러와 코드 상으로 필요한 내용으로 채워주고 define으로 먼저 정의된 상수를 symbol table에 저장하는 등 <strong>매크로를 확장</strong>한다.</p>\n<p><strong>2. 컴파일</strong></p>\n<p>High Level Language인 소스코드를 기계언어에 가까운 Low Level Launguage인 <strong>어셈블리 언어로 변환</strong>한다.</p>\n<p><strong>3. 어셈블러</strong></p>\n<p>결국 컴퓨팅하는 주체는 CPU이므로 소스코드를 아무리 잘 작성했더라도 CPU 입장에서도 그게 잘 작성된 코드인지 들어봐야한다. 어셈블리어는 인간이 이해할 수 있는 기계 언어에 가장 가까운 언어로, 컴퓨터가 연산하는 블랙박스 안을 들여다볼 수 있는 창구의 역할을 한다. 따라서 컴퓨터의 동작 방식을 이해하고 더 가까이서 문제를 해결하기 위해 어셈블리어로 중간 변환 과정을 거친다.</p>\n<p>실제로 어셈블리 언어에는 집합, 배열, 객체와 같은 개념이 없고 모두 정수(int)로 변환된다.</p>\n<p><strong>4. 링커</strong></p>\n<p>만약 프로그램이 여러개의 파일로 이루어져있다면 하나의 오브젝트 파일로 이어주고 라이브러리들을 연결하는 링크 단계가 필요하다.</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>컴파일 언어\n<img width=\"651\" alt=\"image\" src=\"https://github.com/boost-library/chan-study/assets/74396128/a57f0f32-469d-47c5-aef1-707dc5e4a0c6\"></p>\n<ul>\n<li>컴파일 언어로 작성된 소스 코드는 컴파일러에 의해 저급 언어(어셈블리어)로 변환되고(<Mark>컴파일</Mark>), 컴파일 결과로 저급 언어인 목적(원시) 코드가 생성</li>\n<li>컴파일러가 소스코드 <Mark>전체를 훑어보면서</Mark>(한줄씩❌) 오류는 없는지, 사용되지 않는 변수, 최적화 여부 등을 따져본 뒤 목적 코드로 컴파일</li>\n<li>소스 코드 컴파일 중 오류가 발생하면 소스 코드 전체가 실행되지 않음</li>\n</ul>\n</li>\n<li>\n<p>인터프리트 언어</p>\n<ul>\n<li>인터프리터에 의해 <Mark>한 줄씩</Mark> 실행</li>\n<li>소스 코드 전체가 저급 언어로 변환되기까지 기다릴 필요 ❌</li>\n<li>소스 코드 인터프리트 중 오류가 발생하면 오류 발생 전까지의 코드는 실행</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"바이트코드\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EC%9D%B4%ED%8A%B8%EC%BD%94%EB%93%9C\" aria-label=\"바이트코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바이트코드</h4>\n<p><strong>바이트코드(Bytecode)</strong></p>\n<ul>\n<li>사람이 작성한 고급언어(Javascript등)를 가상머신이 이해할 수 있도록 변환한 코드.</li>\n<li>가상머신은 바이트코드를 다양한 종류의 CPU에 맞게 기계어로 컴파일 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Add r0<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> LdaSmi <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h4 id=\"저급언어\" style=\"position:relative;\"><a href=\"#%EC%A0%80%EA%B8%89%EC%96%B8%EC%96%B4\" aria-label=\"저급언어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>저급언어</h4>\n<p>저급언어: 컴퓨터가 이해하고 실행하는 언어</p>\n<ul>\n<li>기계어: 0과 1로 이루어진 명령어로 구성된 저급언어\n<img width=\"590\" alt=\"image\" src=\"https://github.com/boost-library/chan-study/assets/74396128/46b53e0d-8f56-47de-a08b-f23ea260a863\"></li>\n<li>어셈블리어: 0과 1로 이루어진 기계어를 읽기 편한 형태로 번역한 저급 언어(기계어보다 한단계 위의 저급언어)\n<img width=\"678\" alt=\"image\" src=\"https://github.com/boost-library/chan-study/assets/74396128/ae576538-3f7f-462a-8bef-3ef083ba1172\"></li>\n</ul>\n<p>→ 자바는 컴파일 언어와 인터프리터 언어의 경계가 모호. 양분되는 개념이라 생각하지 말고 컴파일 방식과 인터프리터 방식이 있는데 고급언어가 저급언로 변환되는 대표적인 방식 중 하나라는 개념으로 이해하는 것이 좋다.</p>\n<h2 id=\"자바스크립트-구동-원리\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B5%AC%EB%8F%99-%EC%9B%90%EB%A6%AC\" aria-label=\"자바스크립트 구동 원리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 구동 원리</h2>\n<p>자바스크립트 뿐만 아니라 모든 고급언어들은 컴퓨터에서 구동되기 위해서 기본적으로 컴퓨터가 이해가능한 기계어로 변환되어질 필요가 있다.\n<img width=\"683\" alt=\"image\" src=\"https://github.com/boost-library/yong-study/assets/74396128/674408b1-3b84-4776-ac17-e10effadcb04\">\n자바스크립트는 컴퓨터에게 전달되기전에 바이트 코드로 변환되고, 이를 받아 가상머신에 의해 기계어로 변환된다. 이러한 일련의 변환 과정은 아래와 같이 진행된다.</p>\n<p><strong>1) 바이트 코드로의 변환</strong></p>\n<p><Mark>자바스크립트 엔진</Mark>에 의해 바이트코드로 변환된다.</p>\n<p><strong>2) 기계어로 변환</strong></p>\n<p>CPU 종류에 따라(x86-64(<Mark>cpu종류</Mark>) gcc 12.2(<Mark>컴파일러종류</Mark>)) 기계어를 다르게 해석하기에 <Mark>가상 머신</Mark>은 최적화된 기계어를 제작해낸다. 이 가상머신 덕분에 개발자는 따로 CPU별로 최적화된 기계어를 만들어낼 필요는 없다.</p>\n<p><strong>3) CPU 코드 실행</strong></p>\n<p>기계어를 실행하여 데이터 저장 및 연산 작업을 진행한다.</p>\n<h2 id=\"자바스크립트-엔진\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%97%94%EC%A7%84\" aria-label=\"자바스크립트 엔진 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 엔진</h2>\n<p>JS가 자바스크립트 엔진에 의해 어떻게 바이트 코드로 변환되는지 알아보자</p>\n<p>이는 엔진 내 인터프리터가 진행한다. 인터프리터에게 전달되기 전에 <Mark>Tokenizer</Mark>, <Mark>Parser</Mark>를 거쳐 <Mark>AST</Mark>가 되는 일련의 과정이 필요하다.\n<img width=\"680\" alt=\"image\" src=\"https://github.com/boost-library/yong-study/assets/74396128/ba953273-db5c-4e00-af5c-5db7ac722cbe\"></p>\n<ul>\n<li><code class=\"language-text\">Tokenizing</code> : 주어진 소스코드를 의미있는 단위로 나누는 과정이다. 이렇게 나누어진 것을 Token이라고도 한다.</li>\n<li><code class=\"language-text\">Parser</code> : <code class=\"language-text\">Tokenizer</code> 로부터 생성된 토큰들의 배열을 바탕으로 이를 자바스크립트 문법에 알맞은 방식으로 <code class=\"language-text\">AST(Abstract Syntax Tree)</code> 로 변화 시킨다.</li>\n<li>이렇게 생성된 <code class=\"language-text\">AST</code> 는 인터프리터를 거쳐 기계가 알아볼 수 있는 바이트 코드롤 변환되게 되는 것이다.</li>\n</ul>\n<h2 id=\"자바스크립트-컴파일의-등장\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EC%9D%98-%EB%93%B1%EC%9E%A5\" aria-label=\"자바스크립트 컴파일의 등장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트 컴파일의 등장</h2>\n<p>이러한 자바스크립트는 인터프리터 언어로서 기능을 해왔지만, 점차 웹에서도 다양한 요구사항들이 추가되면서 더 많은 기능들을 갖추어야 했고 이는 자바스크립트가 점차 성능상 무거워지는 계기가 되었다. 한편, 2009년 당시 구글은 웹에서 이용가능한 지도인 구글맵스를 개발하려고 있었는데 지도 어플리케이션은 사용자 상호작용이 많이 필요한 만큼 성능상 개선이 필요했고 이를 개선하고자 내놓은 것이 바로 <Mark>Chrome V8</Mark> 엔진이다. 이를 통해 자바스크립트 언어에서도 컴파일을 진행하게 된 계기가 되었다.</p>\n<h2 id=\"그렇다면-컴파일-언어의-성능이-인터프리터-언어의-성능보다-좋을까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%BB%B4%ED%8C%8C%EC%9D%BC-%EC%96%B8%EC%96%B4%EC%9D%98-%EC%84%B1%EB%8A%A5%EC%9D%B4-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0-%EC%96%B8%EC%96%B4%EC%9D%98-%EC%84%B1%EB%8A%A5%EB%B3%B4%EB%8B%A4-%EC%A2%8B%EC%9D%84%EA%B9%8C\" aria-label=\"그렇다면 컴파일 언어의 성능이 인터프리터 언어의 성능보다 좋을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇다면 컴파일 언어의 성능이 인터프리터 언어의 성능보다 좋을까</h2>\n<p>컴파일 언어와 인터프리터 언의 가장 큰 차이점은 바로 실행전 미리 기계어로 바꾸어 놓는다는 점이다. 인터프리터처럼 고급언어를 기계어로 번역하는 것이 아니라 미리 변경해놓기에 빠르다.</p>\n<h2 id=\"자바스크립트의-컴파일\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EC%BB%B4%ED%8C%8C%EC%9D%BC\" aria-label=\"자바스크립트의 컴파일 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트의 컴파일</h2>\n<p>V8 엔진에 의해서 어떻게 자바스크립트도 컴파일과정을 알아보자\n<img width=\"676\" alt=\"image\" src=\"https://github.com/boost-library/yong-study/assets/74396128/16db5fa2-023b-485f-a299-fbd57d910b91\">\n<img width=\"680\" alt=\"image\" src=\"https://github.com/boost-library/yong-study/assets/74396128/051cc73b-d208-4856-ad52-13e65a50a7f7\"></p>\n<p>위 그림에서 자바스크립트가 Parser, AST, Interpreter를 거쳐 ByteCode(중간언어)로 변모하는 것은 V8 엔진이 등장하기 전까지의 JS의 모습이다. 이에 추가적으로 <code class=\"language-text\">Profiler</code> 라는게 등장한다. 이 <code class=\"language-text\">Profiler</code> 는 인터프리터를 관찰하며 실행되는 코드를 계속해서 모니터링 한다. 모니터링하는 과정에 코드내에 반복 실행되는 것이 있다면 이를 <code class=\"language-text\">JIT(Just-In-Time)</code> 컴파일러에게 넘겨 실시간으로 컴파일 하도록 한다. 이를 통해 최적화된 바이트 코드를 생성해낸다.</p>\n<p>이처럼 필요할때 마다 런타임 내에서 빠르게 컴파일 하는 컴파일러를 <code class=\"language-text\">JIT(Just-In-Time)</code> 컴파일러라고 부른다. 또한 필요할 경우 <code class=\"language-text\">Deoptimize</code> 과정을 진행하는데 프로파일러의 판단(이 코드 컴파일하는게 낫겠네!)이 틀렸을 수도 있기 때문에 컴파일하는 비용을 다시 줄이기 위함이다.</p>\n<h2 id=\"그래서-자바스크립트는-인터프리터-언어일까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%9D%B8%ED%84%B0%ED%94%84%EB%A6%AC%ED%84%B0-%EC%96%B8%EC%96%B4%EC%9D%BC%EA%B9%8C\" aria-label=\"그래서 자바스크립트는 인터프리터 언어일까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 자바스크립트는 인터프리터 언어일까</h2>\n<ul>\n<li>때에 따라 다르다. 현 시점에서의 자바스크립트는 실질적으로 컴파일이 되지만 편의 및 문맥상 인터프리터 언어로 분류된다. 모던 자바스크립트 컴파일러는 거의 런타임 내에서 빠르게 컴파일(<code class=\"language-text\">JITC</code>, <code class=\"language-text\">Just-In-Time Compilation</code>)을 수행한다.</li>\n<li>기본적으로는 <code class=\"language-text\">Interpreter</code> 언어로서의 성질을 가지지만, 성능상의 최적화를 위해 <code class=\"language-text\">Compiler</code> 언어의 특성도 같이 가진다.</li>\n</ul>\n<h3 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h3>\n<p><strong><a href=\"https://velog.io/@seungchan__y/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-Compiler-Interpreter-%EC%96%B8%EC%96%B4%EB%8B%A4#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B5%AC%EB%8F%99%EC%9B%90%EB%A6%AC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자바스크립트는 Compiler / Interpreter 언어다?</a></strong></p>\n<p><strong><a href=\"https://devlog-of-yein.tistory.com/m/6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">컴파일이란 무엇이며, 자바스크립트는 인터프리터 언어인가?</a></strong></p>","fields":{"slug":"/posts/2023-08-24---JS는 인터프리터 언어일까? 컴파일 언어일까?//posts/javaScript","tagSlugs":["/tag/cs/","/tag/javascript/"]},"frontmatter":{"date":"2023-08-24T21:40:32.169Z","description":"자바스크립트 코드 실행 동작 원리: 엔진, 가상머신, 인터프리터, AST 기초 등에 대해서 배웁니다.","tags":["CS","JavaScript"],"title":"JS 인터프리터 언어, 컴파일 언어🤔","socialImage":null}}},"pageContext":{"slug":"/posts/2023-08-24---JS는 인터프리터 언어일까? 컴파일 언어일까?//posts/javaScript"}},"staticQueryHashes":["2236276093","251939775","401334301"]}