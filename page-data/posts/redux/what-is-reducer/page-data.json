{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/redux/what-is-reducer","result":{"data":{"markdownRemark":{"id":"b0a0b514-2ee1-5a50-a6b8-75cc0e97d3d2","html":"<h3 id=\"리듀서는-비동기적인-코드--side-effects를-수행하면-안된다-리듀서는-순수함수\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EB%93%80%EC%84%9C%EB%8A%94-%EB%B9%84%EB%8F%99%EA%B8%B0%EC%A0%81%EC%9D%B8-%EC%BD%94%EB%93%9C--side-effects%EB%A5%BC-%EC%88%98%ED%96%89%ED%95%98%EB%A9%B4-%EC%95%88%EB%90%9C%EB%8B%A4-%EB%A6%AC%EB%93%80%EC%84%9C%EB%8A%94-%EC%88%9C%EC%88%98%ED%95%A8%EC%88%98\" aria-label=\"리듀서는 비동기적인 코드  side effects를 수행하면 안된다 리듀서는 순수함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>::리듀서는 비동기적인 코드 &#x26; side effects를 수행하면 안된다, 리듀서는 순수함수</h3>\n<blockquote>\n<p><strong>side effects?</strong></p>\n<p>부작용(side effect)은 프로그램의 실행 과정에서 함수나 모듈 외부에 영향을 미치는 것을 말합니다. 순수 함수(pure function)는 동일한 입력에 대해 항상 동일한 출력을 반환하고 외부에 영향을 미치지 않는 함수를 의미합니다. 이러한 함수는 부작용이 없습니다.</p>\n<p>부작용은 주로 다음과 같은 것들을 나타냅니다:</p>\n<p><strong>외부 데이터 변경:</strong> 함수나 모듈이 외부 데이터를 변경하거나 파일에 쓰기, 데이터베이스 업데이트 등과 같은 작업을 수행합니다.</p>\n<p><strong>네트워크 요청:</strong> 함수나 모듈이 네트워크 요청을 보내고, 이로 인해 서버 상태가 변경되거나 응답을 받습니다.</p>\n<p><strong>시간에 따른 작업:</strong> 함수나 모듈이 타이머, 인터벌, 애니메이션과 같이 시간에 따라 작업을 수행합니다.</p>\n<p><strong>외부 리소스 액세스:</strong> 함수나 모듈이 외부 리소스에 접근하고 파일을 읽거나 센서 데이터를 수집하는 등의 작업을 수행합니다.</p>\n<p>Redux와 같은 상태 관리 라이브러리에서 부작용은 주로 비동기 작업(네트워크 요청, 데이터 로딩)과 관련이 있습니다. 이러한 부작용을 관리하기 위해 Redux에서는 미들웨어를 사용하고, 리듀서는 순수 함수로 유지되어 예측 가능한 상태 변경을 담당합니다. 부작용을 효과적으로 처리하면 애플리케이션의 예측 가능성과 디버깅 용이성을 향상시킬 수 있습니다.</p>\n</blockquote>\n<p>이상 GPT의 대답이다.</p>\n<p>그러면 비동기 작업(async task)와 side effects는 어디에서 수행되어야 할까?</p>\n<ul>\n<li>컴포넌트 안에서(e.g. useEffect())</li>\n<li>액션 생성자 안에서</li>\n</ul>\n<p>이렇게?!</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> registerBoard <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> content<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> writer<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/boards\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>title<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> writer <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<aside>\r\n💡 리덕스 상태를 리듀서 함수 외부에서 변경해서는  안댐\n</aside>\n<h3 id=\"논리를-어디에-둘-것인가\" style=\"position:relative;\"><a href=\"#%EB%85%BC%EB%A6%AC%EB%A5%BC-%EC%96%B4%EB%94%94%EC%97%90-%EB%91%98-%EA%B2%83%EC%9D%B8%EA%B0%80\" aria-label=\"논리를 어디에 둘 것인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>::논리를 어디에 둘 것인가?</h3>\n<blockquote>\n<p>동기적 code, side effects free code(i.e. data transformations)</p>\n<ul>\n<li>Reducer를 선호</li>\n<li>Action Creator와 Components를 피해야 함</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>비동기 코드(async) or code with side effects</p>\n<ul>\n<li>Action Creator와 Components를 선호</li>\n<li>절대 Reducer를 쓰지 말 것</li>\n</ul>\n</blockquote>\n<p>💡 <strong>Reducer 내부에서는 비동기 요청을 보내는 것은 리덕스의 원칙에 어긋나는 거야? 나는 리듀서가 순수함수여야 한다고 알고 있어서 비동기 요청을 리듀서 내부에서 보낼 수 있는것인지 궁금해</strong></p>\n<blockquote>\n<p>Redux의 리듀서는 순수 함수(pure function)여야 합니다. 리덕스의 세 가지 주요 원칙 중 하나는 “순수 함수를 사용하여 상태를 변경”하는 것입니다. 이 원칙을 지키려면 리듀서 함수는 순수하고 예측 가능해야 합니다.</p>\n</blockquote>\n<p>순수 함수는 다음과 같은 특징을 갖습니다.</p>\n<ol>\n<li>동일한 입력 값에 대해 항상 동일한 출력 값을 반환합니다.</li>\n<li>외부의 상태나 데이터를 변경하지 않습니다.</li>\n<li><code class=\"language-text\">부작용(side effect)</code>을 일으키지 않습니다.</li>\n</ol>\n<p>따라서 <strong>비동기 작업을 수행하는 <code class=\"language-text\">API 호출</code>이나 <code class=\"language-text\">네트워크 요청</code>과 같은 작업은 리듀서 내부에서 직접 수행해서는 안 됩니다.</strong> 비동기 작업은 <code class=\"language-text\">액션 크리에이터</code> 또는 <code class=\"language-text\">미들웨어</code>(예: <code class=\"language-text\">Redux Thunk</code>, <code class=\"language-text\">Redux Saga</code>)를 사용하여 처리해야 합니다.</p>\n<p>:::Redux Thunk</p>\n<p>예를 들어, <code class=\"language-text\">Redux Thunk</code>를 사용하는 경우, <code class=\"language-text\">액션 크리에이터 함수</code> 내에서 <code class=\"language-text\">비동기 작업을 처리</code>하고 액션을 디스패치하여 리듀서에 상태 변경을 알립니다. 이렇게 하면 리듀서 함수는 순수 함수로 유지됩니다.</p>\n<p>따라서 리듀서 함수는 순수하고 예측 가능한 상태 변경을 담당하고, 비동기 작업은 다른 부분(액션 크리에이터 함수 또는 미들웨어)에서 처리하는 것이 Redux의 원칙을 준수하는 방법입니다.</p>\n<p>:::Redux Saga</p>\n<p>Redux Saga는 리덕스의 미들웨어로서, 비동기 작업을 처리하기 위해 액션과 리듀서 사이에 중간 역할을 합니다. Redux Saga는 제너레이터(generator) 함수를 사용하여 비동기 작업의 흐름을 더 선언적으로 제어합니다.</p>\n<p>이상 GPT의 대답을 참고해봤다.</p>\n<p>비동기 작업을 수행하는 <code class=\"language-text\">API 호출</code>이나 <code class=\"language-text\">네트워크 요청</code>과 같은 <code class=\"language-text\">부작용(side effects)</code>은 미들웨어 활용하는 것이 <code class=\"language-text\">Redux</code>내에서는 정답이지만, <code class=\"language-text\">Redux</code>를 쓰지 않는다면 <code class=\"language-text\">React Query</code>를 사용해보는 것도 추천한다.</p>","fields":{"slug":"/posts/2023-10-08---Reducer에 대해서 알아보자//posts/redux/what-is-reducer","tagSlugs":["/tag/redux/"]},"frontmatter":{"date":"2023-10-08T23:35:32.169Z","description":"Reducer에 대해서 배웁니다","tags":["Redux"],"title":"Reducer에 대해서 알아보자","socialImage":null}}},"pageContext":{"slug":"/posts/2023-10-08---Reducer에 대해서 알아보자//posts/redux/what-is-reducer"}},"staticQueryHashes":["2236276093","251939775","401334301"]}