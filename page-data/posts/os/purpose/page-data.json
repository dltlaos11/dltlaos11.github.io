{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/os/purpose","result":{"data":{"markdownRemark":{"id":"d3cdba17-b9c5-512b-a8db-2deea389e8ba","html":"<ul>\n<li><a href=\"#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EB%A5%BC-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\">운영체제를 알아야 하는 이유</a></li>\n<li><a href=\"#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%ED%81%B0-%EA%B7%B8%EB%A6%BC\">운영체제의 큰 그림</a>\n<ul>\n<li><a href=\"#%EC%BB%A4%EB%84%90\">커널</a></li>\n<li><a href=\"#%EC%9D%B4%EC%A4%91%EB%AA%A8%EB%93%9C%EC%99%80-%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%98%B8%EC%B6%9C\">이중모드와 시스템 호출</a></li>\n<li><a href=\"#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%ED%95%B5%EC%8B%AC-%EC%84%9C%EB%B9%84%EC%8A%A4\">운영체제의 핵심 서비스</a></li>\n</ul>\n</li>\n<li><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%98%B8%EC%B6%9C-%EC%A7%81%EC%A0%91-%EA%B4%80%EC%B0%B0%ED%95%98%EA%B8%B0\">시스템 호출(system call)직접 관찰하기</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\">프로세스</a>\n<ul>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%A7%81%EC%A0%91-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\">프로세스 직접 확인하기</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%A0%9C%EC%96%B4-%EB%B8%94%EB%A1%9D\">프로세스 제어 블록</a></li>\n<li><a href=\"#%EB%AC%B8%EB%A7%A5-%EA%B5%90%ED%99%98\">문맥 교환(context switch)</a></li>\n<li><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%98%81%EC%97%AD\">프로세스의 메모리 영역</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"운영체제를-알아야-하는-이유\" style=\"position:relative;\"><a href=\"#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EB%A5%BC-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"운영체제를 알아야 하는 이유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>운영체제를 알아야 하는 이유</h2>\n<p>모든 프로그램은 실행을 위해 자원을 필요로 한다</p>\n<h5 id=\"자원시스템-자원\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EC%9B%90%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%9E%90%EC%9B%90\" aria-label=\"자원시스템 자원 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자원/시스템 자원</h5>\n<ul>\n<li>프로그램 실행에 있어 마땅히 필요한 요소</li>\n<li>컴퓨터의 네 가지 핵심 부품 포함</li>\n</ul>\n<p><strong>운영체제는</strong></p>\n<ul>\n<li>실행할 프로그램에 <Mark>필요한 자원을 할당</Mark>하고</li>\n<li>프로그램이 올바르게 실행되도록 돕는</li>\n<li>특별한 프로그램</li>\n<li>프로그램이다 보니 메모리에 저장되어있어야 하니 운영체제는 특별한 프로그램이라</li>\n<li><Mark>커널영역</Mark>이라는 특별한 영역에 적재되는 프로그램</li>\n<li>일반 응용 프로그램은 <Mark>사용자 영역</Mark>에 적재</li>\n<li>운영체제는 하드웨어와 응용프로그램 사이에 위치</li>\n<li>운영체제의 메모리 관리\n<ul>\n<li>메모리에 적당한 공간에 응용 프로그램 적재 및 삭제</li>\n</ul>\n</li>\n<li>운영체제의 CPU관리</li>\n<li>운영체제의 입출력장치 관리</li>\n<li>운영체제는 컴퓨터의 자원을 cpu,프로세스,파일시스템,메모리 관리를 통해 효율적으로 컴퓨터를 관리</li>\n<li>운영체제 덕분에 개발자는 하드웨어를 조작하는 코드를 직접 작성할 필요 ❌</li>\n<li>운영체제는 프로그램을 위한 프로그램, 프로그램을 만드는 개발자는 운영체제를 잘 알아야 한다.</li>\n</ul>\n<h2 id=\"운영체제의-큰-그림\" style=\"position:relative;\"><a href=\"#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%ED%81%B0-%EA%B7%B8%EB%A6%BC\" aria-label=\"운영체제의 큰 그림 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>운영체제의 큰 그림</h2>\n<p>운영체제는 현존하는 프로그램 중 규모가 가장 큰 프로그램 중 하나</p>\n<h3 id=\"커널\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%84%90\" aria-label=\"커널 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커널</h3>\n<p>운영체제의 핵심 서비스를 담당하는 부분을 커널(kernal)이라고 한다.</p>\n<ul>\n<li>운영체제에는 속하지만 커널에는 속하지 않는 기능\n<ul>\n<li>유저 인터페이스(UI)</li>\n<li>사용자와 컴퓨터간의<Mark>통로</Mark>일 뿐 운영체제의 핵심 기능(커널)은 아님</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"이중모드와-시스템-호출\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A4%91%EB%AA%A8%EB%93%9C%EC%99%80-%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%98%B8%EC%B6%9C\" aria-label=\"이중모드와 시스템 호출 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이중모드와 시스템 호출</h3>\n<p>사용자가 실행하는 프로그램은 자원에 직접 접근하면 ❌ → 자원에 직접 접근은 위험</p>\n<p>오직 운영체제를 통해서만 접근하도록 하여 자원 보호</p>\n<p>응용 프로그램이 자원에 접근하려면 운영체제의 도움을 요청(=운영체제의 코드를 실행)해야</p>\n<p>응용 프로그램이 하드 디스크에 접근 → 운영체제(HDD 저장 코드 실행) → 하드웨어 저장</p>\n<p>이중 모드</p>\n<ul>\n<li>CPU가 명령어를 실행하는 모드를 크게 사용자 모드와 커널 모드로 구분하는 방식\n<ul>\n<li>사용자 모드\n<ul>\n<li>운영체제 서비스를 제공받을 수 없는 실행 모드</li>\n<li>커널 영역의 코드를 실행할 수 없는 실행 모드</li>\n<li>자원 접근 불가</li>\n</ul>\n</li>\n<li>커널 모드\n<ul>\n<li>운영체제의 서비스를 제공받을 수 있는 실행 모드</li>\n<li>자원 접근을 비롯한 모든 명령어 실행 가능</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>플래그 레지스터 속 <Mark>슈퍼바이저 플래그</Mark> 존재\n<ul>\n<li>커널 모드로 실행 중인지, 사용자 모드로 실행 중인지를 나타냄</li>\n</ul>\n</li>\n</ul>\n<p>시스템 호출</p>\n<ul>\n<li>커널 모드로 전환하여 실행하기 위해 호출</li>\n<li>일종의 소프트웨어 인터럽트\n<ul>\n<li>시스템 호출이 처리되는 방식은 인터럽트 처리 방식과 유사\n<ol>\n<li>\n<p>시스템 호출</p>\n</li>\n<li>\n<p>운영체제(운영체제 코드(⇒ 인터럽트 서비스 루틴) 실행)</p>\n</li>\n<li>\n<p>시스템 호출 복귀(사용자 모드로 복귀)\r\n<img width=\"612\" alt=\"image\" src=\"https://github.com/dltlaos11/CodeSolving/assets/74396128/066cacb7-d98e-42d9-9c06-71b19488c722\"></p>\n<p>시스템 호출은 운영체제 서비스를 제공받기 위해 커널 모드로 전환하는 방법</p>\n</li>\n</ol>\n시스템 호출 예시\r\n<img width=\"626\" alt=\"image\" src=\"https://github.com/dltlaos11/CodeSolving/assets/74396128/1bf37051-1db9-41ba-bdd3-9983c1d7cca3\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"운영체제의-핵심-서비스\" style=\"position:relative;\"><a href=\"#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%9D%98-%ED%95%B5%EC%8B%AC-%EC%84%9C%EB%B9%84%EC%8A%A4\" aria-label=\"운영체제의 핵심 서비스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>운영체제의 핵심 서비스</h3>\n<ul>\n<li>프로세스 == 실행 중인 프로그램</li>\n<li>수 많은 프로세스들이 동시에 실행</li>\n</ul>\n<p>c.f. ) 모든 프로세스들은 메모리에 올라있어야 하는데 페이징, 스와핑을 통해서 메모리에 모든 프로세스들이 올라오진 ❌</p>\n<p>프로세스 관리</p>\n<ul>\n<li>동시다발적으로 생성/실행/삭제되는 다양한 프로세스를 일목요연하게 관리\n<ul>\n<li>프로세스와 스레드, 프로세스 동기화, 교착상태 해결</li>\n</ul>\n</li>\n</ul>\n<p>자원 접근 및 할당</p>\n<ul>\n<li>CPU(CPU 스케줄링: 어떤 프로세스를 먼저, 얼마나 오래 실행할지)</li>\n<li>메모리(페이징, 스와핑, …)</li>\n<li>입출력장치(하드웨어 인터럽트 서비스 루틴을 제공하는 운영체제)</li>\n</ul>\n<p>파일 시스템 관리</p>\n<ul>\n<li>관련된 정보를 파일이라는 단위로 저장 장치에 보관</li>\n<li>파일들을 묶어 폴더(디렉터리) 단위로 저장 장치에 보관</li>\n</ul>\n<h2 id=\"시스템-호출-직접-관찰하기\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%98%B8%EC%B6%9C-%EC%A7%81%EC%A0%91-%EA%B4%80%EC%B0%B0%ED%95%98%EA%B8%B0\" aria-label=\"시스템 호출 직접 관찰하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시스템 호출 직접 관찰하기</h2>\n<p>시스템 콜 → 소프트웨어 인터럽트 발생 → 운영체제(커널 영역에 적재되어 있는 운영체제 코드를 실행)</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ls <span class=\"token operator\">==</span> <span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>ls\r\nls <span class=\"token operator\">-></span> 어떤 프로그램을 실행하는 것<span class=\"token punctuation\">,</span> <span class=\"token function\">strace</span><span class=\"token punctuation\">(</span>linux에서<span class=\"token punctuation\">)</span>\r\nstrace <span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>ls <span class=\"token operator\">-></span> ls 하면서 실행되는 시스템 콜을 불러옴<span class=\"token punctuation\">,</span>  \r\n\r\nvi hello<span class=\"token punctuation\">.</span>c\r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\r\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\ngcc hello<span class=\"token punctuation\">.</span>c\r\n<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>a<span class=\"token punctuation\">.</span>out\r\n\r\nsudo dtruss <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>a<span class=\"token punctuation\">.</span>out\r\n\r\n복구 모드로 macOS 재부팅 후 터미널에서 아래와 같이 명령어를 입력한 뒤 재부팅\r\n$ csrutil disable\r\n그럼 정상적으로 dtruss 명령어가 동작하는 것을 볼 수 있다\r\n\r\n참고로 아래의 메세지는 보안상의 이유로 <span class=\"token function\">dtrace</span><span class=\"token punctuation\">(</span>dtruss<span class=\"token punctuation\">)</span>실행이 의도적으로 안되게 보안 기능이 설정되어 있는 의미이고\r\n\r\ndtrace<span class=\"token operator\">:</span> system integrity protection is on<span class=\"token punctuation\">,</span> some features will not be available\r\ndtrace<span class=\"token operator\">:</span> failed to initialize dtrace<span class=\"token operator\">:</span> DTrace requires additional privileges\r\n\r\n아래의 명령어는 해당 기능을 끄겠다는 의미\r\n\r\n$ csrutil disable\r\n\r\n그렇기에 다시 복구 모드에서 아래 명령어로 해당 기능을 켜주는 것을 권장\r\n\r\n$ csrutil enable</code></pre></div>\n<h2 id=\"프로세스\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\" aria-label=\"프로세스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스</h2>\n<h3 id=\"프로세스-직접-확인하기\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%A7%81%EC%A0%91-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-label=\"프로세스 직접 확인하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스 직접 확인하기</h3>\n<p>리눅스 → ps 명령어</p>\n<ul>\n<li>포그라운드 프로세스(foreground process)\n<ul>\n<li>사용자가 볼 수 있는 공간에서 실행되는 프로세스</li>\n</ul>\n</li>\n<li>백그라운드 프로세스(background process)\n<ul>\n<li>사용자와 직접 상호작용이 가능한 백그라운드 프로세스</li>\n<li>사용자와 상호작용하지 않고 그저 정해진 일만 수행하는 프로세스→데몬,서비스</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"프로세스-제어-블록\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%A0%9C%EC%96%B4-%EB%B8%94%EB%A1%9D\" aria-label=\"프로세스 제어 블록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스 제어 블록</h3>\n<ul>\n<li>모든 프로세스는 실행을 위해 CPU가 필요, 하지만 CPU 자원은 한정적</li>\n<li>프로세스들은 돌아가며 한정된 시간 만큼만 CPU 이용\n<ul>\n<li>자신의 차례에 정해진 시간만큼 CPU 이용</li>\n<li>타이머(=타임아웃) 인터럽트가 발생하면 차례 양보</li>\n</ul>\n</li>\n<li>빠르게 번갈아 수행되는 프로세스들을 관리해야</li>\n<li>이를 위해 사용하는 자료구조가 프로세스 제어 블록(이하 PCB)\n<ul>\n<li>프로세스 관련 정보를 저장하는 자료 구조</li>\n<li>마치 상품에 달린 태그와 같은 정보</li>\n<li>프로세스 생성 시 커널 영역에 생성, 종료 시 폐기</li>\n</ul>\n</li>\n<li>PCB에 담기는 대표적인 정보\n<ul>\n<li>프로세스 ID(=PID)\n<ul>\n<li>특정 프로세스를 식별하기 위해 부여하는 고유한 번호(학교의 학번, 회사의 사번)</li>\n</ul>\n</li>\n<li>레지스터 값\n<ul>\n<li>프로세스는 자신의 실행 차례가 오면 이전까지 사용한 레지스터 중간 값을 모두 복원 → 실행 재게</li>\n<li>프로그램 카운터, 스택 포인터 …</li>\n</ul>\n</li>\n<li>프로세스 상태\n<ul>\n<li>입출력 장치를 사용하기 위해 기다리는 상태, CPU를 사용하기 위해 기다리는 상태, CPU 이용 중인 상태…</li>\n</ul>\n</li>\n<li>CPU 스케줄링 정보\n<ul>\n<li>프로세스가 언제, 어떤 순서로 CPU를 할당받을지에 대한 정보</li>\n</ul>\n</li>\n<li>메모리 정보\n<ul>\n<li>프로세스가 어느 주소에 저장되어 있는지에 대한 정보</li>\n<li>페이지 테이블 정보(’메모리 주소를 알 수 있는 정보가 담긴다’)</li>\n</ul>\n</li>\n<li>사용한 파일과 입출력장치 정보\n<ul>\n<li>할당된 입출력장치, 사용 중인(열린) 파일 정보</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>운영체제는 <Mark>커널 영역에 적재된</Mark> PCB를 보고 프로세스를 관리</li>\n</ul>\n<h3 id=\"문맥-교환\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EB%A7%A5-%EA%B5%90%ED%99%98\" aria-label=\"문맥 교환 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문맥 교환</h3>\n<ul>\n<li>한 프로세스(e.g. 프로세스 A)에서 다른 프로세스(e.g. 프로세스 B)로 실행 순서가 바뀌면</li>\n<li>기존에 실행되던 프로세스 A는 지금까지의 <Mark>중간 정보</Mark>를 백업\n<ul>\n<li>프로그램 카운터 등 각종 레지스터 값, 메모리 정보, 열었던 파일, 사용한 입출력장치 등</li>\n<li>이러한 중간 정보 == <Mark>문맥(context)</li>\n<li>다음 차례가 왔을 떄 실행을 재개하기 위한 정보</li>\n<li><Mark>“실행 문맥을 백업해두면 언제든 해당 프로세스의 실행을 재개할 수 있다”</li>\n</ul>\n</li>\n<li>뒤이어 실행할 프로세스 B의 문맥을 복구\n<ul>\n<li>자연스럽게 실행 중인 프로세스가 바뀜</li>\n</ul>\n</li>\n<li>이처럼 기존의 실행 중인 프로세스 문맥을 백업하고</li>\n<li>새로운 프로세스 실행을 위해 문맥을 복구하는 과정을</li>\n<li><Mark>문맥  교환(context switching)</Mark>이라 한다\n<ul>\n<li>여러 프로세스가 끊임없이 빠르게 번갈아 가며 실행되는 원리\r\n<img width=\"617\" alt=\"image\" src=\"https://github.com/dltlaos11/CodeSolving/assets/74396128/d77c2f16-43f4-41ba-80a4-83d343173b59\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"프로세스의-메모리-영역\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EC%98%81%EC%97%AD\" aria-label=\"프로세스의 메모리 영역 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스의 메모리 영역</h3>\n<ul>\n<li>크게 코드 영역(=텍스트 영역), 데이터 영역, 힙 영역, 스택영역으로 프로세스는 사용자 영역에 저장\n<ul>\n<li>코드 영역\n<ul>\n<li>실행할 수 있는 코드, 기계어로 이루어진 명령어 저장</li>\n<li>데이터가 아닌 CPU가 실행할 명령어가 담기기에 쓰기가 금지된 영역(read-only)</li>\n</ul>\n</li>\n<li>데이터 영역\n<ul>\n<li>잠깐 썼다가 없앨 데이터가 아닌 프로그램이 실행되는 동안 유지할 데이터가 저장</li>\n<li>e.g. 전역 변수</li>\n<li>코드 영역과 데이터 영역의 크기는 고정적, <Mark>정적 할당 영역</Mark>이라고도 한다</li>\n</ul>\n</li>\n<li>힙 영역\n<ul>\n<li>프로그램을 만드는 사용자, 즉 프로그래머가 직접 할당할 수 있는 저장공간</li>\n<li>힙 영역에 메모리 공간을 할당했다면 반환해줘야 하는데 프로그래밍 언어가 알아서 반환해주는 언어가 있는데 <Mark>가비지 컬렉션</Mark>이라 함, 일부 프로그래밍 언어(C, ..)는 가비지 컬렉션 기능이 없기에 일일이 메모리 반환과정을 거쳐야 하는데 그렇지 않으면 힙 영역에 공간은 계속해서 메모리 공간을 차지하면서 메모리 낭비를 초래 → <Mark>메모리 누수(Memeory Leak)</li>\n</ul>\n</li>\n<li>스택 영역\n<ul>\n<li>데이터가 일시적으로 저장되는 공간</li>\n<li>(데이터 영역에 담기는 값과는 달리) 잠깐 쓰다가 말 값들이 저장되는 공간</li>\n<li>e.g. 매개변수, 지역변수</li>\n<li>힙, 스택영역의 크기는 실행과정에서 가변적, <Mark>동적 할당 영역</Mark>이라고 한다\n<ul>\n<li>일반적으로 힙 영역은 낮은 주소에서 높은 주소로 할당</li>\n<li>일반적으로 스택 영역은 높은 주소에 낮은 주소로 할당</li>\n<li>힙영역은 스택 영역과 반대되는 방향으로 주소 할당\n<ul>\n<li>메모리간 충돌 방지를 위함(거의 반대방향으로 할당)\r\n<img width=\"439\" alt=\"image\" src=\"https://github.com/dltlaos11/CodeSolving/assets/74396128/40bba153-2b55-4b99-bcec-777b702f2f6b\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>커널영역은 따로 존재, 메모리 안에서</li>\n</ul>","fields":{"slug":"/posts/2023-09-09---운영체제의 큰 그림//posts/os/purpose","tagSlugs":["/tag/os/","/tag/cs/"]},"frontmatter":{"date":"2023-09-09T20:35:32.169Z","description":"운영체제를 알아야 하는 이유에 대해서 배웁니다","tags":["OS","CS"],"title":"운영체제의 큰 그림","socialImage":null}}},"pageContext":{"slug":"/posts/2023-09-09---운영체제의 큰 그림//posts/os/purpose"}},"staticQueryHashes":["2236276093","251939775","401334301"]}