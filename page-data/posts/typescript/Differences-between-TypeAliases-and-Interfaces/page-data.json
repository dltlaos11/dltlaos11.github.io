{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/typescript/Differences-between-TypeAliases-and-Interfaces","result":{"data":{"markdownRemark":{"id":"50fe236f-bda6-5325-961a-5f9c27336d2d","html":"<p><code class=\"language-text\">Type aliases</code>와 <code class=\"language-text\">Interfaces</code>는 굉장히 비슷하고, 많은 경우에 자유롭게 선택해서 사용할 수 있다.</p>\n<p><code class=\"language-text\">interface</code>가 가지는 대부분의 기능은 <code class=\"language-text\">type</code>에서도 동일하게 사용 가능하다. 이 둘의 가장 핵심적인 차이는, <strong><code class=\"language-text\">type</code>은 새 프로퍼티를 추가하기 위해 재선언할 수 없지만 <code class=\"language-text\">interface</code>는 항상 확장 가능하다는 점이다.</strong></p>\n<h2 id=\"1-interface\" style=\"position:relative;\"><a href=\"#1-interface\" aria-label=\"1 interface permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>1) Interface</strong></h2>\n<blockquote>\n<p>Extending an interface</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Bear</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  honey<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> bear <span class=\"token operator\">=</span> <span class=\"token function\">getBear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbear<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\nbear<span class=\"token punctuation\">.</span>honey<span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>Adding new fields to an existing interface</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Window</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Window</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">ts</span><span class=\"token operator\">:</span> TypeScriptAPI\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> src <span class=\"token operator\">=</span> <span class=\"token string\">'const a = \"Hello World\"'</span><span class=\"token punctuation\">;</span>\nwindow<span class=\"token punctuation\">.</span>ts<span class=\"token punctuation\">.</span><span class=\"token function\">transpileModule</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"2-type\" style=\"position:relative;\"><a href=\"#2-type\" aria-label=\"2 type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>2) Type</strong></h2>\n<blockquote>\n<p>Extending a type via intersections</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Animal</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Bear</span> <span class=\"token operator\">=</span> Animal <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span> \n  honey<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> bear <span class=\"token operator\">=</span> <span class=\"token function\">getBear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbear<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\nbear<span class=\"token punctuation\">.</span>honey<span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>A type cannot be changed after being created</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Window</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Window</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  ts<span class=\"token operator\">:</span> TypeScriptAPI<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n <span class=\"token comment\">// Error: Duplicate identifier 'Window'.</span></code></pre></div>\n<p><code class=\"language-text\">Interface</code>는 <code class=\"language-text\">Object type</code>(extend named types and classes)만을 확장 가능하다.</p>\n<p>💡 Interfaces may only be used to <a href=\"https://www.typescriptlang.org/play?#code/PTAEAkFMCdIcgM6gC4HcD2pIA8CGBbABwBtIl0AzUAKBFAFcEBLAOwHMUBPQs0XFgCahWyGBVwBjMrTDJMAshOhMARpD4tQ6FQCtIE5DWoixk9QEEWAeV37kARlABvaqDegAbrmL1IALlAEZGV2agBfampkbgtrWwMAJlAAXmdXdy8ff0Dg1jZwyLoAVWZ2Lh5QVHUJflAlSFxROsY5fFAWAmk6CnRoLGwmILzQQmV8JmQmDzI-SOiKgGV+CaYAL0gBBdyy1KCQ-Pn1AFFplgA5enw1PtSWS+vCsAAVAAtB4QQWOEMKBuYVUiVCYvYQsUTQcRSBDGMGmKSgAAa-VEgiQe2GLgKQA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">declare the shapes of objects, not rename primitives</a>.</p>\n<p>인터페이스는 <a href=\"https://www.typescriptlang.org/play?#code/PTAEAkFMCdIcgM6gC4HcD2pIA8CGBbABwBtIl0AzUAKBFAFcEBLAOwHMUBPQs0XFgCahWyGBVwBjMrTDJMAshOhMARpD4tQ6FQCtIE5DWoixk9QEEWAeV37kARlABvaqDegAbrmL1IALlAEZGV2agBfampkbgtrWwMAJlAAXmdXdy8ff0Dg1jZwyLoAVWZ2Lh5QVHUJflAlSFxROsY5fFAWAmk6CnRoLGwmILzQQmV8JmQmDzI-SOiKgGV+CaYAL0gBBdyy1KCQ-Pn1AFFplgA5enw1PtSWS+vCsAAVAAtB4QQWOEMKBuYVUiVCYvYQsUTQcRSBDGMGmKSgAAa-VEgiQe2GLgKQA\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">오직 객체의 모양을 선언하는 데에만 사용되며, 기존의 원시 타입에 별칭을 부여하는 데에는 사용할 수는 없습니다</a>.</p>\n<blockquote>\n<p><code class=\"language-text\">Object type</code> 을 확장한 경우</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">type Window2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">ts</span><span class=\"token operator\">:</span> number\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">X</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">X</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Window2</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>An interface cannot extend a primitive type like ‘number’;\nan interface can only extend named types and classes ❌</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">X</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">number</span></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>대부분의 경우 개인적 선호에 따라 인터페이스와 타입 중에서 선택할 수 있으며, 필요하다면 TypeScript가 다른 선택을 제안할 것이다. 잘 모르겠다면, 우선 <code class=\"language-text\">interface</code>를 사용하고 이후 문제가 발생하였을 때 <code class=\"language-text\">type</code>을 사용하면 된다.</p>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h3>\n<p><a href=\"https://www.typescriptlang.org/ko/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Documentation - Everyday Types</a></p>","fields":{"slug":"/posts/2023-09-30---Type Aliases와 Interfaces의 차이//posts/typescript/Differences-between-TypeAliases-and-Interfaces","tagSlugs":["/tag/typescript/"]},"frontmatter":{"date":"2023-09-30T20:35:32.169Z","description":"Type Aliases와 Interfaces의 차이에 대해서 배웁니다","tags":["Typescript"],"title":"Type Aliases와 Interfaces의 차이","socialImage":null}}},"pageContext":{"slug":"/posts/2023-09-30---Type Aliases와 Interfaces의 차이//posts/typescript/Differences-between-TypeAliases-and-Interfaces"}},"staticQueryHashes":["2236276093","251939775","401334301"]}